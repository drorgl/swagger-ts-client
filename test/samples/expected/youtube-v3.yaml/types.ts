/*****************************AutoGenerated Code : Do not edit *******************************/
// Type generated from Swagger definition

/*
    YouTube Data v3
    Supports core YouTube features, such as uploading videos,
    creating and managing playlists, searching for content, and
    much more.
    
    Contact:
    Google
    
    https://google.com

    License:
    Creative Commons Attribution 3.0
    http://creativecommons.org/licenses/by/3.0/
*/



    
    /**
     * Rights management policy for YouTube resources.
     */
    
    export interface IAccessPolicy  {
        /*
         * The value of allowed indicates whether the access to the
         * policy is allowed or denied by default.
         */
        allowed? : boolean;
        /*
         * A list of region codes that identify countries where the
         * default policy do not apply.
         */
        exception? : Array<string>;
   
    }
         
    /**
     * An activity resource contains information about an action
     * that a particular channel, or user, has taken on
     * YouTube.The actions reported in activity feeds include
     * rating a video, sharing a video, marking a video as a
     * favorite, commenting on a video, uploading a video, and so
     * forth. Each activity resource identifies the type of
     * action, the channel associated with the action, and the
     * resource(s) associated with the action, such as the video
     * that was rated or uploaded.
     */
    
    export interface IActivity  {
        /*
         * The contentDetails object contains information about the
         * content associated with the activity. For example, if the
         * snippet.type value is videoRated, then the contentDetails
         * object's content identifies the rated video.
         */
        contentDetails? : IActivityContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the activity.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#activity".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the
         * activity, including the activity's type and group ID.
         */
        snippet? : IActivitySnippet;
   
    }
         
    /**
     * Details about the content of an activity: the video that
     * was shared, the channel that was subscribed to, etc.
     */
    
    export interface IActivityContentDetails  {
        /*
         * The bulletin object contains details about a channel
         * bulletin post. This object is only present if the
         * snippet.type is bulletin.
         */
        bulletin? : IActivityContentDetailsBulletin;
        /*
         * The channelItem object contains details about a resource
         * which was added to a channel. This property is only present
         * if the snippet.type is channelItem.
         */
        channelItem? : IActivityContentDetailsChannelItem;
        /*
         * The comment object contains information about a resource
         * that received a comment. This property is only present if
         * the snippet.type is comment.
         */
        comment? : IActivityContentDetailsComment;
        /*
         * The favorite object contains information about a video that
         * was marked as a favorite video. This property is only
         * present if the snippet.type is favorite.
         */
        favorite? : IActivityContentDetailsFavorite;
        /*
         * The like object contains information about a resource that
         * received a positive (like) rating. This property is only
         * present if the snippet.type is like.
         */
        like? : IActivityContentDetailsLike;
        /*
         * The playlistItem object contains information about a new
         * playlist item. This property is only present if the
         * snippet.type is playlistItem.
         */
        playlistItem? : IActivityContentDetailsPlaylistItem;
        /*
         * The promotedItem object contains details about a resource
         * which is being promoted. This property is only present if
         * the snippet.type is promotedItem.
         */
        promotedItem? : IActivityContentDetailsPromotedItem;
        /*
         * The recommendation object contains information about a
         * recommended resource. This property is only present if the
         * snippet.type is recommendation.
         */
        recommendation? : IActivityContentDetailsRecommendation;
        /*
         * The social object contains details about a social network
         * post. This property is only present if the snippet.type is
         * social.
         */
        social? : IActivityContentDetailsSocial;
        /*
         * The subscription object contains information about a
         * channel that a user subscribed to. This property is only
         * present if the snippet.type is subscription.
         */
        subscription? : IActivityContentDetailsSubscription;
        /*
         * The upload object contains information about the uploaded
         * video. This property is only present if the snippet.type is
         * upload.
         */
        upload? : IActivityContentDetailsUpload;
   
    }
         
    /**
     * Details about a channel bulletin post.
     */
    
    export interface IActivityContentDetailsBulletin  {
        /*
         * The resourceId object contains information that identifies
         * the resource associated with a bulletin post.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Details about a resource which was added to a channel.
     */
    
    export interface IActivityContentDetailsChannelItem  {
        /*
         * The resourceId object contains information that identifies
         * the resource that was added to the channel.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Information about a resource that received a comment.
     */
    
    export interface IActivityContentDetailsComment  {
        /*
         * The resourceId object contains information that identifies
         * the resource associated with the comment.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Information about a video that was marked as a favorite
     * video.
     */
    
    export interface IActivityContentDetailsFavorite  {
        /*
         * The resourceId object contains information that identifies
         * the resource that was marked as a favorite.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Information about a resource that received a positive
     * (like) rating.
     */
    
    export interface IActivityContentDetailsLike  {
        /*
         * The resourceId object contains information that identifies
         * the rated resource.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Information about a new playlist item.
     */
    
    export interface IActivityContentDetailsPlaylistItem  {
        /*
         * The value that YouTube uses to uniquely identify the
         * playlist.
         */
        playlistId? : string;
        /*
         * ID of the item within the playlist.
         */
        playlistItemId? : string;
        /*
         * The resourceId object contains information about the
         * resource that was added to the playlist.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Details about a resource which is being promoted.
     */
    
    export interface IActivityContentDetailsPromotedItem  {
        /*
         * The URL the client should fetch to request a promoted item.
         */
        adTag? : string;
        /*
         * The URL the client should ping to indicate that the user
         * clicked through on this promoted item.
         */
        clickTrackingUrl? : string;
        /*
         * The URL the client should ping to indicate that the user
         * was shown this promoted item.
         */
        creativeViewUrl? : string;
        /*
         * The type of call-to-action, a message to the user
         * indicating action that can be taken.
         */
        ctaType? : string;
        /*
         * The custom call-to-action button text. If specified, it
         * will override the default button text for the cta_type.
         */
        customCtaButtonText? : string;
        /*
         * The text description to accompany the promoted item.
         */
        descriptionText? : string;
        /*
         * The URL the client should direct the user to, if the user
         * chooses to visit the advertiser's website.
         */
        destinationUrl? : string;
        /*
         * The list of forecasting URLs. The client should ping all of
         * these URLs when a promoted item is not available, to
         * indicate that a promoted item could have been shown.
         */
        forecastingUrl? : Array<string>;
        /*
         * The list of impression URLs. The client should ping all of
         * these URLs to indicate that the user was shown this
         * promoted item.
         */
        impressionUrl? : Array<string>;
        /*
         * The ID that YouTube uses to uniquely identify the promoted
         * video.
         */
        videoId? : string;
   
    }
         
    /**
     * Information that identifies the recommended resource.
     */
    
    export interface IActivityContentDetailsRecommendation  {
        /*
         * The reason that the resource is recommended to the user.
         */
        reason? : string;
        /*
         * The resourceId object contains information that identifies
         * the recommended resource.
         */
        resourceId? : IResourceId;
        /*
         * The seedResourceId object contains information about the
         * resource that caused the recommendation.
         */
        seedResourceId? : IResourceId;
   
    }
         
    /**
     * Details about a social network post.
     */
    
    export interface IActivityContentDetailsSocial  {
        /*
         * The author of the social network post.
         */
        author? : string;
        /*
         * An image of the post's author.
         */
        imageUrl? : string;
        /*
         * The URL of the social network post.
         */
        referenceUrl? : string;
        /*
         * The resourceId object encapsulates information that
         * identifies the resource associated with a social network
         * post.
         */
        resourceId? : IResourceId;
        /*
         * The name of the social network.
         */
        type? : string;
   
    }
         
    /**
     * Information about a channel that a user subscribed to.
     */
    
    export interface IActivityContentDetailsSubscription  {
        /*
         * The resourceId object contains information that identifies
         * the resource that the user subscribed to.
         */
        resourceId? : IResourceId;
   
    }
         
    /**
     * Information about the uploaded video.
     */
    
    export interface IActivityContentDetailsUpload  {
        /*
         * The ID that YouTube uses to uniquely identify the uploaded
         * video.
         */
        videoId? : string;
   
    }
         
    export interface IActivityListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of activities, or events, that match the request
         * criteria.
         */
        items? : Array<IActivity>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#activityListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about an activity, including title,
     * description, thumbnails, activity type and group.
     */
    
    export interface IActivitySnippet  {
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * associated with the activity.
         */
        channelId? : string;
        /*
         * Channel title for the channel responsible for this activity
         */
        channelTitle? : string;
        /*
         * The description of the resource primarily associated with
         * the activity.
         */
        description? : string;
        /*
         * The group ID associated with the activity. A group ID
         * identifies user events that are associated with the same
         * user and resource. For example, if a user rates a video and
         * marks the same video as a favorite, the entries for those
         * events would have the same group ID in the user's activity
         * feed. In your user interface, you can avoid repetition by
         * grouping events with the same groupId value.
         */
        groupId? : string;
        /*
         * The date and time that the video was uploaded. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * A map of thumbnail images associated with the resource that
         * is primarily associated with the activity. For each object
         * in the map, the key is the name of the thumbnail image, and
         * the value is an object that contains other information
         * about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The title of the resource primarily associated with the
         * activity.
         */
        title? : string;
        /*
         * The type of activity that the resource describes.
         */
        type? : string;
   
    }
         
    /**
     * A caption resource represents a YouTube caption track. A
     * caption track is associated with exactly one YouTube video.
     */
    
    export interface ICaption  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the caption
         * track.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#caption".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the caption.
         */
        snippet? : ICaptionSnippet;
   
    }
         
    export interface ICaptionListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of captions that match the request criteria.
         */
        items? : Array<ICaption>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#captionListResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a caption track, such as its language
     * and name.
     */
    
    export interface ICaptionSnippet  {
        /*
         * The type of audio track associated with the caption track.
         */
        audioTrackType? : string;
        /*
         * The reason that YouTube failed to process the caption
         * track. This property is only present if the state
         * property's value is failed.
         */
        failureReason? : string;
        /*
         * Indicates whether YouTube synchronized the caption track to
         * the audio track in the video. The value will be true if a
         * sync was explicitly requested when the caption track was
         * uploaded. For example, when calling the captions.insert or
         * captions.update methods, you can set the sync parameter to
         * true to instruct YouTube to sync the uploaded track to the
         * video. If the value is false, YouTube uses the time codes
         * in the uploaded caption track to determine when to display
         * captions.
         */
        isAutoSynced? : boolean;
        /*
         * Indicates whether the track contains closed captions for
         * the deaf and hard of hearing. The default value is false.
         */
        isCC? : boolean;
        /*
         * Indicates whether the caption track is a draft. If the
         * value is true, then the track is not publicly visible. The
         * default value is false.
         */
        isDraft? : boolean;
        /*
         * Indicates whether caption track is formatted for "easy
         * reader," meaning it is at a third-grade level for language
         * learners. The default value is false.
         */
        isEasyReader? : boolean;
        /*
         * Indicates whether the caption track uses large text for the
         * vision-impaired. The default value is false.
         */
        isLarge? : boolean;
        /*
         * The language of the caption track. The property value is a
         * BCP-47 language tag.
         */
        language? : string;
        /*
         * The date and time when the caption track was last updated.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        lastUpdated? : Date;
        /*
         * The name of the caption track. The name is intended to be
         * visible to the user as an option during playback.
         */
        name? : string;
        /*
         * The caption track's status.
         */
        status? : string;
        /*
         * The caption track's type.
         */
        trackKind? : string;
        /*
         * The ID that YouTube uses to uniquely identify the video
         * associated with the caption track.
         */
        videoId? : string;
   
    }
         
    /**
     * Brief description of the live stream cdn settings.
     */
    
    export interface ICdnSettings  {
        /*
         * The format of the video stream that you are sending to
         * Youtube.
         */
        format? : string;
        /*
         * The frame rate of the inbound video data.
         */
        frameRate? : string;
        /*
         * The ingestionInfo object contains information that YouTube
         * provides that you need to transmit your RTMP or HTTP stream
         * to YouTube.
         */
        ingestionInfo? : IIngestionInfo;
        /*
         * The method or protocol used to transmit the video stream.
         */
        ingestionType? : string;
        /*
         * The resolution of the inbound video data.
         */
        resolution? : string;
   
    }
         
    /**
     * A channel resource contains information about a YouTube
     * channel.
     */
    
    export interface IChannel  {
        /*
         * The auditionDetails object encapsulates channel data that
         * is relevant for YouTube Partners during the audition
         * process.
         */
        auditDetails? : IChannelAuditDetails;
        /*
         * The brandingSettings object encapsulates information about
         * the branding of the channel.
         */
        brandingSettings? : IChannelBrandingSettings;
        /*
         * The contentDetails object encapsulates information about
         * the channel's content.
         */
        contentDetails? : IChannelContentDetails;
        /*
         * The contentOwnerDetails object encapsulates channel data
         * that is relevant for YouTube Partners linked with the
         * channel.
         */
        contentOwnerDetails? : IChannelContentOwnerDetails;
        /*
         * The conversionPings object encapsulates information about
         * conversion pings that need to be respected by the channel.
         */
        conversionPings? : IChannelConversionPings;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the channel.
         */
        id? : string;
        /*
         * The invideoPromotion object encapsulates information about
         * promotion campaign associated with the channel.
         */
        invideoPromotion? : IInvideoPromotion;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#channel".
         */
        kind? : string;
        /*
         * Localizations for different languages
         */
        localizations? : any;
        /*
         * The snippet object contains basic details about the
         * channel, such as its title, description, and thumbnail
         * images.
         */
        snippet? : IChannelSnippet;
        /*
         * The statistics object encapsulates statistics for the
         * channel.
         */
        statistics? : IChannelStatistics;
        /*
         * The status object encapsulates information about the
         * privacy status of the channel.
         */
        status? : IChannelStatus;
        /*
         * The topicDetails object encapsulates information about
         * Freebase topics associated with the channel.
         */
        topicDetails? : IChannelTopicDetails;
   
    }
         
    /**
     * The auditDetails object encapsulates channel data that is
     * relevant for YouTube Partners during the audit process.
     */
    
    export interface IChannelAuditDetails  {
        /*
         * Whether or not the channel respects the community
         * guidelines.
         */
        communityGuidelinesGoodStanding? : boolean;
        /*
         * Whether or not the channel has any unresolved claims.
         */
        contentIdClaimsGoodStanding? : boolean;
        /*
         * Whether or not the channel has any copyright strikes.
         */
        copyrightStrikesGoodStanding? : boolean;
   
    }
         
    /**
     * A channel banner returned as the response to a
     * channel_banner.insert call.
     */
    
    export interface IChannelBannerResource  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#channelBannerResource".
         */
        kind? : string;
        /*
         * The URL of this banner image.
         */
        url? : string;
   
    }
         
    /**
     * Branding properties of a YouTube channel.
     */
    
    export interface IChannelBrandingSettings  {
        /*
         * Branding properties for the channel view.
         */
        channel? : IChannelSettings;
        /*
         * Additional experimental branding properties.
         */
        hints? : Array<IPropertyValue>;
        /*
         * Branding properties for branding images.
         */
        image? : IImageSettings;
        /*
         * Branding properties for the watch page.
         */
        watch? : IWatchSettings;
   
    }
         
    export interface ISwaggerInlineType845  {
        /*
         * The ID of the playlist that contains the channel"s favorite
         * videos. Use the  playlistItems.insert and
         * playlistItems.delete to add or remove items from that list.
         */
        favorites? : string;
        /*
         * The ID of the playlist that contains the channel"s liked
         * videos. Use the   playlistItems.insert and
         * playlistItems.delete to add or remove items from that list.
         */
        likes? : string;
        /*
         * The ID of the playlist that contains the channel"s uploaded
         * videos. Use the  videos.insert method to upload new videos
         * and the videos.delete method to delete previously uploaded
         * videos.
         */
        uploads? : string;
        /*
         * The ID of the playlist that contains the channel"s watch
         * history. Use the  playlistItems.insert and
         * playlistItems.delete to add or remove items from that list.
         */
        watchHistory? : string;
        /*
         * The ID of the playlist that contains the channel"s watch
         * later playlist. Use the playlistItems.insert and
         * playlistItems.delete to add or remove items from that list.
         */
        watchLater? : string;
   
    }
         
    /**
     * Details about the content of a channel.
     */
    
    export interface IChannelContentDetails  {
        relatedPlaylists? : ISwaggerInlineType845;
   
    }
         
    /**
     * The contentOwnerDetails object encapsulates channel data
     * that is relevant for YouTube Partners linked with the
     * channel.
     */
    
    export interface IChannelContentOwnerDetails  {
        /*
         * The ID of the content owner linked to the channel.
         */
        contentOwner? : string;
        /*
         * The date and time of when the channel was linked to the
         * content owner. The value is specified in ISO 8601
         * (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        timeLinked? : Date;
   
    }
         
    /**
     * Pings that the app shall fire (authenticated by biscotti
     * cookie). Each ping has a context, in which the app must
     * fire the ping, and a url identifying the ping.
     */
    
    export interface IChannelConversionPing  {
        /*
         * Defines the context of the ping.
         */
        context? : string;
        /*
         * The url (without the schema) that the player shall send the
         * ping to. It's at caller's descretion to decide which schema
         * to use (http vs https) Example of a returned url:
         * //googleads.g.doubleclick.net/pagead/
         * viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D
         * cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The
         * caller must append biscotti authentication (ms param in
         * case of mobile, for example) to this ping.
         */
        conversionUrl? : string;
   
    }
         
    /**
     * The conversionPings object encapsulates information about
     * conversion pings that need to be respected by the channel.
     */
    
    export interface IChannelConversionPings  {
        /*
         * Pings that the app shall fire (authenticated by biscotti
         * cookie). Each ping has a context, in which the app must
         * fire the ping, and a url identifying the ping.
         */
        pings? : Array<IChannelConversionPing>;
   
    }
         
    export interface IChannelListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of channels that match the request criteria.
         */
        items? : Array<IChannel>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#channelListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Channel localization setting
     */
    
    export interface IChannelLocalization  {
        /*
         * The localized strings for channel's description.
         */
        description? : string;
        /*
         * The localized strings for channel's title.
         */
        title? : string;
   
    }
         
    export interface IChannelProfileDetails  {
        /*
         * The YouTube channel ID.
         */
        channelId? : string;
        /*
         * The channel's URL.
         */
        channelUrl? : string;
        /*
         * The channel's display name.
         */
        displayName? : string;
        /*
         * The channels's avatar URL.
         */
        profileImageUrl? : string;
   
    }
         
    export interface IChannelSection  {
        /*
         * The contentDetails object contains details about the
         * channel section content, such as a list of playlists or
         * channels featured in the section.
         */
        contentDetails? : IChannelSectionContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * section.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#channelSection".
         */
        kind? : string;
        /*
         * Localizations for different languages
         */
        localizations? : any;
        /*
         * The snippet object contains basic details about the channel
         * section, such as its type, style and title.
         */
        snippet? : IChannelSectionSnippet;
        /*
         * The targeting object contains basic targeting settings
         * about the channel section.
         */
        targeting? : IChannelSectionTargeting;
   
    }
         
    /**
     * Details about a channelsection, including playlists and
     * channels.
     */
    
    export interface IChannelSectionContentDetails  {
        /*
         * The channel ids for type multiple_channels.
         */
        channels? : Array<string>;
        /*
         * The playlist ids for type single_playlist and
         * multiple_playlists. For singlePlaylist, only one playlistId
         * is allowed.
         */
        playlists? : Array<string>;
   
    }
         
    export interface IChannelSectionListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of ChannelSections that match the request criteria.
         */
        items? : Array<IChannelSection>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#channelSectionListResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * ChannelSection localization setting
     */
    
    export interface IChannelSectionLocalization  {
        /*
         * The localized strings for channel section's title.
         */
        title? : string;
   
    }
         
    /**
     * Basic details about a channel section, including title,
     * style and position.
     */
    
    export interface IChannelSectionSnippet  {
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * that published the channel section.
         */
        channelId? : string;
        /*
         * The language of the channel section's default title and
         * description.
         */
        defaultLanguage? : string;
        /*
         * Localized title, read-only.
         */
        localized? : IChannelSectionLocalization;
        /*
         * The position of the channel section in the channel.
         */
        position? : number;
        /*
         * The style of the channel section.
         */
        style? : string;
        /*
         * The channel section's title for multiple_playlists and
         * multiple_channels.
         */
        title? : string;
        /*
         * The type of the channel section.
         */
        type? : string;
   
    }
         
    /**
     * ChannelSection targeting setting.
     */
    
    export interface IChannelSectionTargeting  {
        /*
         * The country the channel section is targeting.
         */
        countries? : Array<string>;
        /*
         * The language the channel section is targeting.
         */
        languages? : Array<string>;
        /*
         * The region the channel section is targeting.
         */
        regions? : Array<string>;
   
    }
         
    /**
     * Branding properties for the channel view.
     */
    
    export interface IChannelSettings  {
        /*
         * The country of the channel.
         */
        country? : string;
        defaultLanguage? : string;
        /*
         * Which content tab users should see when viewing the channel.
         */
        defaultTab? : string;
        /*
         * Specifies the channel description.
         */
        description? : string;
        /*
         * Title for the featured channels tab.
         */
        featuredChannelsTitle? : string;
        /*
         * The list of featured channels.
         */
        featuredChannelsUrls? : Array<string>;
        /*
         * Lists keywords associated with the channel, comma-separated.
         */
        keywords? : string;
        /*
         * Whether user-submitted comments left on the channel page
         * need to be approved by the channel owner to be publicly
         * visible.
         */
        moderateComments? : boolean;
        /*
         * A prominent color that can be rendered on this channel page.
         */
        profileColor? : string;
        /*
         * Whether the tab to browse the videos should be displayed.
         */
        showBrowseView? : boolean;
        /*
         * Whether related channels should be proposed.
         */
        showRelatedChannels? : boolean;
        /*
         * Specifies the channel title.
         */
        title? : string;
        /*
         * The ID for a Google Analytics account to track and measure
         * traffic to the channels.
         */
        trackingAnalyticsAccountId? : string;
        /*
         * The trailer of the channel, for users that are not
         * subscribers.
         */
        unsubscribedTrailer? : string;
   
    }
         
    /**
     * Basic details about a channel, including title, description
     * and thumbnails.
     */
    
    export interface IChannelSnippet  {
        /*
         * The country of the channel.
         */
        country? : string;
        /*
         * The custom url of the channel.
         */
        customUrl? : string;
        /*
         * The language of the channel's default title and description.
         */
        defaultLanguage? : string;
        /*
         * The description of the channel.
         */
        description? : string;
        /*
         * Localized title and description, read-only.
         */
        localized? : IChannelLocalization;
        /*
         * The date and time that the channel was created. The value
         * is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * A map of thumbnail images associated with the channel. For
         * each object in the map, the key is the name of the
         * thumbnail image, and the value is an object that contains
         * other information about the thumbnail.
         * 
         * When displaying thumbnails in your application, make sure
         * that your code uses the image URLs exactly as they are
         * returned in API responses. For example, your application
         * should not use the http domain instead of the https domain
         * in a URL returned in an API response.
         * 
         * Beginning in July 2018, channel thumbnail URLs will only be
         * available in the https domain, which is how the URLs appear
         * in API responses. After that time, you might see broken
         * images in your application if it tries to load YouTube
         * images from the http domain.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The channel's title.
         */
        title? : string;
   
    }
         
    /**
     * Statistics about a channel: number of subscribers, number
     * of videos in the channel, etc.
     */
    
    export interface IChannelStatistics  {
        /*
         * The number of comments for the channel.
         */
        commentCount? : string;
        /*
         * Whether or not the number of subscribers is shown for this
         * user.
         */
        hiddenSubscriberCount? : boolean;
        /*
         * The number of subscribers that the channel has.
         */
        subscriberCount? : string;
        /*
         * The number of videos uploaded to the channel.
         */
        videoCount? : string;
        /*
         * The number of times the channel has been viewed.
         */
        viewCount? : string;
   
    }
         
    /**
     * JSON template for the status part of a channel.
     */
    
    export interface IChannelStatus  {
        /*
         * If true, then the user is linked to either a YouTube
         * username or G+ account. Otherwise, the user doesn't have a
         * public YouTube identity.
         */
        isLinked? : boolean;
        /*
         * The long uploads status of this channel. See
         */
        longUploadsStatus? : string;
        /*
         * Privacy status of the channel.
         */
        privacyStatus? : string;
   
    }
         
    /**
     * Freebase topic information related to the channel.
     */
    
    export interface IChannelTopicDetails  {
        /*
         * A list of Wikipedia URLs that describe the channel's
         * content.
         */
        topicCategories? : Array<string>;
        /*
         * A list of Freebase topic IDs associated with the channel.
         * You can retrieve information about each topic using the
         * Freebase Topic API.
         */
        topicIds? : Array<string>;
   
    }
         
    /**
     * A comment represents a single YouTube comment.
     */
    
    export interface IComment  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the comment.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#comment".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the comment.
         */
        snippet? : ICommentSnippet;
   
    }
         
    export interface ICommentListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of comments that match the request criteria.
         */
        items? : Array<IComment>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#commentListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a comment, such as its author and text.
     */
    
    export interface ICommentSnippet  {
        /*
         * The id of the author's YouTube channel, if any.
         */
        authorChannelId? : any;
        /*
         * Link to the author's YouTube channel, if any.
         */
        authorChannelUrl? : string;
        /*
         * The name of the user who posted the comment.
         */
        authorDisplayName? : string;
        /*
         * The URL for the avatar of the user who posted the comment.
         */
        authorProfileImageUrl? : string;
        /*
         * Whether the current viewer can rate this comment.
         */
        canRate? : boolean;
        /*
         * The id of the corresponding YouTube channel. In case of a
         * channel comment this is the channel the comment refers to.
         * In case of a video comment it's the video's channel.
         */
        channelId? : string;
        /*
         * The total number of likes this comment has received.
         */
        likeCount? : number;
        /*
         * The comment's moderation status. Will not be set if the
         * comments were requested through the id filter.
         */
        moderationStatus? : string;
        /*
         * The unique id of the parent comment, only set for replies.
         */
        parentId? : string;
        /*
         * The date and time when the comment was orignally published.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        publishedAt? : Date;
        /*
         * The comment's text. The format is either plain text or HTML
         * dependent on what has been requested. Even the plain text
         * representation may differ from the text originally posted
         * in that it may replace video links with video titles etc.
         */
        textDisplay? : string;
        /*
         * The comment's original raw text as initially posted or last
         * updated. The original text will only be returned if it is
         * accessible to the viewer, which is only guaranteed if the
         * viewer is the comment's author.
         */
        textOriginal? : string;
        /*
         * The date and time when was last updated . The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        updatedAt? : Date;
        /*
         * The ID of the video the comment refers to, if any.
         */
        videoId? : string;
        /*
         * The rating the viewer has given to this comment. For the
         * time being this will never return RATE_TYPE_DISLIKE and
         * instead return RATE_TYPE_NONE. This may change in the
         * future.
         */
        viewerRating? : string;
   
    }
         
    /**
     * A comment thread represents information that applies to a
     * top level comment and all its replies. It can also include
     * the top level comment itself and some of the replies.
     */
    
    export interface ICommentThread  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the comment
         * thread.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#commentThread".
         */
        kind? : string;
        /*
         * The replies object contains a limited number of replies (if
         * any) to the top level comment found in the snippet.
         */
        replies? : ICommentThreadReplies;
        /*
         * The snippet object contains basic details about the comment
         * thread and also the top level comment.
         */
        snippet? : ICommentThreadSnippet;
   
    }
         
    export interface ICommentThreadListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of comment threads that match the request criteria.
         */
        items? : Array<ICommentThread>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#commentThreadListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Comments written in (direct or indirect) reply to the top
     * level comment.
     */
    
    export interface ICommentThreadReplies  {
        /*
         * A limited number of replies. Unless the number of replies
         * returned equals total_reply_count in the snippet the
         * returned replies are only a subset of the total number of
         * replies.
         */
        comments? : Array<IComment>;
   
    }
         
    /**
     * Basic details about a comment thread.
     */
    
    export interface ICommentThreadSnippet  {
        /*
         * Whether the current viewer of the thread can reply to it.
         * This is viewer specific - other viewers may see a different
         * value for this field.
         */
        canReply? : boolean;
        /*
         * The YouTube channel the comments in the thread refer to or
         * the channel with the video the comments refer to. If
         * video_id isn't set the comments refer to the channel itself.
         */
        channelId? : string;
        /*
         * Whether the thread (and therefore all its comments) is
         * visible to all YouTube users.
         */
        isPublic? : boolean;
        /*
         * The top level comment of this thread.
         */
        topLevelComment? : IComment;
        /*
         * The total number of replies (not including the top level
         * comment).
         */
        totalReplyCount? : number;
        /*
         * The ID of the video the comments refer to, if any. No
         * video_id implies a channel discussion comment.
         */
        videoId? : string;
   
    }
         
    /**
     * Ratings schemes. The country-specific ratings are mostly
     * for movies and shows. NEXT_ID: 71
     */
    
    export interface IContentRating  {
        /*
         * The video's Australian Classification Board (ACB) or
         * Australian Communications and Media Authority (ACMA)
         * rating. ACMA ratings are used to classify children's
         * television programming.
         */
        acbRating? : string;
        /*
         * The video's rating from Italy's Autorità per le Garanzie
         * nelle Comunicazioni (AGCOM).
         */
        agcomRating? : string;
        /*
         * The video's Anatel (Asociación Nacional de Televisión)
         * rating for Chilean television.
         */
        anatelRating? : string;
        /*
         * The video's British Board of Film Classification (BBFC)
         * rating.
         */
        bbfcRating? : string;
        /*
         * The video's rating from Thailand's Board of Film and Video
         * Censors.
         */
        bfvcRating? : string;
        /*
         * The video's rating from the Austrian Board of Media
         * Classification (Bundesministerium für Unterricht, Kunst und
         * Kultur).
         */
        bmukkRating? : string;
        /*
         * Rating system for Canadian TV - Canadian TV Classification
         * System The video's rating from the Canadian
         * Radio-Television and Telecommunications Commission (CRTC)
         * for Canadian English-language broadcasts. For more
         * information, see the Canadian Broadcast Standards Council
         * website.
         */
        catvRating? : string;
        /*
         * The video's rating from the Canadian Radio-Television and
         * Telecommunications Commission (CRTC) for Canadian
         * French-language broadcasts. For more information, see the
         * Canadian Broadcast Standards Council website.
         */
        catvfrRating? : string;
        /*
         * The video's Central Board of Film Certification (CBFC -
         * India) rating.
         */
        cbfcRating? : string;
        /*
         * The video's Consejo de Calificación Cinematográfica (Chile)
         * rating.
         */
        cccRating? : string;
        /*
         * The video's rating from Portugal's Comissão de
         * Classificação de Espect´culos.
         */
        cceRating? : string;
        /*
         * The video's rating in Switzerland.
         */
        chfilmRating? : string;
        /*
         * The video's Canadian Home Video Rating System (CHVRS)
         * rating.
         */
        chvrsRating? : string;
        /*
         * The video's rating from the Commission de Contrôle des
         * Films (Belgium).
         */
        cicfRating? : string;
        /*
         * The video's rating from Romania's CONSILIUL NATIONAL AL
         * AUDIOVIZUALULUI (CNA).
         */
        cnaRating? : string;
        /*
         * Rating system in France - Commission de classification
         * cinematographique
         */
        cncRating? : string;
        /*
         * The video's rating from France's Conseil supérieur de
         * l?audiovisuel, which rates broadcast content.
         */
        csaRating? : string;
        /*
         * The video's rating from Luxembourg's Commission de
         * surveillance de la classification des films (CSCF).
         */
        cscfRating? : string;
        /*
         * The video's rating in the Czech Republic.
         */
        czfilmRating? : string;
        /*
         * The video's Departamento de Justiça, Classificação,
         * Qualificação e Títulos (DJCQT - Brazil) rating.
         */
        djctqRating? : string;
        /*
         * Reasons that explain why the video received its DJCQT
         * (Brazil) rating.
         */
        djctqRatingReasons? : Array<string>;
        /*
         * Rating system in Turkey - Evaluation and Classification
         * Board of the Ministry of Culture and Tourism
         */
        ecbmctRating? : string;
        /*
         * The video's rating in Estonia.
         */
        eefilmRating? : string;
        /*
         * The video's rating in Egypt.
         */
        egfilmRating? : string;
        /*
         * The video's Eirin (映倫) rating. Eirin is the Japanese rating
         * system.
         */
        eirinRating? : string;
        /*
         * The video's rating from Malaysia's Film Censorship Board.
         */
        fcbmRating? : string;
        /*
         * The video's rating from Hong Kong's Office for Film,
         * Newspaper and Article Administration.
         */
        fcoRating? : string;
        /*
         * This property has been deprecated. Use the
         * contentDetails.contentRating.cncRating instead.
         */
        fmocRating? : string;
        /*
         * The video's rating from South Africa's Film and Publication
         * Board.
         */
        fpbRating? : string;
        /*
         * Reasons that explain why the video received its FPB (South
         * Africa) rating.
         */
        fpbRatingReasons? : Array<string>;
        /*
         * The video's Freiwillige Selbstkontrolle der Filmwirtschaft
         * (FSK - Germany) rating.
         */
        fskRating? : string;
        /*
         * The video's rating in Greece.
         */
        grfilmRating? : string;
        /*
         * The video's Instituto de la Cinematografía y de las Artes
         * Audiovisuales (ICAA - Spain) rating.
         */
        icaaRating? : string;
        /*
         * The video's Irish Film Classification Office (IFCO -
         * Ireland) rating. See the IFCO website for more information.
         */
        ifcoRating? : string;
        /*
         * The video's rating in Israel.
         */
        ilfilmRating? : string;
        /*
         * The video's INCAA (Instituto Nacional de Cine y Artes
         * Audiovisuales - Argentina) rating.
         */
        incaaRating? : string;
        /*
         * The video's rating from the Kenya Film Classification Board.
         */
        kfcbRating? : string;
        /*
         * voor de Classificatie van Audiovisuele Media (Netherlands).
         */
        kijkwijzerRating? : string;
        /*
         * The video's Korea Media Rating Board (영상물등급위원회) rating. The
         * KMRB rates videos in South Korea.
         */
        kmrbRating? : string;
        /*
         * The video's rating from Indonesia's Lembaga Sensor Film.
         */
        lsfRating? : string;
        /*
         * The video's rating from Malta's Film Age-Classification
         * Board.
         */
        mccaaRating? : string;
        /*
         * The video's rating from the Danish Film Institute's (Det
         * Danske Filminstitut) Media Council for Children and Young
         * People.
         */
        mccypRating? : string;
        /*
         * The video's rating system for Vietnam - MCST
         */
        mcstRating? : string;
        /*
         * The video's rating from Singapore's Media Development
         * Authority (MDA) and, specifically, it's Board of Film
         * Censors (BFC).
         */
        mdaRating? : string;
        /*
         * The video's rating from Medietilsynet, the Norwegian Media
         * Authority.
         */
        medietilsynetRating? : string;
        /*
         * The video's rating from Finland's Kansallinen
         * Audiovisuaalinen Instituutti (National Audiovisual
         * Institute).
         */
        mekuRating? : string;
        /*
         * The rating system for MENA countries, a clone of MPAA. It
         * is needed to
         */
        menaMpaaRating? : string;
        /*
         * The video's rating from the Ministero dei Beni e delle
         * Attività Culturali e del Turismo (Italy).
         */
        mibacRating? : string;
        /*
         * The video's Ministerio de Cultura (Colombia) rating.
         */
        mocRating? : string;
        /*
         * The video's rating from Taiwan's Ministry of Culture (文化部).
         */
        moctwRating? : string;
        /*
         * The video's Motion Picture Association of America (MPAA)
         * rating.
         */
        mpaaRating? : string;
        /*
         * The rating system for trailer, DVD, and Ad in the US. See
         * http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
         */
        mpaatRating? : string;
        /*
         * The video's rating from the Movie and Television Review and
         * Classification Board (Philippines).
         */
        mtrcbRating? : string;
        /*
         * The video's rating from the Maldives National Bureau of
         * Classification.
         */
        nbcRating? : string;
        /*
         * The video's rating in Poland.
         */
        nbcplRating? : string;
        /*
         * The video's rating from the Bulgarian National Film Center.
         */
        nfrcRating? : string;
        /*
         * The video's rating from Nigeria's National Film and Video
         * Censors Board.
         */
        nfvcbRating? : string;
        /*
         * The video's rating from the Nacionãlais Kino centrs
         * (National Film Centre of Latvia).
         */
        nkclvRating? : string;
        /*
         * The video's Office of Film and Literature Classification
         * (OFLC - New Zealand) rating.
         */
        oflcRating? : string;
        /*
         * The video's rating in Peru.
         */
        pefilmRating? : string;
        /*
         * The video's rating from the Hungarian Nemzeti Filmiroda,
         * the Rating Committee of the National Office of Film.
         */
        rcnofRating? : string;
        /*
         * The video's rating in Venezuela.
         */
        resorteviolenciaRating? : string;
        /*
         * The video's General Directorate of Radio, Television and
         * Cinematography (Mexico) rating.
         */
        rtcRating? : string;
        /*
         * The video's rating from Ireland's Raidió Teilifís Éireann.
         */
        rteRating? : string;
        /*
         * The video's National Film Registry of the Russian
         * Federation (MKRF - Russia) rating.
         */
        russiaRating? : string;
        /*
         * The video's rating in Slovakia.
         */
        skfilmRating? : string;
        /*
         * The video's rating in Iceland.
         */
        smaisRating? : string;
        /*
         * The video's rating from Statens medieråd (Sweden's National
         * Media Council).
         */
        smsaRating? : string;
        /*
         * The video's TV Parental Guidelines (TVPG) rating.
         */
        tvpgRating? : string;
        /*
         * A rating that YouTube uses to identify age-restricted
         * content.
         */
        ytRating? : string;
   
    }
         
    /**
     * Geographical coordinates of a point, in WGS84.
     */
    
    export interface IGeoPoint  {
        /*
         * Altitude above the reference ellipsoid, in meters.
         */
        altitude? : number;
        /*
         * Latitude in degrees.
         */
        latitude? : number;
        /*
         * Longitude in degrees.
         */
        longitude? : number;
   
    }
         
    /**
     * A guideCategory resource identifies a category that YouTube
     * algorithmically assigns based on a channel's content or
     * other indicators, such as the channel's popularity. The
     * list is similar to video categories, with the difference
     * being that a video's uploader can assign a video category
     * but only YouTube can assign a channel category.
     */
    
    export interface IGuideCategory  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the guide
         * category.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#guideCategory".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the
         * category, such as its title.
         */
        snippet? : IGuideCategorySnippet;
   
    }
         
    export interface IGuideCategoryListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of categories that can be associated with YouTube
         * channels. In this map, the category ID is the map key, and
         * its value is the corresponding guideCategory resource.
         */
        items? : Array<IGuideCategory>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#guideCategoryListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a guide category.
     */
    
    export interface IGuideCategorySnippet  {
        channelId? : string;
        /*
         * Description of the guide category.
         */
        title? : string;
   
    }
         
    /**
     * An i18nLanguage resource identifies a UI language currently
     * supported by YouTube.
     */
    
    export interface II18nLanguage  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the i18n
         * language.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#i18nLanguage".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the i18n
         * language, such as language code and human-readable name.
         */
        snippet? : II18nLanguageSnippet;
   
    }
         
    export interface II18nLanguageListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of supported i18n languages. In this map, the i18n
         * language ID is the map key, and its value is the
         * corresponding i18nLanguage resource.
         */
        items? : Array<II18nLanguage>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#i18nLanguageListResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about an i18n language, such as language code
     * and human-readable name.
     */
    
    export interface II18nLanguageSnippet  {
        /*
         * A short BCP-47 code that uniquely identifies a language.
         */
        hl? : string;
        /*
         * The human-readable name of the language in the language
         * itself.
         */
        name? : string;
   
    }
         
    /**
     * A i18nRegion resource identifies a region where YouTube is
     * available.
     */
    
    export interface II18nRegion  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the i18n
         * region.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#i18nRegion".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the i18n
         * region, such as region code and human-readable name.
         */
        snippet? : II18nRegionSnippet;
   
    }
         
    export interface II18nRegionListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of regions where YouTube is available. In this map,
         * the i18n region ID is the map key, and its value is the
         * corresponding i18nRegion resource.
         */
        items? : Array<II18nRegion>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#i18nRegionListResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about an i18n region, such as region code and
     * human-readable name.
     */
    
    export interface II18nRegionSnippet  {
        /*
         * The region code as a 2-letter ISO country code.
         */
        gl? : string;
        /*
         * The human-readable name of the region.
         */
        name? : string;
   
    }
         
    /**
     * Branding properties for images associated with the channel.
     */
    
    export interface IImageSettings  {
        /*
         * The URL for the background image shown on the video watch
         * page. The image should be 1200px by 615px, with a maximum
         * file size of 128k.
         */
        backgroundImageUrl? : ILocalizedProperty;
        /*
         * This is used only in update requests; if it's set, we use
         * this URL to generate all of the above banner URLs.
         */
        bannerExternalUrl? : string;
        /*
         * Banner image. Desktop size (1060x175).
         */
        bannerImageUrl? : string;
        /*
         * Banner image. Mobile size high resolution (1440x395).
         */
        bannerMobileExtraHdImageUrl? : string;
        /*
         * Banner image. Mobile size high resolution (1280x360).
         */
        bannerMobileHdImageUrl? : string;
        /*
         * Banner image. Mobile size (640x175).
         */
        bannerMobileImageUrl? : string;
        /*
         * Banner image. Mobile size low resolution (320x88).
         */
        bannerMobileLowImageUrl? : string;
        /*
         * Banner image. Mobile size medium/high resolution (960x263).
         */
        bannerMobileMediumHdImageUrl? : string;
        /*
         * Banner image. Tablet size extra high resolution (2560x424).
         */
        bannerTabletExtraHdImageUrl? : string;
        /*
         * Banner image. Tablet size high resolution (2276x377).
         */
        bannerTabletHdImageUrl? : string;
        /*
         * Banner image. Tablet size (1707x283).
         */
        bannerTabletImageUrl? : string;
        /*
         * Banner image. Tablet size low resolution (1138x188).
         */
        bannerTabletLowImageUrl? : string;
        /*
         * Banner image. TV size high resolution (1920x1080).
         */
        bannerTvHighImageUrl? : string;
        /*
         * Banner image. TV size extra high resolution (2120x1192).
         */
        bannerTvImageUrl? : string;
        /*
         * Banner image. TV size low resolution (854x480).
         */
        bannerTvLowImageUrl? : string;
        /*
         * Banner image. TV size medium resolution (1280x720).
         */
        bannerTvMediumImageUrl? : string;
        /*
         * The image map script for the large banner image.
         */
        largeBrandedBannerImageImapScript? : ILocalizedProperty;
        /*
         * The URL for the 854px by 70px image that appears below the
         * video player in the expanded video view of the video watch
         * page.
         */
        largeBrandedBannerImageUrl? : ILocalizedProperty;
        /*
         * The image map script for the small banner image.
         */
        smallBrandedBannerImageImapScript? : ILocalizedProperty;
        /*
         * The URL for the 640px by 70px banner image that appears
         * below the video player in the default view of the video
         * watch page.
         */
        smallBrandedBannerImageUrl? : ILocalizedProperty;
        /*
         * The URL for a 1px by 1px tracking pixel that can be used to
         * collect statistics for views of the channel or video pages.
         */
        trackingImageUrl? : string;
        /*
         * The URL for the image that appears above the top-left
         * corner of the video player. This is a 25-pixel-high image
         * with a flexible width that cannot exceed 170 pixels.
         */
        watchIconImageUrl? : string;
   
    }
         
    /**
     * Describes information necessary for ingesting an RTMP or an
     * HTTP stream.
     */
    
    export interface IIngestionInfo  {
        /*
         * The backup ingestion URL that you should use to stream
         * video to YouTube. You have the option of simultaneously
         * streaming the content that you are sending to the
         * ingestionAddress to this URL.
         */
        backupIngestionAddress? : string;
        /*
         * The primary ingestion URL that you should use to stream
         * video to YouTube. You must stream video to this URL.
         * 
         * Depending on which application or tool you use to encode
         * your video stream, you may need to enter the stream URL and
         * stream name separately or you may need to concatenate them
         * in the following format:
         * 
         * STREAM_URL/STREAM_NAME
         */
        ingestionAddress? : string;
        /*
         * The HTTP or RTMP stream name that YouTube assigns to the
         * video stream.
         */
        streamName? : string;
   
    }
         
    export interface IInvideoBranding  {
        imageBytes? : string;
        imageUrl? : string;
        position? : IInvideoPosition;
        targetChannelId? : string;
        timing? : IInvideoTiming;
   
    }
         
    /**
     * Describes the spatial position of a visual widget inside a
     * video. It is a union of various position types, out of
     * which only will be set one.
     */
    
    export interface IInvideoPosition  {
        /*
         * Describes in which corner of the video the visual widget
         * will appear.
         */
        cornerPosition? : string;
        /*
         * Defines the position type.
         */
        type? : string;
   
    }
         
    /**
     * Describes an invideo promotion campaign consisting of
     * multiple promoted items. A campaign belongs to a single
     * channel_id.
     */
    
    export interface IInvideoPromotion  {
        /*
         * The default temporal position within the video where the
         * promoted item will be displayed. Can be overriden by more
         * specific timing in the item.
         */
        defaultTiming? : IInvideoTiming;
        /*
         * List of promoted items in decreasing priority.
         */
        items? : Array<IPromotedItem>;
        /*
         * The spatial position within the video where the promoted
         * item will be displayed.
         */
        position? : IInvideoPosition;
        /*
         * Indicates whether the channel's promotional campaign uses
         * "smart timing." This feature attempts to show promotions at
         * a point in the video when they are more likely to be
         * clicked and less likely to disrupt the viewing experience.
         * This feature also picks up a single promotion to show on
         * each video.
         */
        useSmartTiming? : boolean;
   
    }
         
    /**
     * Describes a temporal position of a visual widget inside a
     * video.
     */
    
    export interface IInvideoTiming  {
        /*
         * Defines the duration in milliseconds for which the
         * promotion should be displayed. If missing, the client
         * should use the default.
         */
        durationMs? : string;
        /*
         * Defines the time at which the promotion will appear.
         * Depending on the value of type the value of the offsetMs
         * field will represent a time offset from the start or from
         * the end of the video, expressed in milliseconds.
         */
        offsetMs? : string;
        /*
         * Describes a timing type. If the value is offsetFromStart,
         * then the offsetMs field represents an offset from the start
         * of the video. If the value is offsetFromEnd, then the
         * offsetMs field represents an offset from the end of the
         * video.
         */
        type? : string;
   
    }
         
    export interface ILanguageTag  {
        value? : string;
   
    }
         
    /**
     * A liveBroadcast resource represents an event that will be
     * streamed, via live video, on YouTube.
     */
    
    export interface ILiveBroadcast  {
        /*
         * The contentDetails object contains information about the
         * event's video content, such as whether the content can be
         * shown in an embedded video player or if it will be archived
         * and therefore available for viewing after the event has
         * concluded.
         */
        contentDetails? : ILiveBroadcastContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube assigns to uniquely identify the
         * broadcast.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveBroadcast".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the event,
         * including its title, description, start time, and end time.
         */
        snippet? : ILiveBroadcastSnippet;
        /*
         * The statistics object contains info about the event's
         * current stats. These include concurrent viewers and total
         * chat count. Statistics can change (in either direction)
         * during the lifetime of an event. Statistics are only
         * returned while the event is live.
         */
        statistics? : ILiveBroadcastStatistics;
        /*
         * The status object contains information about the event's
         * status.
         */
        status? : ILiveBroadcastStatus;
   
    }
         
    /**
     * Detailed settings of a broadcast.
     */
    
    export interface ILiveBroadcastContentDetails  {
        /*
         * This value uniquely identifies the live stream bound to the
         * broadcast.
         */
        boundStreamId? : string;
        /*
         * The date and time that the live stream referenced by
         * boundStreamId was last updated.
         */
        boundStreamLastUpdateTimeMs? : Date;
        closedCaptionsType? : string;
        /*
         * This setting indicates whether auto start is enabled for
         * this broadcast.
         */
        enableAutoStart? : boolean;
        /*
         * This setting indicates whether HTTP POST closed captioning
         * is enabled for this broadcast. The ingestion URL of the
         * closed captions is returned through the liveStreams API.
         * This is mutually exclusive with using the
         * closed_captions_type property, and is equivalent to setting
         * closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
         */
        enableClosedCaptions? : boolean;
        /*
         * This setting indicates whether YouTube should enable
         * content encryption for the broadcast.
         */
        enableContentEncryption? : boolean;
        /*
         * This setting determines whether viewers can access DVR
         * controls while watching the video. DVR controls enable the
         * viewer to control the video playback experience by pausing,
         * rewinding, or fast forwarding content. The default value
         * for this property is true.
         * 
         * 
         * 
         * Important: You must set the value to true and also set the
         * enableArchive property's value to true if you want to make
         * playback available immediately after the broadcast ends.
         */
        enableDvr? : boolean;
        /*
         * This setting indicates whether the broadcast video can be
         * played in an embedded player. If you choose to archive the
         * video (using the enableArchive property), this setting will
         * also apply to the archived video.
         */
        enableEmbed? : boolean;
        /*
         * Indicates whether this broadcast has low latency enabled.
         */
        enableLowLatency? : boolean;
        /*
         * If both this and enable_low_latency are set, they must
         * match. LATENCY_NORMAL should match enable_low_latency=false
         * LATENCY_LOW should match enable_low_latency=true
         * LATENCY_ULTRA_LOW should have enable_low_latency omitted.
         */
        latencyPreference? : string;
        mesh? : string;
        /*
         * The monitorStream object contains information about the
         * monitor stream, which the broadcaster can use to review the
         * event content before the broadcast stream is shown publicly.
         */
        monitorStream? : IMonitorStreamInfo;
        /*
         * The projection format of this broadcast. This defaults to
         * rectangular.
         */
        projection? : string;
        /*
         * Automatically start recording after the event goes live.
         * The default value for this property is true.
         * 
         * 
         * 
         * Important: You must also set the enableDvr property's value
         * to true if you want the playback to be available
         * immediately after the broadcast ends. If you set this
         * property's value to true but do not also set the enableDvr
         * property to true, there may be a delay of around one day
         * before the archived video will be available for playback.
         */
        recordFromStart? : boolean;
        /*
         * This setting indicates whether the broadcast should
         * automatically begin with an in-stream slate when you update
         * the broadcast's status to live. After updating the status,
         * you then need to send a liveCuepoints.insert request that
         * sets the cuepoint's eventState to end to remove the
         * in-stream slate and make your broadcast stream visible to
         * viewers.
         */
        startWithSlate? : boolean;
        stereoLayout? : string;
   
    }
         
    export interface ILiveBroadcastListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of broadcasts that match the request criteria.
         */
        items? : Array<ILiveBroadcast>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveBroadcastListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface ILiveBroadcastSnippet  {
        /*
         * The date and time that the broadcast actually ended. This
         * information is only available once the broadcast's state is
         * complete. The value is specified in ISO 8601
         * (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        actualEndTime? : Date;
        /*
         * The date and time that the broadcast actually started. This
         * information is only available once the broadcast's state is
         * live. The value is specified in ISO 8601
         * (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        actualStartTime? : Date;
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * that is publishing the broadcast.
         */
        channelId? : string;
        /*
         * The broadcast's description. As with the title, you can set
         * this field by modifying the broadcast resource or by
         * setting the description field of the corresponding video
         * resource.
         */
        description? : string;
        isDefaultBroadcast? : boolean;
        /*
         * The id of the live chat for this broadcast.
         */
        liveChatId? : string;
        /*
         * The date and time that the broadcast was added to YouTube's
         * live broadcast schedule. The value is specified in ISO 8601
         * (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * The date and time that the broadcast is scheduled to end.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        scheduledEndTime? : Date;
        /*
         * The date and time that the broadcast is scheduled to start.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        scheduledStartTime? : Date;
        /*
         * A map of thumbnail images associated with the broadcast.
         * For each nested object in this object, the key is the name
         * of the thumbnail image, and the value is an object that
         * contains other information about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The broadcast's title. Note that the broadcast represents
         * exactly one YouTube video. You can set this field by
         * modifying the broadcast resource or by setting the title
         * field of the corresponding video resource.
         */
        title? : string;
   
    }
         
    /**
     * Statistics about the live broadcast. These represent a
     * snapshot of the values at the time of the request.
     * Statistics are only returned for live broadcasts.
     */
    
    export interface ILiveBroadcastStatistics  {
        /*
         * The number of viewers currently watching the broadcast. The
         * property and its value will be present if the broadcast has
         * current viewers and the broadcast owner has not hidden the
         * viewcount for the video. Note that YouTube stops tracking
         * the number of concurrent viewers for a broadcast when the
         * broadcast ends. So, this property would not identify the
         * number of viewers watching an archived video of a live
         * broadcast that already ended.
         */
        concurrentViewers? : string;
        /*
         * The total number of live chat messages currently on the
         * broadcast. The property and its value will be present if
         * the broadcast is public, has the live chat feature enabled,
         * and has at least one message. Note that this field will not
         * be filled after the broadcast ends. So this property would
         * not identify the number of chat messages for an archived
         * video of a completed live broadcast.
         */
        totalChatCount? : string;
   
    }
         
    export interface ILiveBroadcastStatus  {
        /*
         * The broadcast's status. The status can be updated using the
         * API's liveBroadcasts.transition method.
         */
        lifeCycleStatus? : string;
        /*
         * Priority of the live broadcast event (internal state).
         */
        liveBroadcastPriority? : string;
        /*
         * The broadcast's privacy status. Note that the broadcast
         * represents exactly one YouTube video, so the privacy
         * settings are identical to those supported for videos. In
         * addition, you can set this field by modifying the broadcast
         * resource or by setting the privacyStatus field of the
         * corresponding video resource.
         */
        privacyStatus? : string;
        /*
         * The broadcast's recording status.
         */
        recordingStatus? : string;
   
    }
         
    /**
     * A liveChatBan resource represents a ban for a YouTube live
     * chat.
     */
    
    export interface ILiveChatBan  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube assigns to uniquely identify the ban.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveChatBan".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the ban.
         */
        snippet? : ILiveChatBanSnippet;
   
    }
         
    export interface ILiveChatBanSnippet  {
        /*
         * The duration of a ban, only filled if the ban has type
         * TEMPORARY.
         */
        banDurationSeconds? : string;
        bannedUserDetails? : IChannelProfileDetails;
        /*
         * The chat this ban is pertinent to.
         */
        liveChatId? : string;
        /*
         * The type of ban.
         */
        type? : string;
   
    }
         
    export interface ILiveChatFanFundingEventDetails  {
        /*
         * A rendered string that displays the fund amount and
         * currency to the user.
         */
        amountDisplayString? : string;
        /*
         * The amount of the fund.
         */
        amountMicros? : string;
        /*
         * The currency in which the fund was made.
         */
        currency? : string;
        /*
         * The comment added by the user to this fan funding event.
         */
        userComment? : string;
   
    }
         
    /**
     * A liveChatMessage resource represents a chat message in a
     * YouTube Live Chat.
     */
    
    export interface ILiveChatMessage  {
        /*
         * The authorDetails object contains basic details about the
         * user that posted this message.
         */
        authorDetails? : ILiveChatMessageAuthorDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube assigns to uniquely identify the
         * message.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveChatMessage".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the message.
         */
        snippet? : ILiveChatMessageSnippet;
   
    }
         
    export interface ILiveChatMessageAuthorDetails  {
        /*
         * The YouTube channel ID.
         */
        channelId? : string;
        /*
         * The channel's URL.
         */
        channelUrl? : string;
        /*
         * The channel's display name.
         */
        displayName? : string;
        /*
         * Whether the author is a moderator of the live chat.
         */
        isChatModerator? : boolean;
        /*
         * Whether the author is the owner of the live chat.
         */
        isChatOwner? : boolean;
        /*
         * Whether the author is a sponsor of the live chat.
         */
        isChatSponsor? : boolean;
        /*
         * Whether the author's identity has been verified by YouTube.
         */
        isVerified? : boolean;
        /*
         * The channels's avatar URL.
         */
        profileImageUrl? : string;
   
    }
         
    export interface ILiveChatMessageDeletedDetails  {
        deletedMessageId? : string;
   
    }
         
    export interface ILiveChatMessageListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of live chat messages.
         */
        items? : Array<ILiveChatMessage>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveChatMessageListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        /*
         * The date and time when the underlying stream went offline.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        offlineAt? : Date;
        pageInfo? : IPageInfo;
        /*
         * The amount of time the client should wait before polling
         * again.
         */
        pollingIntervalMillis? : number;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface ILiveChatMessageRetractedDetails  {
        retractedMessageId? : string;
   
    }
         
    export interface ILiveChatMessageSnippet  {
        /*
         * The ID of the user that authored this message, this field
         * is not always filled. textMessageEvent - the user that
         * wrote the message fanFundingEvent - the user that funded
         * the broadcast newSponsorEvent - the user that just became a
         * sponsor messageDeletedEvent - the moderator that took the
         * action messageRetractedEvent - the author that retracted
         * their message userBannedEvent - the moderator that took the
         * action superChatEvent - the user that made the purchase
         */
        authorChannelId? : string;
        /*
         * Contains a string that can be displayed to the user. If
         * this field is not present the message is silent, at the
         * moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT
         * are silent.
         */
        displayMessage? : string;
        /*
         * Details about the funding event, this is only set if the
         * type is 'fanFundingEvent'.
         */
        fanFundingEventDetails? : ILiveChatFanFundingEventDetails;
        /*
         * Whether the message has display content that should be
         * displayed to users.
         */
        hasDisplayContent? : boolean;
        liveChatId? : string;
        messageDeletedDetails? : ILiveChatMessageDeletedDetails;
        messageRetractedDetails? : ILiveChatMessageRetractedDetails;
        pollClosedDetails? : ILiveChatPollClosedDetails;
        pollEditedDetails? : ILiveChatPollEditedDetails;
        pollOpenedDetails? : ILiveChatPollOpenedDetails;
        pollVotedDetails? : ILiveChatPollVotedDetails;
        /*
         * The date and time when the message was orignally published.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        publishedAt? : Date;
        /*
         * Details about the Super Chat event, this is only set if the
         * type is 'superChatEvent'.
         */
        superChatDetails? : ILiveChatSuperChatDetails;
        /*
         * Details about the Super Sticker event, this is only set if
         * the type is 'superStickerEvent'.
         */
        superStickerDetails? : ILiveChatSuperStickerDetails;
        /*
         * Details about the text message, this is only set if the
         * type is 'textMessageEvent'.
         */
        textMessageDetails? : ILiveChatTextMessageDetails;
        /*
         * The type of message, this will always be present, it
         * determines the contents of the message as well as which
         * fields will be present.
         */
        type? : string;
        userBannedDetails? : ILiveChatUserBannedMessageDetails;
   
    }
         
    /**
     * A liveChatModerator resource represents a moderator for a
     * YouTube live chat. A chat moderator has the ability to
     * ban/unban users from a chat, remove message, etc.
     */
    
    export interface ILiveChatModerator  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube assigns to uniquely identify the
         * moderator.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveChatModerator".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the
         * moderator.
         */
        snippet? : ILiveChatModeratorSnippet;
   
    }
         
    export interface ILiveChatModeratorListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of moderators that match the request criteria.
         */
        items? : Array<ILiveChatModerator>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveChatModeratorListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface ILiveChatModeratorSnippet  {
        /*
         * The ID of the live chat this moderator can act on.
         */
        liveChatId? : string;
        /*
         * Details about the moderator.
         */
        moderatorDetails? : IChannelProfileDetails;
   
    }
         
    export interface ILiveChatPollClosedDetails  {
        /*
         * The id of the poll that was closed.
         */
        pollId? : string;
   
    }
         
    export interface ILiveChatPollEditedDetails  {
        id? : string;
        items? : Array<ILiveChatPollItem>;
        prompt? : string;
   
    }
         
    export interface ILiveChatPollItem  {
        /*
         * Plain text description of the item.
         */
        description? : string;
        itemId? : string;
   
    }
         
    export interface ILiveChatPollOpenedDetails  {
        id? : string;
        items? : Array<ILiveChatPollItem>;
        prompt? : string;
   
    }
         
    export interface ILiveChatPollVotedDetails  {
        /*
         * The poll item the user chose.
         */
        itemId? : string;
        /*
         * The poll the user voted on.
         */
        pollId? : string;
   
    }
         
    export interface ILiveChatSuperChatDetails  {
        /*
         * A rendered string that displays the fund amount and
         * currency to the user.
         */
        amountDisplayString? : string;
        /*
         * The amount purchased by the user, in micros (1,750,000
         * micros = 1.75).
         */
        amountMicros? : string;
        /*
         * The currency in which the purchase was made.
         */
        currency? : string;
        /*
         * The tier in which the amount belongs. Lower amounts belong
         * to lower tiers. The lowest tier is 1.
         */
        tier? : number;
        /*
         * The comment added by the user to this Super Chat event.
         */
        userComment? : string;
   
    }
         
    export interface ILiveChatSuperStickerDetails  {
        /*
         * A rendered string that displays the fund amount and
         * currency to the user.
         */
        amountDisplayString? : string;
        /*
         * The amount purchased by the user, in micros (1,750,000
         * micros = 1.75).
         */
        amountMicros? : string;
        /*
         * The currency in which the purchase was made.
         */
        currency? : string;
        /*
         * Information about the Super Sticker.
         */
        superStickerMetadata? : ISuperStickerMetadata;
        /*
         * The tier in which the amount belongs. Lower amounts belong
         * to lower tiers. The lowest tier is 1.
         */
        tier? : number;
   
    }
         
    export interface ILiveChatTextMessageDetails  {
        /*
         * The user's message.
         */
        messageText? : string;
   
    }
         
    export interface ILiveChatUserBannedMessageDetails  {
        /*
         * The duration of the ban. This property is only present if
         * the banType is temporary.
         */
        banDurationSeconds? : string;
        /*
         * The type of ban.
         */
        banType? : string;
        /*
         * The details of the user that was banned.
         */
        bannedUserDetails? : IChannelProfileDetails;
   
    }
         
    /**
     * A live stream describes a live ingestion point.
     */
    
    export interface ILiveStream  {
        /*
         * The cdn object defines the live stream's content delivery
         * network (CDN) settings. These settings provide details
         * about the manner in which you stream your content to
         * YouTube.
         */
        cdn? : ICdnSettings;
        /*
         * The content_details object contains information about the
         * stream, including the closed captions ingestion URL.
         */
        contentDetails? : ILiveStreamContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube assigns to uniquely identify the stream.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveStream".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the stream,
         * including its channel, title, and description.
         */
        snippet? : ILiveStreamSnippet;
        /*
         * The status object contains information about live stream's
         * status.
         */
        status? : ILiveStreamStatus;
   
    }
         
    export interface ILiveStreamConfigurationIssue  {
        /*
         * The long-form description of the issue and how to resolve
         * it.
         */
        description? : string;
        /*
         * The short-form reason for this issue.
         */
        reason? : string;
        /*
         * How severe this issue is to the stream.
         */
        severity? : string;
        /*
         * The kind of error happening.
         */
        type? : string;
   
    }
         
    /**
     * Detailed settings of a stream.
     */
    
    export interface ILiveStreamContentDetails  {
        /*
         * The ingestion URL where the closed captions of this stream
         * are sent.
         */
        closedCaptionsIngestionUrl? : string;
        /*
         * Indicates whether the stream is reusable, which means that
         * it can be bound to multiple broadcasts. It is common for
         * broadcasters to reuse the same stream for many different
         * broadcasts if those broadcasts occur at different times.
         * 
         * If you set this value to false, then the stream will not be
         * reusable, which means that it can only be bound to one
         * broadcast. Non-reusable streams differ from reusable
         * streams in the following ways:  
         * - A non-reusable stream can only be bound to one
         * broadcast. 
         * - A non-reusable stream might be deleted by an automated
         * process after the broadcast ends. 
         * - The  liveStreams.list method does not list non-reusable
         * streams if you call the method and set the mine parameter
         * to true. The only way to use that method to retrieve the
         * resource for a non-reusable stream is to use the id
         * parameter to identify the stream.
         */
        isReusable? : boolean;
   
    }
         
    export interface ILiveStreamHealthStatus  {
        /*
         * The configurations issues on this stream
         */
        configurationIssues? : Array<ILiveStreamConfigurationIssue>;
        /*
         * The last time this status was updated (in seconds)
         */
        lastUpdateTimeSeconds? : string;
        /*
         * The status code of this stream
         */
        status? : string;
   
    }
         
    export interface ILiveStreamListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of live streams that match the request criteria.
         */
        items? : Array<ILiveStream>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#liveStreamListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface ILiveStreamSnippet  {
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * that is transmitting the stream.
         */
        channelId? : string;
        /*
         * The stream's description. The value cannot be longer than
         * 10000 characters.
         */
        description? : string;
        isDefaultStream? : boolean;
        /*
         * The date and time that the stream was created. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * The stream's title. The value must be between 1 and 128
         * characters long.
         */
        title? : string;
   
    }
         
    /**
     * Brief description of the live stream status.
     */
    
    export interface ILiveStreamStatus  {
        /*
         * The health status of the stream.
         */
        healthStatus? : ILiveStreamHealthStatus;
        streamStatus? : string;
   
    }
         
    export interface ILocalizedProperty  {
        default? : string;
        /*
         * The language of the default property.
         */
        defaultLanguage? : ILanguageTag;
        localized? : Array<ILocalizedString>;
   
    }
         
    export interface ILocalizedString  {
        language? : string;
        value? : string;
   
    }
         
    /**
     * Settings and Info of the monitor stream
     */
    
    export interface IMonitorStreamInfo  {
        /*
         * If you have set the enableMonitorStream property to true,
         * then this property determines the length of the live
         * broadcast delay.
         */
        broadcastStreamDelayMs? : number;
        /*
         * HTML code that embeds a player that plays the monitor
         * stream.
         */
        embedHtml? : string;
        /*
         * This value determines whether the monitor stream is enabled
         * for the broadcast. If the monitor stream is enabled, then
         * YouTube will broadcast the event content on a special
         * stream intended only for the broadcaster's consumption. The
         * broadcaster can use the stream to review the event content
         * and also to identify the optimal times to insert
         * cuepoints.
         * 
         * You need to set this value to true if you intend to have a
         * broadcast delay for your event.
         * 
         * Note: This property cannot be updated once the broadcast is
         * in the testing or live state.
         */
        enableMonitorStream? : boolean;
   
    }
         
    /**
     * Nonprofit information.
     */
    
    export interface INonprofit  {
        /*
         * Id of the nonprofit.
         */
        nonprofitId? : INonprofitId;
        /*
         * Legal name of the nonprofit.
         */
        nonprofitLegalName? : string;
   
    }
         
    export interface INonprofitId  {
        value? : string;
   
    }
         
    /**
     * Paging details for lists of resources, including total
     * number of items available and number of resources returned
     * in a single page.
     */
    
    export interface IPageInfo  {
        /*
         * The number of results included in the API response.
         */
        resultsPerPage? : number;
        /*
         * The total number of results in the result set.
         */
        totalResults? : number;
   
    }
         
    /**
     * A playlist resource represents a YouTube playlist. A
     * playlist is a collection of videos that can be viewed
     * sequentially and shared with other users. A playlist can
     * contain up to 200 videos, and YouTube does not limit the
     * number of playlists that each user creates. By default,
     * playlists are publicly visible to other users, but
     * playlists can be public or private.
     * 
     * YouTube also uses playlists to identify special collections
     * of videos for a channel, such as:  
     * - uploaded videos 
     * - favorite videos 
     * - positively rated (liked) videos 
     * - watch history 
     * - watch later  To be more specific, these lists are
     * associated with a channel, which is a collection of a
     * person, group, or company's videos, playlists, and other
     * YouTube information. You can retrieve the playlist IDs for
     * each of these lists from the  channel resource for a given
     * channel.
     * 
     * You can then use the   playlistItems.list method to
     * retrieve any of those lists. You can also add or remove
     * items from those lists by calling the
     * playlistItems.insert and   playlistItems.delete methods.
     */
    
    export interface IPlaylist  {
        /*
         * The contentDetails object contains information like video
         * count.
         */
        contentDetails? : IPlaylistContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the playlist.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#playlist".
         */
        kind? : string;
        /*
         * Localizations for different languages
         */
        localizations? : any;
        /*
         * The player object contains information that you would use
         * to play the playlist in an embedded player.
         */
        player? : IPlaylistPlayer;
        /*
         * The snippet object contains basic details about the
         * playlist, such as its title and description.
         */
        snippet? : IPlaylistSnippet;
        /*
         * The status object contains status information for the
         * playlist.
         */
        status? : IPlaylistStatus;
   
    }
         
    export interface IPlaylistContentDetails  {
        /*
         * The number of videos in the playlist.
         */
        itemCount? : number;
   
    }
         
    /**
     * A playlistItem resource identifies another resource, such
     * as a video, that is included in a playlist. In addition,
     * the playlistItem  resource contains details about the
     * included resource that pertain specifically to how that
     * resource is used in that playlist.
     * 
     * YouTube uses playlists to identify special collections of
     * videos for a channel, such as:  
     * - uploaded videos 
     * - favorite videos 
     * - positively rated (liked) videos 
     * - watch history 
     * - watch later  To be more specific, these lists are
     * associated with a channel, which is a collection of a
     * person, group, or company's videos, playlists, and other
     * YouTube information.
     * 
     * You can retrieve the playlist IDs for each of these lists
     * from the  channel resource  for a given channel. You can
     * then use the   playlistItems.list method to retrieve any of
     * those lists. You can also add or remove items from those
     * lists by calling the   playlistItems.insert and
     * playlistItems.delete methods. For example, if a user gives
     * a positive rating to a video, you would insert that video
     * into the liked videos playlist for that user's channel.
     */
    
    export interface IPlaylistItem  {
        /*
         * The contentDetails object is included in the resource if
         * the included item is a YouTube video. The object contains
         * additional information about the video.
         */
        contentDetails? : IPlaylistItemContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the playlist
         * item.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#playlistItem".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the
         * playlist item, such as its title and position in the
         * playlist.
         */
        snippet? : IPlaylistItemSnippet;
        /*
         * The status object contains information about the playlist
         * item's privacy status.
         */
        status? : IPlaylistItemStatus;
   
    }
         
    export interface IPlaylistItemContentDetails  {
        /*
         * The time, measured in seconds from the start of the video,
         * when the video should stop playing. (The playlist owner can
         * specify the times when the video should start and stop
         * playing when the video is played in the context of the
         * playlist.) By default, assume that the video.endTime is the
         * end of the video.
         */
        endAt? : string;
        /*
         * A user-generated note for this item.
         */
        note? : string;
        /*
         * The time, measured in seconds from the start of the video,
         * when the video should start playing. (The playlist owner
         * can specify the times when the video should start and stop
         * playing when the video is played in the context of the
         * playlist.) The default value is 0.
         */
        startAt? : string;
        /*
         * The ID that YouTube uses to uniquely identify a video. To
         * retrieve the video resource, set the id query parameter to
         * this value in your API request.
         */
        videoId? : string;
        /*
         * The date and time that the video was published to YouTube.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        videoPublishedAt? : Date;
   
    }
         
    export interface IPlaylistItemListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of playlist items that match the request criteria.
         */
        items? : Array<IPlaylistItem>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#playlistItemListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a playlist, including title,
     * description and thumbnails.
     */
    
    export interface IPlaylistItemSnippet  {
        /*
         * The ID that YouTube uses to uniquely identify the user that
         * added the item to the playlist.
         */
        channelId? : string;
        /*
         * Channel title for the channel that the playlist item
         * belongs to.
         */
        channelTitle? : string;
        /*
         * The item's description.
         */
        description? : string;
        /*
         * The ID that YouTube uses to uniquely identify the playlist
         * that the playlist item is in.
         */
        playlistId? : string;
        /*
         * The order in which the item appears in the playlist. The
         * value uses a zero-based index, so the first item has a
         * position of 0, the second item has a position of 1, and so
         * forth.
         */
        position? : number;
        /*
         * The date and time that the item was added to the playlist.
         * The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        publishedAt? : Date;
        /*
         * The id object contains information that can be used to
         * uniquely identify the resource that is included in the
         * playlist as the playlist item.
         */
        resourceId? : IResourceId;
        /*
         * A map of thumbnail images associated with the playlist
         * item. For each object in the map, the key is the name of
         * the thumbnail image, and the value is an object that
         * contains other information about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The item's title.
         */
        title? : string;
   
    }
         
    /**
     * Information about the playlist item's privacy status.
     */
    
    export interface IPlaylistItemStatus  {
        /*
         * This resource's privacy status.
         */
        privacyStatus? : string;
   
    }
         
    export interface IPlaylistListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of playlists that match the request criteria.
         */
        items? : Array<IPlaylist>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#playlistListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Playlist localization setting
     */
    
    export interface IPlaylistLocalization  {
        /*
         * The localized strings for playlist's description.
         */
        description? : string;
        /*
         * The localized strings for playlist's title.
         */
        title? : string;
   
    }
         
    export interface IPlaylistPlayer  {
        /*
         * An <iframe> tag that embeds a player that will play the
         * playlist.
         */
        embedHtml? : string;
   
    }
         
    /**
     * Basic details about a playlist, including title,
     * description and thumbnails.
     */
    
    export interface IPlaylistSnippet  {
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * that published the playlist.
         */
        channelId? : string;
        /*
         * The channel title of the channel that the video belongs to.
         */
        channelTitle? : string;
        /*
         * The language of the playlist's default title and
         * description.
         */
        defaultLanguage? : string;
        /*
         * The playlist's description.
         */
        description? : string;
        /*
         * Localized title and description, read-only.
         */
        localized? : IPlaylistLocalization;
        /*
         * The date and time that the playlist was created. The value
         * is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * Keyword tags associated with the playlist.
         */
        tags? : Array<string>;
        /*
         * A map of thumbnail images associated with the playlist. For
         * each object in the map, the key is the name of the
         * thumbnail image, and the value is an object that contains
         * other information about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The playlist's title.
         */
        title? : string;
   
    }
         
    export interface IPlaylistStatus  {
        /*
         * The playlist's privacy status.
         */
        privacyStatus? : string;
   
    }
         
    /**
     * Describes a single promoted item.
     */
    
    export interface IPromotedItem  {
        /*
         * A custom message to display for this promotion. This field
         * is currently ignored unless the promoted item is a website.
         */
        customMessage? : string;
        /*
         * Identifies the promoted item.
         */
        id? : IPromotedItemId;
        /*
         * If true, the content owner's name will be used when
         * displaying the promotion. This field can only be set when
         * the update is made on behalf of the content owner.
         */
        promotedByContentOwner? : boolean;
        /*
         * The temporal position within the video where the promoted
         * item will be displayed. If present, it overrides the
         * default timing.
         */
        timing? : IInvideoTiming;
   
    }
         
    /**
     * Describes a single promoted item id. It is a union of
     * various possible types.
     */
    
    export interface IPromotedItemId  {
        /*
         * If type is recentUpload, this field identifies the channel
         * from which to take the recent upload. If missing, the
         * channel is assumed to be the same channel for which the
         * invideoPromotion is set.
         */
        recentlyUploadedBy? : string;
        /*
         * Describes the type of the promoted item.
         */
        type? : string;
        /*
         * If the promoted item represents a video, this field
         * represents the unique YouTube ID identifying it. This field
         * will be present only if type has the value video.
         */
        videoId? : string;
        /*
         * If the promoted item represents a website, this field
         * represents the url pointing to the website. This field will
         * be present only if type has the value website.
         */
        websiteUrl? : string;
   
    }
         
    /**
     * A pair Property / Value.
     */
    
    export interface IPropertyValue  {
        /*
         * A property.
         */
        property? : string;
        /*
         * The property's value.
         */
        value? : string;
   
    }
         
    /**
     * A resource id is a generic reference that points to another
     * YouTube resource.
     */
    
    export interface IResourceId  {
        /*
         * The ID that YouTube uses to uniquely identify the referred
         * resource, if that resource is a channel. This property is
         * only present if the resourceId.kind value is
         * youtube#channel.
         */
        channelId? : string;
        /*
         * The type of the API resource.
         */
        kind? : string;
        /*
         * The ID that YouTube uses to uniquely identify the referred
         * resource, if that resource is a playlist. This property is
         * only present if the resourceId.kind value is
         * youtube#playlist.
         */
        playlistId? : string;
        /*
         * The ID that YouTube uses to uniquely identify the referred
         * resource, if that resource is a video. This property is
         * only present if the resourceId.kind value is youtube#video.
         */
        videoId? : string;
   
    }
         
    export interface ISearchListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of results that match the search criteria.
         */
        items? : Array<ISearchResult>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#searchListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        regionCode? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * A search result contains information about a YouTube video,
     * channel, or playlist that matches the search parameters
     * specified in an API request. While a search result points
     * to a uniquely identifiable resource, like a video, it does
     * not have its own persistent data.
     */
    
    export interface ISearchResult  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The id object contains information that can be used to
         * uniquely identify the resource that matches the search
         * request.
         */
        id? : IResourceId;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#searchResult".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about a search
         * result, such as its title or description. For example, if
         * the search result is a video, then the title will be the
         * video's title and the description will be the video's
         * description.
         */
        snippet? : ISearchResultSnippet;
   
    }
         
    /**
     * Basic details about a search result, including title,
     * description and thumbnails of the item referenced by the
     * search result.
     */
    
    export interface ISearchResultSnippet  {
        /*
         * The value that YouTube uses to uniquely identify the
         * channel that published the resource that the search result
         * identifies.
         */
        channelId? : string;
        /*
         * The title of the channel that published the resource that
         * the search result identifies.
         */
        channelTitle? : string;
        /*
         * A description of the search result.
         */
        description? : string;
        /*
         * It indicates if the resource (video or channel) has
         * upcoming/active live broadcast content. Or it's "none" if
         * there is not any upcoming/active live broadcasts.
         */
        liveBroadcastContent? : string;
        /*
         * The creation date and time of the resource that the search
         * result identifies. The value is specified in ISO 8601
         * (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * A map of thumbnail images associated with the search
         * result. For each object in the map, the key is the name of
         * the thumbnail image, and the value is an object that
         * contains other information about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The title of the search result.
         */
        title? : string;
   
    }
         
    /**
     * A sponsor resource represents a sponsor for a YouTube
     * channel. A sponsor provides recurring monetary support to a
     * creator and receives special benefits.
     */
    
    export interface ISponsor  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#sponsor".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the sponsor.
         */
        snippet? : ISponsorSnippet;
   
    }
         
    export interface ISponsorListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of sponsors that match the request criteria.
         */
        items? : Array<ISponsor>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#sponsorListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface ISponsorSnippet  {
        /*
         * The id of the channel being sponsored.
         */
        channelId? : string;
        /*
         * The cumulative time a user has been a sponsor in months.
         */
        cumulativeDurationMonths? : number;
        /*
         * Details about the sponsor.
         */
        sponsorDetails? : IChannelProfileDetails;
        /*
         * The date and time when the user became a sponsor. The value
         * is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        sponsorSince? : Date;
   
    }
         
    /**
     * A subscription resource contains information about a
     * YouTube user subscription. A subscription notifies a user
     * when new videos are added to a channel or when another user
     * takes one of several actions on YouTube, such as uploading
     * a video, rating a video, or commenting on a video.
     */
    
    export interface ISubscription  {
        /*
         * The contentDetails object contains basic statistics about
         * the subscription.
         */
        contentDetails? : ISubscriptionContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the
         * subscription.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#subscription".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the
         * subscription, including its title and the channel that the
         * user subscribed to.
         */
        snippet? : ISubscriptionSnippet;
        /*
         * The subscriberSnippet object contains basic details about
         * the sbuscriber.
         */
        subscriberSnippet? : ISubscriptionSubscriberSnippet;
   
    }
         
    /**
     * Details about the content to witch a subscription refers.
     */
    
    export interface ISubscriptionContentDetails  {
        /*
         * The type of activity this subscription is for (only
         * uploads, everything).
         */
        activityType? : string;
        /*
         * The number of new items in the subscription since its
         * content was last read.
         */
        newItemCount? : number;
        /*
         * The approximate number of items that the subscription
         * points to.
         */
        totalItemCount? : number;
   
    }
         
    export interface ISubscriptionListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of subscriptions that match the request criteria.
         */
        items? : Array<ISubscription>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#subscriptionListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a subscription, including title,
     * description and thumbnails of the subscribed item.
     */
    
    export interface ISubscriptionSnippet  {
        /*
         * The ID that YouTube uses to uniquely identify the
         * subscriber's channel.
         */
        channelId? : string;
        /*
         * Channel title for the channel that the subscription belongs
         * to.
         */
        channelTitle? : string;
        /*
         * The subscription's details.
         */
        description? : string;
        /*
         * The date and time that the subscription was created. The
         * value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        publishedAt? : Date;
        /*
         * The id object contains information about the channel that
         * the user subscribed to.
         */
        resourceId? : IResourceId;
        /*
         * A map of thumbnail images associated with the video. For
         * each object in the map, the key is the name of the
         * thumbnail image, and the value is an object that contains
         * other information about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The subscription's title.
         */
        title? : string;
   
    }
         
    /**
     * Basic details about a subscription's subscriber including
     * title, description, channel ID and thumbnails.
     */
    
    export interface ISubscriptionSubscriberSnippet  {
        /*
         * The channel ID of the subscriber.
         */
        channelId? : string;
        /*
         * The description of the subscriber.
         */
        description? : string;
        /*
         * Thumbnails for this subscriber.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The title of the subscriber.
         */
        title? : string;
   
    }
         
    /**
     * A superChatEvent resource represents a Super Chat purchase
     * on a YouTube channel.
     */
    
    export interface ISuperChatEvent  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube assigns to uniquely identify the Super
         * Chat event.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#superChatEvent".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the Super
         * Chat event.
         */
        snippet? : ISuperChatEventSnippet;
   
    }
         
    export interface ISuperChatEventListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of Super Chat purchases that match the request
         * criteria.
         */
        items? : Array<ISuperChatEvent>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#superChatEventListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface ISuperChatEventSnippet  {
        /*
         * The purchase amount, in micros of the purchase currency.
         * e.g., 1 is represented as 1000000.
         */
        amountMicros? : string;
        /*
         * Channel id where the event occurred.
         */
        channelId? : string;
        /*
         * The text contents of the comment left by the user.
         */
        commentText? : string;
        /*
         * The date and time when the event occurred. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        createdAt? : Date;
        /*
         * The currency in which the purchase was made. ISO 4217.
         */
        currency? : string;
        /*
         * A rendered string that displays the purchase amount and
         * currency (e.g., "$1.00"). The string is rendered for the
         * given language.
         */
        displayString? : string;
        /*
         * True if this event is a Super Chat for Good purchase.
         */
        isSuperChatForGood? : boolean;
        /*
         * True if this event is a Super Sticker event.
         */
        isSuperStickerEvent? : boolean;
        /*
         * The tier for the paid message, which is based on the amount
         * of money spent to purchase the message.
         */
        messageType? : number;
        /*
         * If this event is a Super Chat for Good purchase, this field
         * will contain information about the charity the purchase is
         * donated to.
         */
        nonprofit? : INonprofit;
        /*
         * If this event is a Super Sticker event, this field will
         * contain metadata about the Super Sticker.
         */
        superStickerMetadata? : ISuperStickerMetadata;
        /*
         * Details about the supporter.
         */
        supporterDetails? : IChannelProfileDetails;
   
    }
         
    export interface ISuperStickerMetadata  {
        /*
         * Internationalized alt text that describes the sticker image
         * and any animation associated with it.
         */
        altText? : string;
        /*
         * Specifies the localization language in which the alt text
         * is returned.
         */
        altTextLanguage? : string;
        /*
         * Unique identifier of the Super Sticker. This is a shorter
         * form of the alt_text that includes pack name and a
         * recognizable characteristic of the sticker.
         */
        stickerId? : string;
   
    }
         
    /**
     * A thumbnail is an image representing a YouTube resource.
     */
    
    export interface IThumbnail  {
        /*
         * (Optional) Height of the thumbnail image.
         */
        height? : number;
        /*
         * The thumbnail image's URL.
         */
        url? : string;
        /*
         * (Optional) Width of the thumbnail image.
         */
        width? : number;
   
    }
         
    /**
     * Internal representation of thumbnails for a YouTube
     * resource.
     */
    
    export interface IThumbnailDetails  {
        /*
         * The default image for this resource.
         */
        default? : IThumbnail;
        /*
         * The high quality image for this resource.
         */
        high? : IThumbnail;
        /*
         * The maximum resolution quality image for this resource.
         */
        maxres? : IThumbnail;
        /*
         * The medium quality image for this resource.
         */
        medium? : IThumbnail;
        /*
         * The standard quality image for this resource.
         */
        standard? : IThumbnail;
   
    }
         
    export interface IThumbnailSetResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of thumbnails.
         */
        items? : Array<IThumbnailDetails>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#thumbnailSetResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Stub token pagination template to suppress results.
     */
    
    export interface ITokenPagination  {
   
    }
         
    /**
     * A video resource represents a YouTube video.
     */
    
    export interface IVideo  {
        /*
         * Age restriction details related to a video. This data can
         * only be retrieved by the video owner.
         */
        ageGating? : IVideoAgeGating;
        /*
         * The contentDetails object contains information about the
         * video content, including the length of the video and its
         * aspect ratio.
         */
        contentDetails? : IVideoContentDetails;
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The fileDetails object encapsulates information about the
         * video file that was uploaded to YouTube, including the
         * file's resolution, duration, audio and video codecs, stream
         * bitrates, and more. This data can only be retrieved by the
         * video owner.
         */
        fileDetails? : IVideoFileDetails;
        /*
         * The ID that YouTube uses to uniquely identify the video.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#video".
         */
        kind? : string;
        /*
         * The liveStreamingDetails object contains metadata about a
         * live video broadcast. The object will only be present in a
         * video resource if the video is an upcoming, live, or
         * completed live broadcast.
         */
        liveStreamingDetails? : IVideoLiveStreamingDetails;
        /*
         * List with all localizations.
         */
        localizations? : any;
        /*
         * The monetizationDetails object encapsulates information
         * about the monetization status of the video.
         */
        monetizationDetails? : IVideoMonetizationDetails;
        /*
         * The player object contains information that you would use
         * to play the video in an embedded player.
         */
        player? : IVideoPlayer;
        /*
         * The processingDetails object encapsulates information about
         * YouTube's progress in processing the uploaded video file.
         * The properties in the object identify the current
         * processing status and an estimate of the time remaining
         * until YouTube finishes processing the video. This part also
         * indicates whether different types of data or content, such
         * as file details or thumbnail images, are available for the
         * video.
         * 
         * The processingProgress object is designed to be polled so
         * that the video uploaded can track the progress that YouTube
         * has made in processing the uploaded video file. This data
         * can only be retrieved by the video owner.
         */
        processingDetails? : IVideoProcessingDetails;
        /*
         * The projectDetails object contains information about the
         * project specific video metadata.
         */
        projectDetails? : IVideoProjectDetails;
        /*
         * The recordingDetails object encapsulates information about
         * the location, date and address where the video was recorded.
         */
        recordingDetails? : IVideoRecordingDetails;
        /*
         * The snippet object contains basic details about the video,
         * such as its title, description, and category.
         */
        snippet? : IVideoSnippet;
        /*
         * The statistics object contains statistics about the video.
         */
        statistics? : IVideoStatistics;
        /*
         * The status object contains information about the video's
         * uploading, processing, and privacy statuses.
         */
        status? : IVideoStatus;
        /*
         * The suggestions object encapsulates suggestions that
         * identify opportunities to improve the video quality or the
         * metadata for the uploaded video. This data can only be
         * retrieved by the video owner.
         */
        suggestions? : IVideoSuggestions;
        /*
         * The topicDetails object encapsulates information about
         * Freebase topics associated with the video.
         */
        topicDetails? : IVideoTopicDetails;
   
    }
         
    export interface IVideoAbuseReport  {
        /*
         * Additional comments regarding the abuse report.
         */
        comments? : string;
        /*
         * The language that the content was viewed in.
         */
        language? : string;
        /*
         * The high-level, or primary, reason that the content is
         * abusive. The value is an abuse report reason ID.
         */
        reasonId? : string;
        /*
         * The specific, or secondary, reason that this content is
         * abusive (if available). The value is an abuse report reason
         * ID that is a valid secondary reason for the primary reason.
         */
        secondaryReasonId? : string;
        /*
         * The ID that YouTube uses to uniquely identify the video.
         */
        videoId? : string;
   
    }
         
    /**
     * A videoAbuseReportReason resource identifies a reason that
     * a video could be reported as abusive. Video abuse report
     * reasons are used with video.ReportAbuse.
     */
    
    export interface IVideoAbuseReportReason  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID of this abuse report reason.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#videoAbuseReportReason".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the abuse
         * report reason.
         */
        snippet? : IVideoAbuseReportReasonSnippet;
   
    }
         
    export interface IVideoAbuseReportReasonListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of valid abuse reasons that are used with
         * video.ReportAbuse.
         */
        items? : Array<IVideoAbuseReportReason>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#videoAbuseReportReasonListResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a video category, such as its localized
     * title.
     */
    
    export interface IVideoAbuseReportReasonSnippet  {
        /*
         * The localized label belonging to this abuse report reason.
         */
        label? : string;
        /*
         * The secondary reasons associated with this reason, if any
         * are available. (There might be 0 or more.)
         */
        secondaryReasons? : Array<IVideoAbuseReportSecondaryReason>;
   
    }
         
    export interface IVideoAbuseReportSecondaryReason  {
        /*
         * The ID of this abuse report secondary reason.
         */
        id? : string;
        /*
         * The localized label for this abuse report secondary reason.
         */
        label? : string;
   
    }
         
    export interface IVideoAgeGating  {
        /*
         * Indicates whether or not the video has alcoholic beverage
         * content. Only users of legal purchasing age in a particular
         * country, as identified by ICAP, can view the content.
         */
        alcoholContent? : boolean;
        /*
         * Age-restricted trailers. For redband trailers and
         * adult-rated video-games. Only users aged 18+ can view the
         * content. The the field is true the content is restricted to
         * viewers aged 18+. Otherwise The field won't be present.
         */
        restricted? : boolean;
        /*
         * Video game rating, if any.
         */
        videoGameRating? : string;
   
    }
         
    /**
     * A videoCategory resource identifies a category that has
     * been or could be associated with uploaded videos.
     */
    
    export interface IVideoCategory  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * The ID that YouTube uses to uniquely identify the video
         * category.
         */
        id? : string;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#videoCategory".
         */
        kind? : string;
        /*
         * The snippet object contains basic details about the video
         * category, including its title.
         */
        snippet? : IVideoCategorySnippet;
   
    }
         
    export interface IVideoCategoryListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of video categories that can be associated with
         * YouTube videos. In this map, the video category ID is the
         * map key, and its value is the corresponding videoCategory
         * resource.
         */
        items? : Array<IVideoCategory>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#videoCategoryListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Basic details about a video category, such as its localized
     * title.
     */
    
    export interface IVideoCategorySnippet  {
        assignable? : boolean;
        /*
         * The YouTube channel that created the video category.
         */
        channelId? : string;
        /*
         * The video category's title.
         */
        title? : string;
   
    }
         
    /**
     * Details about the content of a YouTube Video.
     */
    
    export interface IVideoContentDetails  {
        /*
         * The value of captions indicates whether the video has
         * captions or not.
         */
        caption? : string;
        /*
         * Specifies the ratings that the video received under various
         * rating schemes.
         */
        contentRating? : IContentRating;
        /*
         * The countryRestriction object contains information about
         * the countries where a video is (or is not) viewable.
         */
        countryRestriction? : IAccessPolicy;
        /*
         * The value of definition indicates whether the video is
         * available in high definition or only in standard definition.
         */
        definition? : string;
        /*
         * The value of dimension indicates whether the video is
         * available in 3D or in 2D.
         */
        dimension? : string;
        /*
         * The length of the video. The tag value is an ISO 8601
         * duration in the format PT#M#S, in which the letters PT
         * indicate that the value specifies a period of time, and the
         * letters M and S refer to length in minutes and seconds,
         * respectively. The # characters preceding the M and S
         * letters are both integers that specify the number of
         * minutes (or seconds) of the video. For example, a value of
         * PT15M51S indicates that the video is 15 minutes and 51
         * seconds long.
         */
        duration? : string;
        /*
         * Indicates whether the video uploader has provided a custom
         * thumbnail image for the video. This property is only
         * visible to the video uploader.
         */
        hasCustomThumbnail? : boolean;
        /*
         * The value of is_license_content indicates whether the video
         * is licensed content.
         */
        licensedContent? : boolean;
        /*
         * Specifies the projection format of the video.
         */
        projection? : string;
        /*
         * The regionRestriction object contains information about the
         * countries where a video is (or is not) viewable. The object
         * will contain either the
         * contentDetails.regionRestriction.allowed property or the
         * contentDetails.regionRestriction.blocked property.
         */
        regionRestriction? : IVideoContentDetailsRegionRestriction;
   
    }
         
    /**
     * DEPRECATED Region restriction of the video.
     */
    
    export interface IVideoContentDetailsRegionRestriction  {
        /*
         * A list of region codes that identify countries where the
         * video is viewable. If this property is present and a
         * country is not listed in its value, then the video is
         * blocked from appearing in that country. If this property is
         * present and contains an empty list, the video is blocked in
         * all countries.
         */
        allowed? : Array<string>;
        /*
         * A list of region codes that identify countries where the
         * video is blocked. If this property is present and a country
         * is not listed in its value, then the video is viewable in
         * that country. If this property is present and contains an
         * empty list, the video is viewable in all countries.
         */
        blocked? : Array<string>;
   
    }
         
    /**
     * Describes original video file properties, including
     * technical details about audio and video streams, but also
     * metadata information like content length, digitization
     * time, or geotagging information.
     */
    
    export interface IVideoFileDetails  {
        /*
         * A list of audio streams contained in the uploaded video
         * file. Each item in the list contains detailed metadata
         * about an audio stream.
         */
        audioStreams? : Array<IVideoFileDetailsAudioStream>;
        /*
         * The uploaded video file's combined (video and audio)
         * bitrate in bits per second.
         */
        bitrateBps? : string;
        /*
         * The uploaded video file's container format.
         */
        container? : string;
        /*
         * The date and time when the uploaded video file was created.
         * The value is specified in ISO 8601 format. Currently, the
         * following ISO 8601 formats are supported:  
         * - Date only: YYYY-MM-DD 
         * - Naive time: YYYY-MM-DDTHH:MM:SS 
         * - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
         */
        creationTime? : string;
        /*
         * The length of the uploaded video in milliseconds.
         */
        durationMs? : string;
        /*
         * The uploaded file's name. This field is present whether a
         * video file or another type of file was uploaded.
         */
        fileName? : string;
        /*
         * The uploaded file's size in bytes. This field is present
         * whether a video file or another type of file was uploaded.
         */
        fileSize? : string;
        /*
         * The uploaded file's type as detected by YouTube's video
         * processing engine. Currently, YouTube only processes video
         * files, but this field is present whether a video file or
         * another type of file was uploaded.
         */
        fileType? : string;
        /*
         * A list of video streams contained in the uploaded video
         * file. Each item in the list contains detailed metadata
         * about a video stream.
         */
        videoStreams? : Array<IVideoFileDetailsVideoStream>;
   
    }
         
    /**
     * Information about an audio stream.
     */
    
    export interface IVideoFileDetailsAudioStream  {
        /*
         * The audio stream's bitrate, in bits per second.
         */
        bitrateBps? : string;
        /*
         * The number of audio channels that the stream contains.
         */
        channelCount? : number;
        /*
         * The audio codec that the stream uses.
         */
        codec? : string;
        /*
         * A value that uniquely identifies a video vendor. Typically,
         * the value is a four-letter vendor code.
         */
        vendor? : string;
   
    }
         
    /**
     * Information about a video stream.
     */
    
    export interface IVideoFileDetailsVideoStream  {
        /*
         * The video content's display aspect ratio, which specifies
         * the aspect ratio in which the video should be displayed.
         */
        aspectRatio? : number;
        /*
         * The video stream's bitrate, in bits per second.
         */
        bitrateBps? : string;
        /*
         * The video codec that the stream uses.
         */
        codec? : string;
        /*
         * The video stream's frame rate, in frames per second.
         */
        frameRateFps? : number;
        /*
         * The encoded video content's height in pixels.
         */
        heightPixels? : number;
        /*
         * The amount that YouTube needs to rotate the original source
         * content to properly display the video.
         */
        rotation? : string;
        /*
         * A value that uniquely identifies a video vendor. Typically,
         * the value is a four-letter vendor code.
         */
        vendor? : string;
        /*
         * The encoded video content's width in pixels. You can
         * calculate the video's encoding aspect ratio as width_pixels
         * / height_pixels.
         */
        widthPixels? : number;
   
    }
         
    export interface IVideoGetRatingResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of ratings that match the request criteria.
         */
        items? : Array<IVideoRating>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#videoGetRatingResponse".
         */
        kind? : string;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    export interface IVideoListResponse  {
        /*
         * Etag of this resource.
         */
        etag? : string;
        /*
         * Serialized EventId of the request which produced this
         * response.
         */
        eventId? : string;
        /*
         * A list of videos that match the request criteria.
         */
        items? : Array<IVideo>;
        /*
         * Identifies what kind of resource this is. Value: the fixed
         * string "youtube#videoListResponse".
         */
        kind? : string;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the next page in the result set.
         */
        nextPageToken? : string;
        pageInfo? : IPageInfo;
        /*
         * The token that can be used as the value of the pageToken
         * parameter to retrieve the previous page in the result set.
         */
        prevPageToken? : string;
        tokenPagination? : ITokenPagination;
        /*
         * The visitorId identifies the visitor.
         */
        visitorId? : string;
   
    }
         
    /**
     * Details about the live streaming metadata.
     */
    
    export interface IVideoLiveStreamingDetails  {
        /*
         * The ID of the currently active live chat attached to this
         * video. This field is filled only if the video is a
         * currently live broadcast that has live chat. Once the
         * broadcast transitions to complete this field will be
         * removed and the live chat closed down. For persistent
         * broadcasts that live chat id will no longer be tied to this
         * video but rather to the new video being displayed at the
         * persistent page.
         */
        activeLiveChatId? : string;
        /*
         * The time that the broadcast actually ended. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This
         * value will not be available until the broadcast is over.
         */
        actualEndTime? : Date;
        /*
         * The time that the broadcast actually started. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This
         * value will not be available until the broadcast begins.
         */
        actualStartTime? : Date;
        /*
         * The number of viewers currently watching the broadcast. The
         * property and its value will be present if the broadcast has
         * current viewers and the broadcast owner has not hidden the
         * viewcount for the video. Note that YouTube stops tracking
         * the number of concurrent viewers for a broadcast when the
         * broadcast ends. So, this property would not identify the
         * number of viewers watching an archived video of a live
         * broadcast that already ended.
         */
        concurrentViewers? : string;
        /*
         * The time that the broadcast is scheduled to end. The value
         * is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         * If the value is empty or the property is not present, then
         * the broadcast is scheduled to continue indefinitely.
         */
        scheduledEndTime? : Date;
        /*
         * The time that the broadcast is scheduled to begin. The
         * value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ)
         * format.
         */
        scheduledStartTime? : Date;
   
    }
         
    /**
     * Localized versions of certain video properties (e.g. title).
     */
    
    export interface IVideoLocalization  {
        /*
         * Localized version of the video's description.
         */
        description? : string;
        /*
         * Localized version of the video's title.
         */
        title? : string;
   
    }
         
    /**
     * Details about monetization of a YouTube Video.
     */
    
    export interface IVideoMonetizationDetails  {
        /*
         * The value of access indicates whether the video can be
         * monetized or not.
         */
        access? : IAccessPolicy;
   
    }
         
    /**
     * Player to be used for a video playback.
     */
    
    export interface IVideoPlayer  {
        embedHeight? : string;
        /*
         * An <iframe> tag that embeds a player that will play the
         * video.
         */
        embedHtml? : string;
        /*
         * The embed width
         */
        embedWidth? : string;
   
    }
         
    /**
     * Describes processing status and progress and availability
     * of some other Video resource parts.
     */
    
    export interface IVideoProcessingDetails  {
        /*
         * This value indicates whether video editing suggestions,
         * which might improve video quality or the playback
         * experience, are available for the video. You can retrieve
         * these suggestions by requesting the suggestions part in
         * your videos.list() request.
         */
        editorSuggestionsAvailability? : string;
        /*
         * This value indicates whether file details are available for
         * the uploaded video. You can retrieve a video's file details
         * by requesting the fileDetails part in your videos.list()
         * request.
         */
        fileDetailsAvailability? : string;
        /*
         * The reason that YouTube failed to process the video. This
         * property will only have a value if the processingStatus
         * property's value is failed.
         */
        processingFailureReason? : string;
        /*
         * This value indicates whether the video processing engine
         * has generated suggestions that might improve YouTube's
         * ability to process the the video, warnings that explain
         * video processing problems, or errors that cause video
         * processing problems. You can retrieve these suggestions by
         * requesting the suggestions part in your videos.list()
         * request.
         */
        processingIssuesAvailability? : string;
        /*
         * The processingProgress object contains information about
         * the progress YouTube has made in processing the video. The
         * values are really only relevant if the video's processing
         * status is processing.
         */
        processingProgress? : IVideoProcessingDetailsProcessingProgress;
        /*
         * The video's processing status. This value indicates whether
         * YouTube was able to process the video or if the video is
         * still being processed.
         */
        processingStatus? : string;
        /*
         * This value indicates whether keyword (tag) suggestions are
         * available for the video. Tags can be added to a video's
         * metadata to make it easier for other users to find the
         * video. You can retrieve these suggestions by requesting the
         * suggestions part in your videos.list() request.
         */
        tagSuggestionsAvailability? : string;
        /*
         * This value indicates whether thumbnail images have been
         * generated for the video.
         */
        thumbnailsAvailability? : string;
   
    }
         
    /**
     * Video processing progress and completion time estimate.
     */
    
    export interface IVideoProcessingDetailsProcessingProgress  {
        /*
         * The number of parts of the video that YouTube has already
         * processed. You can estimate the percentage of the video
         * that YouTube has already processed by calculating:
         * 100 * parts_processed / parts_total
         * 
         * Note that since the estimated number of parts could
         * increase without a corresponding increase in the number of
         * parts that have already been processed, it is possible that
         * the calculated progress could periodically decrease while
         * YouTube processes a video.
         */
        partsProcessed? : string;
        /*
         * An estimate of the total number of parts that need to be
         * processed for the video. The number may be updated with
         * more precise estimates while YouTube processes the video.
         */
        partsTotal? : string;
        /*
         * An estimate of the amount of time, in millseconds, that
         * YouTube needs to finish processing the video.
         */
        timeLeftMs? : string;
   
    }
         
    /**
     * Project specific details about the content of a YouTube
     * Video.
     */
    
    export interface IVideoProjectDetails  {
        /*
         * A list of project tags associated with the video during the
         * upload.
         */
        tags? : Array<string>;
   
    }
         
    export interface IVideoRating  {
        rating? : string;
        videoId? : string;
   
    }
         
    /**
     * Recording information associated with the video.
     */
    
    export interface IVideoRecordingDetails  {
        /*
         * The geolocation information associated with the video.
         */
        location? : IGeoPoint;
        /*
         * The text description of the location where the video was
         * recorded.
         */
        locationDescription? : string;
        /*
         * The date and time when the video was recorded. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
         */
        recordingDate? : Date;
   
    }
         
    /**
     * Basic details about a video, including title, description,
     * uploader, thumbnails and category.
     */
    
    export interface IVideoSnippet  {
        /*
         * The YouTube video category associated with the video.
         */
        categoryId? : string;
        /*
         * The ID that YouTube uses to uniquely identify the channel
         * that the video was uploaded to.
         */
        channelId? : string;
        /*
         * Channel title for the channel that the video belongs to.
         */
        channelTitle? : string;
        /*
         * The default_audio_language property specifies the language
         * spoken in the video's default audio track.
         */
        defaultAudioLanguage? : string;
        /*
         * The language of the videos's default snippet.
         */
        defaultLanguage? : string;
        /*
         * The video's description.
         */
        description? : string;
        /*
         * Indicates if the video is an upcoming/active live
         * broadcast. Or it's "none" if the video is not an
         * upcoming/active live broadcast.
         */
        liveBroadcastContent? : string;
        /*
         * Localized snippet selected with the hl parameter. If no
         * such localization exists, this field is populated with the
         * default snippet. (Read-only)
         */
        localized? : IVideoLocalization;
        /*
         * The date and time that the video was uploaded. The value is
         * specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishedAt? : Date;
        /*
         * A list of keyword tags associated with the video. Tags may
         * contain spaces.
         */
        tags? : Array<string>;
        /*
         * A map of thumbnail images associated with the video. For
         * each object in the map, the key is the name of the
         * thumbnail image, and the value is an object that contains
         * other information about the thumbnail.
         */
        thumbnails? : IThumbnailDetails;
        /*
         * The video's title.
         */
        title? : string;
   
    }
         
    /**
     * Statistics about the video, such as the number of times the
     * video was viewed or liked.
     */
    
    export interface IVideoStatistics  {
        /*
         * The number of comments for the video.
         */
        commentCount? : string;
        /*
         * The number of users who have indicated that they disliked
         * the video by giving it a negative rating.
         */
        dislikeCount? : string;
        /*
         * The number of users who currently have the video marked as
         * a favorite video.
         */
        favoriteCount? : string;
        /*
         * The number of users who have indicated that they liked the
         * video by giving it a positive rating.
         */
        likeCount? : string;
        /*
         * The number of times the video has been viewed.
         */
        viewCount? : string;
   
    }
         
    /**
     * Basic details about a video category, such as its localized
     * title.
     */
    
    export interface IVideoStatus  {
        /*
         * This value indicates if the video can be embedded on
         * another website.
         */
        embeddable? : boolean;
        /*
         * This value explains why a video failed to upload. This
         * property is only present if the uploadStatus property
         * indicates that the upload failed.
         */
        failureReason? : string;
        /*
         * The video's license.
         */
        license? : string;
        /*
         * The video's privacy status.
         */
        privacyStatus? : string;
        /*
         * This value indicates if the extended video statistics on
         * the watch page can be viewed by everyone. Note that the
         * view count, likes, etc will still be visible if this is
         * disabled.
         */
        publicStatsViewable? : boolean;
        /*
         * The date and time when the video is scheduled to publish.
         * It can be set only if the privacy status of the video is
         * private. The value is specified in ISO 8601
         * (YYYY-MM-DDThh:mm:ss.sZ) format.
         */
        publishAt? : Date;
        /*
         * This value explains why YouTube rejected an uploaded video.
         * This property is only present if the uploadStatus property
         * indicates that the upload was rejected.
         */
        rejectionReason? : string;
        /*
         * The status of the uploaded video.
         */
        uploadStatus? : string;
   
    }
         
    /**
     * Specifies suggestions on how to improve video content,
     * including encoding hints, tag suggestions, and editor
     * suggestions.
     */
    
    export interface IVideoSuggestions  {
        /*
         * A list of video editing operations that might improve the
         * video quality or playback experience of the uploaded video.
         */
        editorSuggestions? : Array<string>;
        /*
         * A list of errors that will prevent YouTube from
         * successfully processing the uploaded video video. These
         * errors indicate that, regardless of the video's current
         * processing status, eventually, that status will almost
         * certainly be failed.
         */
        processingErrors? : Array<string>;
        /*
         * A list of suggestions that may improve YouTube's ability to
         * process the video.
         */
        processingHints? : Array<string>;
        /*
         * A list of reasons why YouTube may have difficulty
         * transcoding the uploaded video or that might result in an
         * erroneous transcoding. These warnings are generated before
         * YouTube actually processes the uploaded video file. In
         * addition, they identify issues that are unlikely to cause
         * the video processing to fail but that might cause problems
         * such as sync issues, video artifacts, or a missing audio
         * track.
         */
        processingWarnings? : Array<string>;
        /*
         * A list of keyword tags that could be added to the video's
         * metadata to increase the likelihood that users will locate
         * your video when searching or browsing on YouTube.
         */
        tagSuggestions? : Array<IVideoSuggestionsTagSuggestion>;
   
    }
         
    /**
     * A single tag suggestion with it's relevance information.
     */
    
    export interface IVideoSuggestionsTagSuggestion  {
        /*
         * A set of video categories for which the tag is relevant.
         * You can use this information to display appropriate tag
         * suggestions based on the video category that the video
         * uploader associates with the video. By default, tag
         * suggestions are relevant for all categories if there are no
         * restricts defined for the keyword.
         */
        categoryRestricts? : Array<string>;
        /*
         * The keyword tag suggested for the video.
         */
        tag? : string;
   
    }
         
    /**
     * Freebase topic information related to the video.
     */
    
    export interface IVideoTopicDetails  {
        /*
         * Similar to topic_id, except that these topics are merely
         * relevant to the video. These are topics that may be
         * mentioned in, or appear in the video. You can retrieve
         * information about each topic using Freebase Topic API.
         */
        relevantTopicIds? : Array<string>;
        /*
         * A list of Wikipedia URLs that provide a high-level
         * description of the video's content.
         */
        topicCategories? : Array<string>;
        /*
         * A list of Freebase topic IDs that are centrally associated
         * with the video. These are topics that are centrally
         * featured in the video, and it can be said that the video is
         * mainly about each of these. You can retrieve information
         * about each topic using the Freebase Topic API.
         */
        topicIds? : Array<string>;
   
    }
         
    /**
     * Branding properties for the watch. All deprecated.
     */
    
    export interface IWatchSettings  {
        /*
         * The text color for the video watch page's branded area.
         */
        backgroundColor? : string;
        /*
         * An ID that uniquely identifies a playlist that displays
         * next to the video player.
         */
        featuredPlaylistId? : string;
        /*
         * The background color for the video watch page's branded
         * area.
         */
        textColor? : string;
   
    }
     