/*****************************AutoGenerated Code : Do not edit *******************************/
// Type generated from Swagger definition

/*
    nonsense API 1.0
    
*/



    
    export interface Iset  {
        title? : string;
        routingMode? : string;
        fullNames? : Array<string>;
   
    }
         
    export type IsqlTypesEnum = string;
    
    export interface IsqlQuery  {
        queryString? : string;
   
    }
         
    export interface IsqlQueryWithType  {
        queryString? : string;
        fieldType? : string;
   
    }
         
    export interface IfieldSqlQuery  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ItableSqlQuery  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ImanualTableSqlQuery  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface IfieldRelation  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface IfieldUpdateRelation  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
        newTargetTable? : string;
        newTargetField? : string;
   
    }
         
    export interface IserverSettings  {
        DefaultDataDirectory? : string;
        ElasticubeMemoryAllocation? : number;
        DataImportChunkSize? : number;
        SimultaneousQueryExecutions? : number;
        QueryTimeout? : number;
        RecycleQueries? : boolean;
        RserverEnabled? : boolean;
        Rserver? : string;
   
    }
         
    export interface ISwaggerInlineType29  {
        elasticube? : string;
        server? : string;
   
    }
         
    export type Icubes = Array<ISwaggerInlineType29>;
    
    export interface ISwaggerInlineType31  {
        id? : string;
        email? : string;
   
    }
         
    export interface ISwaggerInlineType32  {
        id? : string;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType30  {
        dataset? : string;
        server? : string;
        elasticube? : string;
        users? : Array<ISwaggerInlineType31>;
        groups? : Array<ISwaggerInlineType32>;
   
    }
         
    export type IpermissionsCube = Array<ISwaggerInlineType30>;
    
    export interface ISwaggerInlineType34  {
        id? : string;
        accessAllowed? : boolean;
        email? : string;
   
    }
         
    export interface ISwaggerInlineType35  {
        id? : string;
        accessAllowed? : boolean;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType33  {
        dataset? : string;
        server? : string;
        elasticube? : string;
        allMembersAllowed? : boolean;
        users? : Array<ISwaggerInlineType34>;
        groups? : Array<ISwaggerInlineType35>;
   
    }
         
    export type IpermissionsCubeResponse = Array<ISwaggerInlineType33>;
    
    export interface ISwaggerInlineType36  {
        partyId? : string;
        type? : string;
        email? : string;
   
    }
         
    export interface IcubeShares  {
        server? : string;
        elasticube? : string;
        shares? : Array<ISwaggerInlineType36>;
   
    }
         
    export interface Ierror  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface ISwaggerInlineType37  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface IbaseApiError  {
        error? : ISwaggerInlineType37;
   
    }
         
    export interface InotFoundApiError  {
        error? : any;
   
    }
         
    export interface ISwaggerInlineType38  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface IunauthorizedApiError  {
        error? : ISwaggerInlineType38;
   
    }
         
    export interface ISwaggerInlineType39  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface IbadRequestApiError  {
        error? : ISwaggerInlineType39;
   
    }
         
    export interface ISwaggerInlineType40  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface IforbiddenApiError  {
        error? : ISwaggerInlineType40;
   
    }
         
    export interface IunprocessableEntityApiError  {
        error? : any;
   
    }
         
    export interface ISwaggerInlineType41  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface ItooManyRequestsApiError  {
        error? : ISwaggerInlineType41;
   
    }
         
    export interface ISwaggerInlineType42  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface IinternalServerApiError  {
        error? : ISwaggerInlineType42;
   
    }
         
    export interface ISwaggerInlineType43  {
        code? : number;
        message? : string;
        status? : number;
        httpMessage? : string;
   
    }
         
    export interface IgatewayTimeouError  {
        error? : ISwaggerInlineType43;
   
    }
         
    export interface ISwaggerInlineType44  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface Iuser  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType44;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType45  {
        localeId? : string;
   
    }
         
    export interface InonsenseUser  {
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        groups? : Array<string>;
        preferences? : ISwaggerInlineType45;
        uiSettings? : any;
   
    }
         
    export interface ISwaggerInlineType46  {
        localeId? : string;
   
    }
         
    export interface IadUser  {
        userName? : string;
        roleId? : string;
        groups? : Array<string>;
        objectSid? : string;
        preferences? : ISwaggerInlineType46;
        uiSettings? : any;
   
    }
         
    export interface Idevice  {
        deviceId? : string;
        token? : string;
   
    }
         
    export interface IuserPreferences  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface IuserUiSettings  {
   
    }
         
    export interface Igroup  {
        _id? : string;
        name? : string;
        language? : string;
        mail? : string;
        ad? : boolean;
        roleId? : string;
        defaultRole? : string;
        objectSid? : string;
        dn? : string;
        uSNChanged? : string;
        created? : Date;
        lastUpdated? : Date;
   
    }
         
    export interface InonsenseGroup  {
        name? : string;
   
    }
         
    export interface IadGroup  {
        name? : string;
        cn? : string;
        roleId? : string;
        objectSid? : string;
        dn? : string;
   
    }
         
    export interface ISwaggerInlineType47  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType49  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType48  {
        name? : string;
        palette? : ISwaggerInlineType49;
   
    }
         
    export interface ISwaggerInlineType50  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType52  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType51  {
        jaql? : ISwaggerInlineType52;
   
    }
         
    export interface ISwaggerInlineType57  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType56  {
        elements? : Array<ISwaggerInlineType57>;
   
    }
         
    export interface ISwaggerInlineType55  {
        subcells? : Array<ISwaggerInlineType56>;
   
    }
         
    export interface ISwaggerInlineType54  {
        width? : number;
        cells? : Array<ISwaggerInlineType55>;
   
    }
         
    export interface ISwaggerInlineType53  {
        type? : string;
        columns? : Array<ISwaggerInlineType54>;
   
    }
         
    export interface ISwaggerInlineType63  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType62  {
        elements? : Array<ISwaggerInlineType63>;
   
    }
         
    export interface ISwaggerInlineType61  {
        subcells? : Array<ISwaggerInlineType62>;
   
    }
         
    export interface ISwaggerInlineType60  {
        width? : number;
        cells? : Array<ISwaggerInlineType61>;
   
    }
         
    export interface ISwaggerInlineType59  {
        type? : string;
        columns? : Array<ISwaggerInlineType60>;
   
    }
         
    export interface ISwaggerInlineType58  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType59>;
   
    }
         
    export interface ISwaggerInlineType65  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType64  {
        jaql? : ISwaggerInlineType65;
   
    }
         
    export interface Idashboard  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType47>;
        style? : ISwaggerInlineType48;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType50;
        filters? : Array<ISwaggerInlineType51>;
        instanceType? : string;
        layout? : ISwaggerInlineType53;
        previewLayout? : Array<ISwaggerInlineType58>;
        defaultFilters? : Array<ISwaggerInlineType64>;
   
    }
         
    export interface ISwaggerInlineType66  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType68  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType67  {
        jaql? : ISwaggerInlineType68;
   
    }
         
    export interface ISwaggerInlineType73  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType72  {
        elements? : Array<ISwaggerInlineType73>;
   
    }
         
    export interface ISwaggerInlineType71  {
        subcells? : Array<ISwaggerInlineType72>;
   
    }
         
    export interface ISwaggerInlineType70  {
        width? : number;
        cells? : Array<ISwaggerInlineType71>;
   
    }
         
    export interface ISwaggerInlineType69  {
        type? : string;
        columns? : Array<ISwaggerInlineType70>;
   
    }
         
    export interface ISwaggerInlineType79  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType78  {
        elements? : Array<ISwaggerInlineType79>;
   
    }
         
    export interface ISwaggerInlineType77  {
        subcells? : Array<ISwaggerInlineType78>;
   
    }
         
    export interface ISwaggerInlineType76  {
        width? : number;
        cells? : Array<ISwaggerInlineType77>;
   
    }
         
    export interface ISwaggerInlineType75  {
        type? : string;
        columns? : Array<ISwaggerInlineType76>;
   
    }
         
    export interface ISwaggerInlineType74  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType75>;
   
    }
         
    export interface ISwaggerInlineType81  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType80  {
        jaql? : ISwaggerInlineType81;
   
    }
         
    export interface IbaseDashboard  {
        title? : string;
        desc? : string;
        parentFolder? : string;
        datasource? : ISwaggerInlineType66;
        filters? : Array<ISwaggerInlineType67>;
        layout? : ISwaggerInlineType69;
        previewLayout? : Array<ISwaggerInlineType74>;
        defaultFilters? : Array<ISwaggerInlineType80>;
   
    }
         
    export interface IdashboardExists  {
        exists? : boolean;
   
    }
         
    export interface ISwaggerInlineType82  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType86  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType87  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType85  {
        jaql? : ISwaggerInlineType86;
        field? : ISwaggerInlineType87;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType84  {
        name? : string;
        items? : Array<ISwaggerInlineType85>;
   
    }
         
    export interface ISwaggerInlineType83  {
        panels? : Array<ISwaggerInlineType84>;
   
    }
         
    export interface ISwaggerInlineType88  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface Iwidget  {
        title? : string;
        oid? : string;
        desc? : string;
        datasource? : ISwaggerInlineType82;
        type? : string;
        subtype? : string;
        dashboardid? : string;
        owner? : string;
        userId? : string;
        instanceType? : string;
        lastUpdated? : Date;
        metadata? : ISwaggerInlineType83;
        shares? : Array<ISwaggerInlineType88>;
   
    }
         
    export interface ISwaggerInlineType89  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType93  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType94  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType92  {
        jaql? : ISwaggerInlineType93;
        field? : ISwaggerInlineType94;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType91  {
        name? : string;
        items? : Array<ISwaggerInlineType92>;
   
    }
         
    export interface ISwaggerInlineType90  {
        panels? : Array<ISwaggerInlineType91>;
   
    }
         
    export interface IbaseWidget  {
        title? : string;
        desc? : string;
        datasource? : ISwaggerInlineType89;
        type? : string;
        subtype? : string;
        metadata? : ISwaggerInlineType90;
   
    }
         
    export interface Idatasource  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType95  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface Istyle  {
        name? : string;
        palette? : ISwaggerInlineType95;
   
    }
         
    export interface Ijaql  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType96  {
        token? : string;
        deviceId? : string;
        cookieType? : string;
        userName? : string;
        expiration? : string;
        issueDate? : string;
   
    }
         
    export interface ISwaggerInlineType97  {
        id? : string;
        action? : string;
   
    }
         
    export interface IcopyRequest  {
        server? : string;
        authorization? : ISwaggerInlineType96;
        dashboards? : Array<ISwaggerInlineType97>;
   
    }
         
    export interface ISwaggerInlineType101  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType100  {
        elements? : Array<ISwaggerInlineType101>;
   
    }
         
    export interface ISwaggerInlineType99  {
        subcells? : Array<ISwaggerInlineType100>;
   
    }
         
    export interface ISwaggerInlineType98  {
        width? : number;
        cells? : Array<ISwaggerInlineType99>;
   
    }
         
    export interface Ilayout  {
        type? : string;
        columns? : Array<ISwaggerInlineType98>;
   
    }
         
    export type Ifilters = Array<any>;
    
    export interface Ishare  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface IbeginResetPassword  {
        email? : string;
   
    }
         
    export interface IresetPasswordpass  {
        password? : string;
   
    }
         
    export interface ItokenedUserResponse  {
        userName? : string;
   
    }
         
    export interface IbeginActivate  {
        email? : string;
   
    }
         
    export type IbeginActivateBulk = Array<string>;
    
    export interface IlicenseInformation  {
        bigData? : boolean;
        expirationDate? : string;
        highAvailability? : boolean;
        inUseAdmins? : number;
        inUseDesigners? : number;
        inUseViewers? : number;
        maxAdmins? : number;
        maxDesigners? : number;
        maxViewers? : number;
        trial? : boolean;
   
    }
         
    export interface ISwaggerInlineType102  {
        isBigData? : boolean;
        version? : string;
   
    }
         
    export interface ISwaggerInlineType103  {
        isMobileEnabled? : boolean;
        isExpired? : boolean;
   
    }
         
    export interface IapplicationStatus  {
        version? : ISwaggerInlineType102;
        license? : ISwaggerInlineType103;
   
    }
         
    export interface IloginResponse  {
        success? : boolean;
        message? : string;
        access_token? : string;
        profile? : any;
   
    }
         
    export interface Iserver  {
        server? : string;
   
    }
         
    export interface IsaveServer  {
        token? : string;
        cookieType? : string;
        server? : string;
        userName? : string;
        deviceId? : string;
        expiration? : string;
        issueDate? : string;
   
    }
         
    export interface IserverAccess  {
        serverName? : string;
        name? : string;
   
    }
         
    export interface ImongoUserObject  {
        userName? : string;
        password? : string;
   
    }
         
    export interface Ifolder  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface IbaseFolder  {
        name? : string;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType104  {
        type? : string;
        recipient? : string;
   
    }
         
    export interface ISwaggerInlineType107  {
        paperFormat? : string;
        paperOrientation? : string;
        layout? : string;
        showNarration? : boolean;
   
    }
         
    export interface ISwaggerInlineType106  {
        includeTitle? : boolean;
        includeFilters? : boolean;
        includeDS? : boolean;
        renderingInfo? : ISwaggerInlineType107;
   
    }
         
    export interface ISwaggerInlineType105  {
        inline? : boolean;
        pdf? : ISwaggerInlineType106;
   
    }
         
    export interface IreportObject  {
        assetId? : string;
        assetType? : string;
        recipients? : Array<ISwaggerInlineType104>;
        preferences? : ISwaggerInlineType105;
   
    }
         
    export interface ISwaggerInlineType108  {
        values? : Array<number>;
   
    }
         
    export interface ISwaggerInlineType109  {
        name? : string;
        oid? : string;
        type? : string;
   
    }
         
    export interface Ievent  {
        _id? : string;
        time? : Date;
        url? : string;
        context? : ISwaggerInlineType108;
        by? : ISwaggerInlineType109;
        seen? : boolean;
        hide? : boolean;
        alert? : string;
   
    }
         
    export interface IupdateEvent  {
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface IeventCount  {
   
    }
         
    export interface IeventQuery  {
        dateFrom? : Date;
        dateTo? : Date;
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface ISwaggerInlineType110  {
        dateFrom? : Date;
        dateTo? : Date;
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface ISwaggerInlineType111  {
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface IupdateBulkEvent  {
        query? : ISwaggerInlineType110;
        update? : ISwaggerInlineType111;
   
    }
         
    export interface ISwaggerInlineType112  {
        type? : string;
        id? : string;
   
    }
         
    export type IalertParties = Array<ISwaggerInlineType112>;
    
    export interface ISwaggerInlineType113  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export type IalertSources = Array<ISwaggerInlineType113>;
    
    export interface ISwaggerInlineType114  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType115  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType116  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface IaddAlertAction  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType114;
        zapier? : ISwaggerInlineType115;
        webhooks? : Array<ISwaggerInlineType116>;
   
    }
         
    export interface ISwaggerInlineType117  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType118  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType119  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface IupdateAlertAction  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType117;
        zapier? : ISwaggerInlineType118;
        webhooks? : Array<ISwaggerInlineType119>;
   
    }
         
    export interface IalertCondition  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType120  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType124  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType125  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType123  {
        measures? : Array<ISwaggerInlineType124>;
        filters? : Array<ISwaggerInlineType125>;
   
    }
         
    export interface ISwaggerInlineType122  {
        datasource? : any;
        metadata? : ISwaggerInlineType123;
   
    }
         
    export interface ISwaggerInlineType126  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType127  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType121  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        kpi? : ISwaggerInlineType122;
        dashboard? : string;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType126;
        locale? : string;
        sources? : Array<ISwaggerInlineType127>;
   
    }
         
    export interface ISwaggerInlineType129  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType130  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType131  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType128  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType129;
        zapier? : ISwaggerInlineType130;
        webhooks? : Array<ISwaggerInlineType131>;
   
    }
         
    export interface IaddAlert  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType120>;
        disabledUsers? : Array<string>;
        category? : string;
        type? : string;
        owner? : string;
        context? : ISwaggerInlineType121;
        action? : ISwaggerInlineType128;
   
    }
         
    export interface IalertCount  {
        count? : number;
   
    }
         
    export interface IsetReceiveNotification  {
        receiveNotification? : boolean;
   
    }
         
    export interface ISwaggerInlineType132  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType134  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType135  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType133  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType134;
        sources? : Array<ISwaggerInlineType135>;
   
    }
         
    export interface ISwaggerInlineType137  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType138  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType139  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType136  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType137;
        zapier? : ISwaggerInlineType138;
        webhooks? : Array<ISwaggerInlineType139>;
   
    }
         
    export interface IupdateAlert  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType132>;
        context? : ISwaggerInlineType133;
        action? : ISwaggerInlineType136;
   
    }
         
    export interface ISwaggerInlineType141  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType142  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType140  {
        measures? : Array<ISwaggerInlineType141>;
        filters? : Array<ISwaggerInlineType142>;
   
    }
         
    export interface Ikpi  {
        datasource? : any;
        metadata? : ISwaggerInlineType140;
   
    }
         
    export interface Ifeature  {
   
    }
         
    export interface ItoggleFeature  {
        active? : boolean;
   
    }
         
    export interface IbaseEmailServer  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface IemailServer  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface IpublicSettings  {
        /*
         * Name of the first day of week
         */
        firstday? : string;
        /*
         * Language for localization
         */
        language? : string;
   
    }
         
    export interface ISwaggerInlineType143  {
        /*
         * Default locale for localization.
         */
        default? : string;
        /*
         * If language autodetect is enabled.
         */
        autoDetectEnabled? : boolean;
   
    }
         
    export interface IglobalizationSettings  {
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Default language for localization.
         */
        language? : string;
        localization? : ISwaggerInlineType143;
   
    }
         
    export interface IssoSettings  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * If SSO is enabled.
         */
        enabled? : boolean;
        /*
         * Type of SSO.
         */
        ssoType? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication.
         */
        loginUrl? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out.
         */
        logoutUrl? : string;
        /*
         * Used in the token generation script.
         */
        sharedSecret? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication via SAML.
         */
        loginUrlSaml? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out via SAML.
         */
        logoutUrlSaml? : string;
        /*
         * This is the certificate of identity provider.
         */
        idPCert? : string;
        /*
         * Allow lower level security by disabling JTI enforcement.
         */
        lowSecurityJwtSso? : boolean;
        /*
         * Update the users' groups, based on the SAML attribute
         * memberOf.
         */
        syncGroupsFromSamlToken? : boolean;
   
    }
         
    /**
     * Fiscal Year.
     */
    
    export interface ISwaggerInlineType144  {
        month? : string;
   
    }
         
    export interface ISwaggerInlineType145  {
        /*
         * If mails are enabled.
         */
        enabled? : boolean;
        /*
         * Email of sender.
         */
        senderEmail? : string;
        /*
         * Name of sender.
         */
        senderName? : string;
   
    }
         
    export interface ISwaggerInlineType147  {
        /*
         * If cors settings is enabled.
         */
        enabled? : boolean;
        allowedOrigins? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType146  {
        /*
         * If SSL is enabled.
         */
        enableSSl? : boolean;
        cors? : ISwaggerInlineType147;
   
    }
         
    export interface IsystemSettings  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Web server public address.
         */
        alias? : string;
        /*
         * First day of the week for date related ElastiCube queries.
         */
        firstday? : string;
        /*
         * Fiscal Year.
         */
        fiscal? : ISwaggerInlineType144;
        /*
         * Allow admin access for all dashboards
         */
        isAdminAccessAllDashboards? : boolean;
        email? : ISwaggerInlineType145;
        webServer? : ISwaggerInlineType146;
   
    }
         
    export interface IpulseSettings  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Pulse page extension script.
         */
        script? : string;
   
    }
         
    export interface IlightConnector  {
        id? : string;
        name? : string;
   
    }
         
    export interface IliveConnectorConnectionStatus  {
        status? : string;
   
    }
         
    export interface IliveConnectorConnectionBody  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface IliveConnectionTableColumn  {
        columnName? : string;
        columnOrder? : number;
        dbType? : number;
        size? : number;
        precision? : number;
        scale? : number;
   
    }
         
    export interface ISwaggerInlineType148  {
        columnName? : string;
        columnOrder? : number;
        dbType? : number;
        size? : number;
        precision? : number;
        scale? : number;
   
    }
         
    export interface ISwaggerInlineType149  {
        fkName? : string;
        parentSchema? : string;
        parentTable? : string;
        parentColumns? : Array<string>;
        childSchema? : string;
        childTable? : string;
        childColumns? : Array<string>;
   
    }
         
    export interface IliveConnectionTable  {
        catalog? : string;
        schemaName? : string;
        tableName? : string;
        tableType? : string;
        columns? : Array<ISwaggerInlineType148>;
        relations? : Array<ISwaggerInlineType149>;
   
    }
         
    export interface ISwaggerInlineType151  {
        title? : string;
        translationKey? : string;
   
    }
         
    export interface ISwaggerInlineType152  {
        title? : string;
        translationKey? : string;
   
    }
         
    export interface ISwaggerInlineType150  {
        database? : ISwaggerInlineType151;
        table? : ISwaggerInlineType152;
   
    }
         
    export interface ISwaggerInlineType154  {
        baseUrl? : string;
        authorizationEndpoint? : string;
        accessTokenEndpoint? : string;
        clientId? : string;
        clientSecret? : string;
        scope? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType156  {
        title? : string;
        value? : string;
   
    }
         
    export interface ISwaggerInlineType157  {
        parameter? : string;
        hasValue? : string;
   
    }
         
    export interface ISwaggerInlineType155  {
        name? : string;
        title? : string;
        titleTranslationKey? : string;
        type? : string;
        icon? : string;
        required? : boolean;
        send? : boolean;
        default? : string;
        description? : string;
        descriptionTranslationKey? : string;
        pattern? : string;
        trim? : boolean;
        min? : number;
        max? : number;
        multivalue? : boolean;
        options? : Array<ISwaggerInlineType156>;
        availableIf? : ISwaggerInlineType157;
   
    }
         
    export interface ISwaggerInlineType153  {
        oauth2? : ISwaggerInlineType154;
        base? : Array<ISwaggerInlineType155>;
   
    }
         
    export interface IconnectorManifest  {
        Name? : string;
        titleCustomization? : ISwaggerInlineType150;
        connection? : ISwaggerInlineType153;
   
    }
         
    export interface ISwaggerInlineType158  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType160  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType159  {
        type? : string;
        arguments? : Array<ISwaggerInlineType160>;
   
    }
         
    export interface ISwaggerInlineType163  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType165  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType164  {
        type? : string;
        arguments? : ISwaggerInlineType165;
   
    }
         
    export interface ISwaggerInlineType162  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType163>;
        tuple-transformations? : Array<ISwaggerInlineType164>;
   
    }
         
    export interface ISwaggerInlineType161  {
        tables? : Array<ISwaggerInlineType162>;
   
    }
         
    export interface ISwaggerInlineType166  {
        type? : string;
   
    }
         
    export interface IdatasetUpdatedProperties  {
        _id? : string;
        shares? : Array<ISwaggerInlineType158>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType159>;
        schema? : ISwaggerInlineType161;
        schedule? : ISwaggerInlineType166;
   
    }
         
    export interface ISwaggerInlineType167  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType169  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType168  {
        type? : string;
        arguments? : Array<ISwaggerInlineType169>;
   
    }
         
    export interface ISwaggerInlineType172  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType174  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType173  {
        type? : string;
        arguments? : ISwaggerInlineType174;
   
    }
         
    export interface ISwaggerInlineType171  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType172>;
        tuple-transformations? : Array<ISwaggerInlineType173>;
   
    }
         
    export interface ISwaggerInlineType170  {
        tables? : Array<ISwaggerInlineType171>;
   
    }
         
    export interface ISwaggerInlineType175  {
        type? : string;
   
    }
         
    export interface IdatasetToAdd  {
        shares? : Array<ISwaggerInlineType167>;
        elasticube? : string;
        name? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType168>;
        schema? : ISwaggerInlineType170;
        schedule? : ISwaggerInlineType175;
   
    }
         
    export interface ISwaggerInlineType176  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType178  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType177  {
        type? : string;
        arguments? : Array<ISwaggerInlineType178>;
   
    }
         
    export interface ISwaggerInlineType181  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType183  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType182  {
        type? : string;
        arguments? : ISwaggerInlineType183;
   
    }
         
    export interface ISwaggerInlineType180  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType181>;
        tuple-transformations? : Array<ISwaggerInlineType182>;
   
    }
         
    export interface ISwaggerInlineType179  {
        tables? : Array<ISwaggerInlineType180>;
   
    }
         
    export interface ISwaggerInlineType184  {
        type? : string;
   
    }
         
    export interface Idataset  {
        _id? : string;
        shares? : Array<ISwaggerInlineType176>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType177>;
        schema? : ISwaggerInlineType179;
        schedule? : ISwaggerInlineType184;
   
    }
         
    export interface ISwaggerInlineType186  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType185  {
        type? : string;
        arguments? : Array<ISwaggerInlineType186>;
   
    }
         
    export type IdatasetModelingTransformations = Array<ISwaggerInlineType185>;
    
    export interface ISwaggerInlineType188  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType190  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType189  {
        type? : string;
        arguments? : ISwaggerInlineType190;
   
    }
         
    export interface ISwaggerInlineType187  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType188>;
        tuple-transformations? : Array<ISwaggerInlineType189>;
   
    }
         
    export interface IdatasetSchema  {
        tables? : Array<ISwaggerInlineType187>;
   
    }
         
    export interface Ipermission  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType191  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export type Ipermissions = Array<ISwaggerInlineType191>;
    
    export interface ISwaggerInlineType192  {
        partyId? : string;
        type? : string;
        email? : string;
   
    }
         
    export interface IdatasetShares  {
        dataset? : string;
        shares? : Array<ISwaggerInlineType192>;
   
    }
         
    export type IpermissionRole = string;
    
    export type IpermissionType = string;
    
    export type ImongoObjectId = string;
    
    export interface ISwaggerInlineType193  {
        partyId? : string;
        type? : string;
   
    }
         
    export interface IdataContextOfDataSet  {
        _id? : string;
        dataSourceId? : string;
        allMembers? : boolean;
        members? : Array<string>;
        shares? : Array<ISwaggerInlineType193>;
        datatype? : string;
        table? : string;
        column? : string;
        live? : boolean;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType194  {
        partyId? : string;
        type? : string;
   
    }
         
    export interface InewDataContextOfDataSet  {
        allMembers? : boolean;
        members? : Array<string>;
        shares? : Array<ISwaggerInlineType194>;
        datatype? : string;
        table? : string;
        column? : string;
        live? : boolean;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType195  {
        partyId? : string;
        type? : string;
   
    }
         
    export type IpartyDataContext = Array<ISwaggerInlineType195>;
    
    export interface Iconnection  {
        _id? : string;
        owner? : string;
        provider? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
        schema? : string;
        parameters? : any;
   
    }
         
    export interface ISwaggerInlineType196  {
        _id? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
   
    }
         
    export interface IconnectionWithDuplicates  {
        _id? : string;
        owner? : string;
        provider? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
        schema? : string;
        parameters? : any;
        duplicates? : Array<ISwaggerInlineType196>;
   
    }
         
    export interface ISwaggerInlineType197  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface IconnectionWithProviderBody  {
        connectionData? : ISwaggerInlineType197;
        /*
         * new provider name
         */
        provider? : string;
   
    }
         
    export interface IldapDomainRequest  {
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        password? : string;
        name? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface IldapDomainSyncRequest  {
        /*
         * indicates if to sync all the changes from the Active
         * Directory server since it was created
         */
        force? : boolean;
        /*
         * groups to sync
         */
        gnames? : Array<string>;
        /*
         * users to sync
         */
        unames? : Array<string>;
   
    }
         
    export interface IldapDomainResponse  {
        _id? : string;
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        name? : string;
        syncUsn? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface IldapDomainTestRequest  {
        _id? : string;
        url? : string;
        baseDN? : string;
        username? : string;
        password? : string;
   
    }
         
    export interface IanalyticsTokenResponse  {
        analytics_token? : string;
   
    }
         
    export interface IdatasourceDimension  {
        id? : string;
        column? : string;
        table? : string;
        dimtype? : string;
        indexed? : boolean;
        merged? : boolean;
        title? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType199  {
        /*
         * Widget ID
         */
        oid? : string;
        /*
         * Widget title
         */
        title? : string;
        /*
         * Widget type
         */
        type? : string;
        /*
         * Time when widget started load (in milliseconds)
         */
        logStartLoad? : number;
        /*
         * Time when widget ended load (in milliseconds)
         */
        logEndLoad? : number;
        /*
         * Time when widget started query(in milliseconds)
         */
        logStartQuery? : number;
        /*
         * Time when widget ended query (in milliseconds)
         */
        logEndQuery? : number;
        /*
         * Time when widget started render(in milliseconds)
         */
        logStartRender? : number;
        /*
         * Time when widget ended render (in milliseconds)
         */
        logEndRender? : string;
   
    }
         
    /**
     * Dashboard object
     */
    
    export interface ISwaggerInlineType198  {
        /*
         * Dashboard title
         */
        title? : string;
        /*
         * Dashboard ID
         */
        oid? : string;
        /*
         * Time when dashboard started load (in milliseconds)
         */
        logStartLoad? : number;
        /*
         * Time when dashboard ended load (in milliseconds)
         */
        logEndLoad? : number;
        /*
         * Time when dashboard started refresh (in milliseconds)
         */
        logStartRefresh? : number;
        /*
         * Time when dashboard ended refresh (in milliseconds)
         */
        logEndRefresh? : number;
        widgets? : Array<ISwaggerInlineType199>;
   
    }
         
    export interface Itimer  {
        /*
         * Dashboard object
         */
        dashboard? : ISwaggerInlineType198;
   
    }
         
    export interface IaddDocument  {
   
    }
         
    export type IgetAllDocuments = Array<any>;
    
    export interface IupdateDocument  {
        queryForSearch? : any;
        objectForUpdate? : any;
   
    }
         
    export interface InarrationToken  {
        /*
         * narration provider token.
         */
        narrationToken? : string;
   
    }
         
    export interface InarrationWidgetResponse  {
        /*
         * narration text
         */
        narration? : string;
   
    }
         
    export interface ISwaggerInlineType201  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType202  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType200  {
        jaql? : ISwaggerInlineType201;
        field? : ISwaggerInlineType202;
        format? : any;
   
    }
         
    /**
     * JAQL query object
     */
    
    export interface IjaqlRequest  {
        datasource? : string;
        metadata? : Array<ISwaggerInlineType200>;
        /*
         * data format
         */
        format? : string;
        /*
         * masked result check
         */
        isMaskedResult? : boolean;
        /*
         * narration text
         */
        count? : number;
        /*
         * offset
         */
        offset? : number;
   
    }
         
    /**
     * narration configuration
     */
    
    export interface InarrationConfiguration  {
        /*
         * narration text format
         */
        format? : string;
        /*
         * narration text verbosity
         */
        verbosity? : string;
        /*
         * narration text sentiment
         */
        up_sentiment? : string;
        /*
         * narration text aggregation
         */
        aggregation? : string;
   
    }
         
    /**
     * narration configuration
     */
    
    export interface ISwaggerInlineType203  {
        /*
         * narration text format
         */
        format? : string;
        /*
         * narration text verbosity
         */
        verbosity? : string;
        /*
         * narration text sentiment
         */
        up_sentiment? : string;
        /*
         * narration text aggregation
         */
        aggregation? : string;
   
    }
         
    export interface ISwaggerInlineType206  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType207  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType205  {
        jaql? : ISwaggerInlineType206;
        field? : ISwaggerInlineType207;
        format? : any;
   
    }
         
    /**
     * JAQL query object
     */
    
    export interface ISwaggerInlineType204  {
        datasource? : string;
        metadata? : Array<ISwaggerInlineType205>;
        /*
         * data format
         */
        format? : string;
        /*
         * masked result check
         */
        isMaskedResult? : boolean;
        /*
         * narration text
         */
        count? : number;
        /*
         * offset
         */
        offset? : number;
   
    }
         
    export interface InarrationWidgetRequest  {
        /*
         * сhart type like "chart/pie" and etc.
         */
        chartType? : string;
        /*
         * narration configuration
         */
        narration? : ISwaggerInlineType203;
        /*
         * JAQL query object
         */
        jaqlRequest? : ISwaggerInlineType204;
        /*
         * widget id
         */
        widgetId? : string;
        /*
         * dashboard id
         */
        dashboardId? : string;
   
    }
         
    export interface InarrationAnalytics  {
        /*
         * disable/enable analytics for narration
         */
        enabled? : boolean;
        /*
         * attempts to find clusters of closely-related data points
         */
        clustering? : any;
        /*
         * determines if the data collection follows a normal
         * distribution
         */
        distribution? : any;
        /*
         * performs regressions of the measure values across the
         * discrete dimension and comments on the analysis
         */
        correlation? : any;
        /*
         * trendlines consist of fitting the data for each measure to
         * a line and determining whether or not that model fits the
         * data
         */
        trendline? : any;
        /*
         * segments are noteworthy/interesting portions of a series
         * with movements of a certain percent of change
         */
        segments? : any;
        /*
         * volatility is a measure of how erratic a series is, used to
         * rank series to find the most or least volatile
         */
        volatility? : any;
   
    }
         
    export interface ISwaggerInlineType209  {
        type? : string;
        coordinates? : Array<any>;
   
    }
         
    export interface ISwaggerInlineType208  {
        type? : string;
        id? : string;
        properties? : any;
        geometry? : ISwaggerInlineType209;
   
    }
         
    export interface IgeoJsonResponse  {
        type? : string;
        features? : Array<ISwaggerInlineType208>;
   
    }
         
    export interface ISwaggerInlineType210  {
        lat? : number;
        lng? : number;
   
    }
         
    export interface ISwaggerInlineType211  {
        id? : string;
        short_code? : string;
        text? : string;
        wikidata? : string;
   
    }
         
    export interface IlocationsResponse  {
        name? : string;
        asciiname? : string;
        latLng? : ISwaggerInlineType210;
        placetype? : string;
        country? : string;
        countryCode? : string;
        fqn? : string;
        lookupKey? : string;
        text? : string;
        place_name? : string;
        context? : Array<ISwaggerInlineType211>;
        version? : string;
        _id? : string;
   
    }
         
    export interface Ilocation  {
        name? : string;
        country? : string;
        state? : string;
        city? : string;
   
    }
         
    /**
     * Plugin object
     */
    
    export interface Iplugins  {
        /*
         * plugin name
         */
        name? : string;
        /*
         * version of plugin
         */
        version? : number;
        /*
         * last time plugin updated
         */
        lastUpdate? : string;
        /*
         * enabled/disabled plugin status
         */
        isEnabled? : boolean;
        /*
         * plugin folder name
         */
        folderName? : string;
   
    }
         
    /**
     * Plugin object
     */
    
    export interface ISwaggerInlineType212  {
        /*
         * plugin name
         */
        name? : string;
        /*
         * version of plugin
         */
        version? : number;
        /*
         * last time plugin updated
         */
        lastUpdate? : string;
        /*
         * enabled/disabled plugin status
         */
        isEnabled? : boolean;
        /*
         * plugin folder name
         */
        folderName? : string;
   
    }
         
    export interface ISwaggerInlineType213  {
        /*
         * limit of items to return
         */
        limit? : number;
        /*
         * number of items to skip
         */
        skip? : number;
        /*
         * filter by provided string
         */
        search? : string;
        /*
         * order by specific field
         */
        orderby? : string;
        /*
         * sort by descending or ascending
         */
        desc? : boolean;
   
    }
         
    /**
     * Plugin response model
     */
    
    export interface IgetPlugins  {
        plugins? : Array<ISwaggerInlineType212>;
        /*
         * amount of plugins
         */
        count? : number;
        queryMetadata? : ISwaggerInlineType213;
   
    }
         
    /**
     * Plugin object
     */
    
    export interface ISwaggerInlineType214  {
        /*
         * plugin name
         */
        name? : string;
        /*
         * version of plugin
         */
        version? : number;
        /*
         * last time plugin updated
         */
        lastUpdate? : string;
        /*
         * enabled/disabled plugin status
         */
        isEnabled? : boolean;
        /*
         * plugin folder name
         */
        folderName? : string;
   
    }
         
    /**
     * Plugin updated response model
     */
    
    export type InewPlugins = Array<ISwaggerInlineType214>;
    
    export interface IelasticubeServer  {
        lastUpdated? : Date;
        owner? : string;
        created? : Date;
        address? : string;
        defaultCubePermissions? : Array<any>;
        identity? : string;
   
    }
         
    export interface IserverPermissions  {
        party? : string;
        type? : string;
        permission? : string;
   
    }
         
    /**
     * query metadata
     */
    
    export interface ISwaggerInlineType215  {
        /*
         * which items to look for suggestions
         */
        target? : Array<string>;
        /*
         * include popular fields or not
         */
        popular? : boolean;
        /*
         * total items which match query metadata
         */
        total? : number;
        /*
         * number of skiped items
         */
        skip? : number;
        /*
         * number of returned items
         */
        count? : number;
   
    }
         
    export interface ISwaggerInlineType216  {
        table? : string;
        column? : string;
        datatype? : string;
        title? : string;
        rank? : string;
   
    }
         
    /**
     * Array of candidates to suggest
     */
    
    export interface Icandidates  {
        /*
         * query metadata
         */
        queryMetadata? : ISwaggerInlineType215;
        /*
         * fields to suggest
         */
        suggestions? : Array<ISwaggerInlineType216>;
   
    }
         
    /**
     * Properties to get suggestion items
     */
    
    export interface IsuggestionProperties  {
        /*
         * datasource name
         */
        datasource? : any;
        /*
         * define suggestion type [widgets]
         */
        type? : string;
        /*
         * how many items to return. By default 20
         */
        count? : number;
        /*
         * which items to look for suggestions
         */
        fields? : Array<any>;
        /*
         * number of items to skip. By default 0
         */
        skip? : number;
        /*
         * include popular fields or not. By default true
         */
        popular? : boolean;
   
    }
         
    /**
     * Properties to refresh suggestions
     */
    
    export interface IstatusProps  {
        /*
         * refresh suggestions data or not. By default false.
         */
        data? : boolean;
        /*
         * refresh suggestions ranking or not. By default false.
         */
        ranking? : boolean;
   
    }
         
    /**
     * Status of suggestions
     */
    
    export interface Istatus  {
        /*
         * Time when was last suggestions refresh.
         */
        lastExecution? : string;
        /*
         * Define job status.
         */
        jobStatus? : string;
        /*
         * Job schedule in cron format.
         */
        jobFrequent? : string;
        /*
         * Executions status of suggestions processes.
         */
        executionStatus? : boolean;
   
    }
         
    /**
     * Status of suggestions
     */
    
    export interface IsuggestionsStatus  {
        /*
         * Information message.
         */
        message? : string;
        /*
         * Suggestions code.
         */
        suggestionCode? : number;
   
    }
         
    export type IencryptedValue = string;
    
    export type IdecryptedValue = string;
    
    export interface ISwaggerInlineType217  {
        title? : string;
        routingMode? : string;
        fullNames? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType218  {
        title? : string;
        routingMode? : string;
        fullNames? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType219  {
        title? : string;
        routingMode? : string;
        fullNames? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType220  {
        title? : string;
        routingMode? : string;
        fullNames? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType222  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface ISwaggerInlineType221  {
        table? : ISwaggerInlineType222;
   
    }
         
    export interface ISwaggerInlineType223  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface ISwaggerInlineType225  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface ISwaggerInlineType224  {
        table? : ISwaggerInlineType225;
   
    }
         
    export interface ISwaggerInlineType227  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface ISwaggerInlineType226  {
        table? : ISwaggerInlineType227;
   
    }
         
    export interface ISwaggerInlineType229  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface ISwaggerInlineType228  {
        table? : ISwaggerInlineType229;
   
    }
         
    export interface ISwaggerInlineType230  {
        queryString? : string;
        tableName? : string;
        connectionString? : string;
        providerName? : string;
        schemaName? : string;
        originalTableName? : string;
   
    }
         
    export interface ISwaggerInlineType232  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ISwaggerInlineType231  {
        tables? : Array<ISwaggerInlineType232>;
   
    }
         
    export interface ISwaggerInlineType234  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ISwaggerInlineType233  {
        table? : ISwaggerInlineType234;
   
    }
         
    export interface ISwaggerInlineType235  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ISwaggerInlineType237  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ISwaggerInlineType236  {
        table? : ISwaggerInlineType237;
   
    }
         
    export interface ISwaggerInlineType239  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ISwaggerInlineType238  {
        table? : ISwaggerInlineType239;
   
    }
         
    export interface ISwaggerInlineType241  {
        queryString? : string;
        tableName? : string;
   
    }
         
    export interface ISwaggerInlineType240  {
        table? : ISwaggerInlineType241;
   
    }
         
    export interface ISwaggerInlineType242  {
        queryString? : string;
   
    }
         
    export interface ISwaggerInlineType244  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType243  {
        fields? : Array<ISwaggerInlineType244>;
   
    }
         
    export interface ISwaggerInlineType246  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType245  {
        field? : ISwaggerInlineType246;
   
    }
         
    export interface ISwaggerInlineType247  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType249  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType248  {
        field? : ISwaggerInlineType249;
   
    }
         
    export interface ISwaggerInlineType251  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType250  {
        field? : ISwaggerInlineType251;
   
    }
         
    export interface ISwaggerInlineType253  {
        queryString? : string;
        fieldName? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType252  {
        field? : ISwaggerInlineType253;
   
    }
         
    export interface ISwaggerInlineType254  {
        queryString? : string;
        fieldType? : string;
   
    }
         
    export interface ISwaggerInlineType256  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface ISwaggerInlineType255  {
        relations? : Array<ISwaggerInlineType256>;
   
    }
         
    export interface ISwaggerInlineType258  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface ISwaggerInlineType257  {
        relation? : ISwaggerInlineType258;
   
    }
         
    export interface ISwaggerInlineType259  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface ISwaggerInlineType261  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface ISwaggerInlineType260  {
        relation? : ISwaggerInlineType261;
   
    }
         
    export interface ISwaggerInlineType262  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface ISwaggerInlineType264  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
   
    }
         
    export interface ISwaggerInlineType263  {
        relation? : ISwaggerInlineType264;
   
    }
         
    export interface ISwaggerInlineType265  {
        sourceField? : string;
        targetTable? : string;
        targetField? : string;
        newTargetTable? : string;
        newTargetField? : string;
   
    }
         
    export interface ISwaggerInlineType267  {
        DefaultDataDirectory? : string;
        ElasticubeMemoryAllocation? : number;
        DataImportChunkSize? : number;
        SimultaneousQueryExecutions? : number;
        QueryTimeout? : number;
        RecycleQueries? : boolean;
        RserverEnabled? : boolean;
        Rserver? : string;
   
    }
         
    export interface ISwaggerInlineType266  {
        serverSettings? : ISwaggerInlineType267;
   
    }
         
    export interface ISwaggerInlineType269  {
        DefaultDataDirectory? : string;
        ElasticubeMemoryAllocation? : number;
        DataImportChunkSize? : number;
        SimultaneousQueryExecutions? : number;
        QueryTimeout? : number;
        RecycleQueries? : boolean;
        RserverEnabled? : boolean;
        Rserver? : string;
   
    }
         
    export interface ISwaggerInlineType268  {
        serverSettings? : ISwaggerInlineType269;
   
    }
         
    export interface ISwaggerInlineType270  {
        DefaultDataDirectory? : string;
        ElasticubeMemoryAllocation? : number;
        DataImportChunkSize? : number;
        SimultaneousQueryExecutions? : number;
        QueryTimeout? : number;
        RecycleQueries? : boolean;
        RserverEnabled? : boolean;
        Rserver? : string;
   
    }
         
    export interface ISwaggerInlineType271  {
        /*
         * Fiscal Year.
         */
        fiscal? : string;
   
    }
         
    export interface ISwaggerInlineType272  {
        elasticube? : string;
        server? : string;
   
    }
         
    export interface ISwaggerInlineType274  {
        id? : string;
        accessAllowed? : boolean;
        email? : string;
   
    }
         
    export interface ISwaggerInlineType275  {
        id? : string;
        accessAllowed? : boolean;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType273  {
        dataset? : string;
        server? : string;
        elasticube? : string;
        allMembersAllowed? : boolean;
        users? : Array<ISwaggerInlineType274>;
        groups? : Array<ISwaggerInlineType275>;
   
    }
         
    export interface ISwaggerInlineType277  {
        id? : string;
        email? : string;
   
    }
         
    export interface ISwaggerInlineType278  {
        id? : string;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType276  {
        dataset? : string;
        server? : string;
        elasticube? : string;
        users? : Array<ISwaggerInlineType277>;
        groups? : Array<ISwaggerInlineType278>;
   
    }
         
    export interface ISwaggerInlineType280  {
        partyId? : string;
        type? : string;
        email? : string;
   
    }
         
    export interface ISwaggerInlineType279  {
        server? : string;
        elasticube? : string;
        shares? : Array<ISwaggerInlineType280>;
   
    }
         
    export interface ISwaggerInlineType282  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType281  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType282;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType284  {
        localeId? : string;
   
    }
         
    export interface ISwaggerInlineType283  {
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        groups? : Array<string>;
        preferences? : ISwaggerInlineType284;
        uiSettings? : any;
   
    }
         
    export interface ISwaggerInlineType286  {
        localeId? : string;
   
    }
         
    export interface ISwaggerInlineType285  {
        userName? : string;
        roleId? : string;
        groups? : Array<string>;
        objectSid? : string;
        preferences? : ISwaggerInlineType286;
        uiSettings? : any;
   
    }
         
    export interface ISwaggerInlineType288  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType287  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType288;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType289  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType291  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType290  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType291;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType293  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType292  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType293;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType295  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType294  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType295;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType297  {
        localeId? : string;
   
    }
         
    export interface ISwaggerInlineType296  {
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        groups? : Array<string>;
        preferences? : ISwaggerInlineType297;
        uiSettings? : any;
   
    }
         
    export interface ISwaggerInlineType299  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType298  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType299;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType300  {
        deviceId? : string;
        token? : string;
   
    }
         
    export interface ISwaggerInlineType302  {
        localeId? : string;
        language? : string;
   
    }
         
    export interface ISwaggerInlineType301  {
        _id? : string;
        email? : string;
        userName? : string;
        firstName? : string;
        lastName? : string;
        roleId? : string;
        active? : boolean;
        groups? : Array<string>;
        adgroups? : Array<string>;
        activeDirectory? : boolean;
        principalName? : string;
        objectSid? : string;
        uSNChanged? : string;
        dn? : string;
        preferences? : ISwaggerInlineType302;
        uiSettings? : any;
        created? : Date;
        lastLogin? : string;
        lastUpdated? : Date;
        pendingExpiration? : Date;
        createdSso? : string;
   
    }
         
    export interface ISwaggerInlineType303  {
        deviceId? : string;
        token? : string;
   
    }
         
    export interface ISwaggerInlineType304  {
        _id? : string;
        name? : string;
        language? : string;
        mail? : string;
        ad? : boolean;
        roleId? : string;
        defaultRole? : string;
        objectSid? : string;
        dn? : string;
        uSNChanged? : string;
        created? : Date;
        lastUpdated? : Date;
   
    }
         
    export interface ISwaggerInlineType305  {
        name? : string;
   
    }
         
    export interface ISwaggerInlineType306  {
        name? : string;
        cn? : string;
        roleId? : string;
        objectSid? : string;
        dn? : string;
   
    }
         
    export interface ISwaggerInlineType307  {
        _id? : string;
        name? : string;
        language? : string;
        mail? : string;
        ad? : boolean;
        roleId? : string;
        defaultRole? : string;
        objectSid? : string;
        dn? : string;
        uSNChanged? : string;
        created? : Date;
        lastUpdated? : Date;
   
    }
         
    export interface ISwaggerInlineType309  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType311  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType310  {
        name? : string;
        palette? : ISwaggerInlineType311;
   
    }
         
    export interface ISwaggerInlineType312  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType314  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType313  {
        jaql? : ISwaggerInlineType314;
   
    }
         
    export interface ISwaggerInlineType319  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType318  {
        elements? : Array<ISwaggerInlineType319>;
   
    }
         
    export interface ISwaggerInlineType317  {
        subcells? : Array<ISwaggerInlineType318>;
   
    }
         
    export interface ISwaggerInlineType316  {
        width? : number;
        cells? : Array<ISwaggerInlineType317>;
   
    }
         
    export interface ISwaggerInlineType315  {
        type? : string;
        columns? : Array<ISwaggerInlineType316>;
   
    }
         
    export interface ISwaggerInlineType325  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType324  {
        elements? : Array<ISwaggerInlineType325>;
   
    }
         
    export interface ISwaggerInlineType323  {
        subcells? : Array<ISwaggerInlineType324>;
   
    }
         
    export interface ISwaggerInlineType322  {
        width? : number;
        cells? : Array<ISwaggerInlineType323>;
   
    }
         
    export interface ISwaggerInlineType321  {
        type? : string;
        columns? : Array<ISwaggerInlineType322>;
   
    }
         
    export interface ISwaggerInlineType320  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType321>;
   
    }
         
    export interface ISwaggerInlineType327  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType326  {
        jaql? : ISwaggerInlineType327;
   
    }
         
    export interface ISwaggerInlineType308  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType309>;
        style? : ISwaggerInlineType310;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType312;
        filters? : Array<ISwaggerInlineType313>;
        instanceType? : string;
        layout? : ISwaggerInlineType315;
        previewLayout? : Array<ISwaggerInlineType320>;
        defaultFilters? : Array<ISwaggerInlineType326>;
   
    }
         
    export interface ISwaggerInlineType329  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType331  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType330  {
        jaql? : ISwaggerInlineType331;
   
    }
         
    export interface ISwaggerInlineType336  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType335  {
        elements? : Array<ISwaggerInlineType336>;
   
    }
         
    export interface ISwaggerInlineType334  {
        subcells? : Array<ISwaggerInlineType335>;
   
    }
         
    export interface ISwaggerInlineType333  {
        width? : number;
        cells? : Array<ISwaggerInlineType334>;
   
    }
         
    export interface ISwaggerInlineType332  {
        type? : string;
        columns? : Array<ISwaggerInlineType333>;
   
    }
         
    export interface ISwaggerInlineType342  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType341  {
        elements? : Array<ISwaggerInlineType342>;
   
    }
         
    export interface ISwaggerInlineType340  {
        subcells? : Array<ISwaggerInlineType341>;
   
    }
         
    export interface ISwaggerInlineType339  {
        width? : number;
        cells? : Array<ISwaggerInlineType340>;
   
    }
         
    export interface ISwaggerInlineType338  {
        type? : string;
        columns? : Array<ISwaggerInlineType339>;
   
    }
         
    export interface ISwaggerInlineType337  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType338>;
   
    }
         
    export interface ISwaggerInlineType344  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType343  {
        jaql? : ISwaggerInlineType344;
   
    }
         
    export interface ISwaggerInlineType328  {
        title? : string;
        desc? : string;
        parentFolder? : string;
        datasource? : ISwaggerInlineType329;
        filters? : Array<ISwaggerInlineType330>;
        layout? : ISwaggerInlineType332;
        previewLayout? : Array<ISwaggerInlineType337>;
        defaultFilters? : Array<ISwaggerInlineType343>;
   
    }
         
    export interface ISwaggerInlineType346  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType348  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType347  {
        name? : string;
        palette? : ISwaggerInlineType348;
   
    }
         
    export interface ISwaggerInlineType349  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType351  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType350  {
        jaql? : ISwaggerInlineType351;
   
    }
         
    export interface ISwaggerInlineType356  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType355  {
        elements? : Array<ISwaggerInlineType356>;
   
    }
         
    export interface ISwaggerInlineType354  {
        subcells? : Array<ISwaggerInlineType355>;
   
    }
         
    export interface ISwaggerInlineType353  {
        width? : number;
        cells? : Array<ISwaggerInlineType354>;
   
    }
         
    export interface ISwaggerInlineType352  {
        type? : string;
        columns? : Array<ISwaggerInlineType353>;
   
    }
         
    export interface ISwaggerInlineType362  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType361  {
        elements? : Array<ISwaggerInlineType362>;
   
    }
         
    export interface ISwaggerInlineType360  {
        subcells? : Array<ISwaggerInlineType361>;
   
    }
         
    export interface ISwaggerInlineType359  {
        width? : number;
        cells? : Array<ISwaggerInlineType360>;
   
    }
         
    export interface ISwaggerInlineType358  {
        type? : string;
        columns? : Array<ISwaggerInlineType359>;
   
    }
         
    export interface ISwaggerInlineType357  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType358>;
   
    }
         
    export interface ISwaggerInlineType364  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType363  {
        jaql? : ISwaggerInlineType364;
   
    }
         
    export interface ISwaggerInlineType345  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType346>;
        style? : ISwaggerInlineType347;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType349;
        filters? : Array<ISwaggerInlineType350>;
        instanceType? : string;
        layout? : ISwaggerInlineType352;
        previewLayout? : Array<ISwaggerInlineType357>;
        defaultFilters? : Array<ISwaggerInlineType363>;
   
    }
         
    export interface ISwaggerInlineType366  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType368  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType367  {
        jaql? : ISwaggerInlineType368;
   
    }
         
    export interface ISwaggerInlineType373  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType372  {
        elements? : Array<ISwaggerInlineType373>;
   
    }
         
    export interface ISwaggerInlineType371  {
        subcells? : Array<ISwaggerInlineType372>;
   
    }
         
    export interface ISwaggerInlineType370  {
        width? : number;
        cells? : Array<ISwaggerInlineType371>;
   
    }
         
    export interface ISwaggerInlineType369  {
        type? : string;
        columns? : Array<ISwaggerInlineType370>;
   
    }
         
    export interface ISwaggerInlineType379  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType378  {
        elements? : Array<ISwaggerInlineType379>;
   
    }
         
    export interface ISwaggerInlineType377  {
        subcells? : Array<ISwaggerInlineType378>;
   
    }
         
    export interface ISwaggerInlineType376  {
        width? : number;
        cells? : Array<ISwaggerInlineType377>;
   
    }
         
    export interface ISwaggerInlineType375  {
        type? : string;
        columns? : Array<ISwaggerInlineType376>;
   
    }
         
    export interface ISwaggerInlineType374  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType375>;
   
    }
         
    export interface ISwaggerInlineType381  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType380  {
        jaql? : ISwaggerInlineType381;
   
    }
         
    export interface ISwaggerInlineType365  {
        title? : string;
        desc? : string;
        parentFolder? : string;
        datasource? : ISwaggerInlineType366;
        filters? : Array<ISwaggerInlineType367>;
        layout? : ISwaggerInlineType369;
        previewLayout? : Array<ISwaggerInlineType374>;
        defaultFilters? : Array<ISwaggerInlineType380>;
   
    }
         
    export interface ISwaggerInlineType383  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType385  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType384  {
        name? : string;
        palette? : ISwaggerInlineType385;
   
    }
         
    export interface ISwaggerInlineType386  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType388  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType387  {
        jaql? : ISwaggerInlineType388;
   
    }
         
    export interface ISwaggerInlineType393  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType392  {
        elements? : Array<ISwaggerInlineType393>;
   
    }
         
    export interface ISwaggerInlineType391  {
        subcells? : Array<ISwaggerInlineType392>;
   
    }
         
    export interface ISwaggerInlineType390  {
        width? : number;
        cells? : Array<ISwaggerInlineType391>;
   
    }
         
    export interface ISwaggerInlineType389  {
        type? : string;
        columns? : Array<ISwaggerInlineType390>;
   
    }
         
    export interface ISwaggerInlineType399  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType398  {
        elements? : Array<ISwaggerInlineType399>;
   
    }
         
    export interface ISwaggerInlineType397  {
        subcells? : Array<ISwaggerInlineType398>;
   
    }
         
    export interface ISwaggerInlineType396  {
        width? : number;
        cells? : Array<ISwaggerInlineType397>;
   
    }
         
    export interface ISwaggerInlineType395  {
        type? : string;
        columns? : Array<ISwaggerInlineType396>;
   
    }
         
    export interface ISwaggerInlineType394  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType395>;
   
    }
         
    export interface ISwaggerInlineType401  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType400  {
        jaql? : ISwaggerInlineType401;
   
    }
         
    export interface ISwaggerInlineType382  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType383>;
        style? : ISwaggerInlineType384;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType386;
        filters? : Array<ISwaggerInlineType387>;
        instanceType? : string;
        layout? : ISwaggerInlineType389;
        previewLayout? : Array<ISwaggerInlineType394>;
        defaultFilters? : Array<ISwaggerInlineType400>;
   
    }
         
    export interface ISwaggerInlineType403  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType405  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType404  {
        name? : string;
        palette? : ISwaggerInlineType405;
   
    }
         
    export interface ISwaggerInlineType406  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType408  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType407  {
        jaql? : ISwaggerInlineType408;
   
    }
         
    export interface ISwaggerInlineType413  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType412  {
        elements? : Array<ISwaggerInlineType413>;
   
    }
         
    export interface ISwaggerInlineType411  {
        subcells? : Array<ISwaggerInlineType412>;
   
    }
         
    export interface ISwaggerInlineType410  {
        width? : number;
        cells? : Array<ISwaggerInlineType411>;
   
    }
         
    export interface ISwaggerInlineType409  {
        type? : string;
        columns? : Array<ISwaggerInlineType410>;
   
    }
         
    export interface ISwaggerInlineType419  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType418  {
        elements? : Array<ISwaggerInlineType419>;
   
    }
         
    export interface ISwaggerInlineType417  {
        subcells? : Array<ISwaggerInlineType418>;
   
    }
         
    export interface ISwaggerInlineType416  {
        width? : number;
        cells? : Array<ISwaggerInlineType417>;
   
    }
         
    export interface ISwaggerInlineType415  {
        type? : string;
        columns? : Array<ISwaggerInlineType416>;
   
    }
         
    export interface ISwaggerInlineType414  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType415>;
   
    }
         
    export interface ISwaggerInlineType421  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType420  {
        jaql? : ISwaggerInlineType421;
   
    }
         
    export interface ISwaggerInlineType402  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType403>;
        style? : ISwaggerInlineType404;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType406;
        filters? : Array<ISwaggerInlineType407>;
        instanceType? : string;
        layout? : ISwaggerInlineType409;
        previewLayout? : Array<ISwaggerInlineType414>;
        defaultFilters? : Array<ISwaggerInlineType420>;
   
    }
         
    export interface ISwaggerInlineType423  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType425  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType424  {
        name? : string;
        palette? : ISwaggerInlineType425;
   
    }
         
    export interface ISwaggerInlineType426  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType428  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType427  {
        jaql? : ISwaggerInlineType428;
   
    }
         
    export interface ISwaggerInlineType433  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType432  {
        elements? : Array<ISwaggerInlineType433>;
   
    }
         
    export interface ISwaggerInlineType431  {
        subcells? : Array<ISwaggerInlineType432>;
   
    }
         
    export interface ISwaggerInlineType430  {
        width? : number;
        cells? : Array<ISwaggerInlineType431>;
   
    }
         
    export interface ISwaggerInlineType429  {
        type? : string;
        columns? : Array<ISwaggerInlineType430>;
   
    }
         
    export interface ISwaggerInlineType439  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType438  {
        elements? : Array<ISwaggerInlineType439>;
   
    }
         
    export interface ISwaggerInlineType437  {
        subcells? : Array<ISwaggerInlineType438>;
   
    }
         
    export interface ISwaggerInlineType436  {
        width? : number;
        cells? : Array<ISwaggerInlineType437>;
   
    }
         
    export interface ISwaggerInlineType435  {
        type? : string;
        columns? : Array<ISwaggerInlineType436>;
   
    }
         
    export interface ISwaggerInlineType434  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType435>;
   
    }
         
    export interface ISwaggerInlineType441  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType440  {
        jaql? : ISwaggerInlineType441;
   
    }
         
    export interface ISwaggerInlineType422  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType423>;
        style? : ISwaggerInlineType424;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType426;
        filters? : Array<ISwaggerInlineType427>;
        instanceType? : string;
        layout? : ISwaggerInlineType429;
        previewLayout? : Array<ISwaggerInlineType434>;
        defaultFilters? : Array<ISwaggerInlineType440>;
   
    }
         
    export interface ISwaggerInlineType442  {
        exists? : boolean;
   
    }
         
    export interface ISwaggerInlineType444  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType446  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType445  {
        name? : string;
        palette? : ISwaggerInlineType446;
   
    }
         
    export interface ISwaggerInlineType447  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType449  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType448  {
        jaql? : ISwaggerInlineType449;
   
    }
         
    export interface ISwaggerInlineType454  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType453  {
        elements? : Array<ISwaggerInlineType454>;
   
    }
         
    export interface ISwaggerInlineType452  {
        subcells? : Array<ISwaggerInlineType453>;
   
    }
         
    export interface ISwaggerInlineType451  {
        width? : number;
        cells? : Array<ISwaggerInlineType452>;
   
    }
         
    export interface ISwaggerInlineType450  {
        type? : string;
        columns? : Array<ISwaggerInlineType451>;
   
    }
         
    export interface ISwaggerInlineType460  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType459  {
        elements? : Array<ISwaggerInlineType460>;
   
    }
         
    export interface ISwaggerInlineType458  {
        subcells? : Array<ISwaggerInlineType459>;
   
    }
         
    export interface ISwaggerInlineType457  {
        width? : number;
        cells? : Array<ISwaggerInlineType458>;
   
    }
         
    export interface ISwaggerInlineType456  {
        type? : string;
        columns? : Array<ISwaggerInlineType457>;
   
    }
         
    export interface ISwaggerInlineType455  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType456>;
   
    }
         
    export interface ISwaggerInlineType462  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType461  {
        jaql? : ISwaggerInlineType462;
   
    }
         
    export interface ISwaggerInlineType443  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType444>;
        style? : ISwaggerInlineType445;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType447;
        filters? : Array<ISwaggerInlineType448>;
        instanceType? : string;
        layout? : ISwaggerInlineType450;
        previewLayout? : Array<ISwaggerInlineType455>;
        defaultFilters? : Array<ISwaggerInlineType461>;
   
    }
         
    export interface ISwaggerInlineType463  {
        ownerId? : string;
        originalOwnerRule? : string;
   
    }
         
    export interface ISwaggerInlineType465  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType467  {
        colors? : Array<string>;
        name? : string;
        isSystem? : boolean;
   
    }
         
    export interface ISwaggerInlineType466  {
        name? : string;
        palette? : ISwaggerInlineType467;
   
    }
         
    export interface ISwaggerInlineType468  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType470  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType469  {
        jaql? : ISwaggerInlineType470;
   
    }
         
    export interface ISwaggerInlineType475  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType474  {
        elements? : Array<ISwaggerInlineType475>;
   
    }
         
    export interface ISwaggerInlineType473  {
        subcells? : Array<ISwaggerInlineType474>;
   
    }
         
    export interface ISwaggerInlineType472  {
        width? : number;
        cells? : Array<ISwaggerInlineType473>;
   
    }
         
    export interface ISwaggerInlineType471  {
        type? : string;
        columns? : Array<ISwaggerInlineType472>;
   
    }
         
    export interface ISwaggerInlineType481  {
        widgetId? : string;
        minHeight? : number;
        maxHeight? : number;
        minWidth? : number;
        maxWidth? : number;
        height? : number;
        defaultWidth? : number;
   
    }
         
    export interface ISwaggerInlineType480  {
        elements? : Array<ISwaggerInlineType481>;
   
    }
         
    export interface ISwaggerInlineType479  {
        subcells? : Array<ISwaggerInlineType480>;
   
    }
         
    export interface ISwaggerInlineType478  {
        width? : number;
        cells? : Array<ISwaggerInlineType479>;
   
    }
         
    export interface ISwaggerInlineType477  {
        type? : string;
        columns? : Array<ISwaggerInlineType478>;
   
    }
         
    export interface ISwaggerInlineType476  {
        type? : string;
        format? : string;
        orientation? : string;
        layout? : string;
        headerSize? : string;
        title? : boolean;
        elasticubeBuilt? : boolean;
        elasticubeName? : boolean;
        filters? : boolean;
        logo? : boolean;
        pageNumbers? : boolean;
        pages? : Array<ISwaggerInlineType477>;
   
    }
         
    export interface ISwaggerInlineType483  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType482  {
        jaql? : ISwaggerInlineType483;
   
    }
         
    export interface ISwaggerInlineType464  {
        title? : string;
        desc? : string;
        oid? : string;
        source? : string;
        parentFolder? : string;
        type? : string;
        shares? : Array<ISwaggerInlineType465>;
        style? : ISwaggerInlineType466;
        owner? : string;
        userId? : string;
        created? : Date;
        lastUpdated? : Date;
        datasource? : ISwaggerInlineType468;
        filters? : Array<ISwaggerInlineType469>;
        instanceType? : string;
        layout? : ISwaggerInlineType471;
        previewLayout? : Array<ISwaggerInlineType476>;
        defaultFilters? : Array<ISwaggerInlineType482>;
   
    }
         
    export interface ISwaggerInlineType484  {
        ownerId? : string;
        originalOwnerRule? : string;
   
    }
         
    export interface ISwaggerInlineType486  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType490  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType491  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType489  {
        jaql? : ISwaggerInlineType490;
        field? : ISwaggerInlineType491;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType488  {
        name? : string;
        items? : Array<ISwaggerInlineType489>;
   
    }
         
    export interface ISwaggerInlineType487  {
        panels? : Array<ISwaggerInlineType488>;
   
    }
         
    export interface ISwaggerInlineType492  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType485  {
        title? : string;
        oid? : string;
        desc? : string;
        datasource? : ISwaggerInlineType486;
        type? : string;
        subtype? : string;
        dashboardid? : string;
        owner? : string;
        userId? : string;
        instanceType? : string;
        lastUpdated? : Date;
        metadata? : ISwaggerInlineType487;
        shares? : Array<ISwaggerInlineType492>;
   
    }
         
    export interface ISwaggerInlineType494  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType498  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType499  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType497  {
        jaql? : ISwaggerInlineType498;
        field? : ISwaggerInlineType499;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType496  {
        name? : string;
        items? : Array<ISwaggerInlineType497>;
   
    }
         
    export interface ISwaggerInlineType495  {
        panels? : Array<ISwaggerInlineType496>;
   
    }
         
    export interface ISwaggerInlineType493  {
        title? : string;
        desc? : string;
        datasource? : ISwaggerInlineType494;
        type? : string;
        subtype? : string;
        metadata? : ISwaggerInlineType495;
   
    }
         
    export interface ISwaggerInlineType501  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType505  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType506  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType504  {
        jaql? : ISwaggerInlineType505;
        field? : ISwaggerInlineType506;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType503  {
        name? : string;
        items? : Array<ISwaggerInlineType504>;
   
    }
         
    export interface ISwaggerInlineType502  {
        panels? : Array<ISwaggerInlineType503>;
   
    }
         
    export interface ISwaggerInlineType507  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType500  {
        title? : string;
        oid? : string;
        desc? : string;
        datasource? : ISwaggerInlineType501;
        type? : string;
        subtype? : string;
        dashboardid? : string;
        owner? : string;
        userId? : string;
        instanceType? : string;
        lastUpdated? : Date;
        metadata? : ISwaggerInlineType502;
        shares? : Array<ISwaggerInlineType507>;
   
    }
         
    export interface ISwaggerInlineType509  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType513  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType514  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType512  {
        jaql? : ISwaggerInlineType513;
        field? : ISwaggerInlineType514;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType511  {
        name? : string;
        items? : Array<ISwaggerInlineType512>;
   
    }
         
    export interface ISwaggerInlineType510  {
        panels? : Array<ISwaggerInlineType511>;
   
    }
         
    export interface ISwaggerInlineType515  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType508  {
        title? : string;
        oid? : string;
        desc? : string;
        datasource? : ISwaggerInlineType509;
        type? : string;
        subtype? : string;
        dashboardid? : string;
        owner? : string;
        userId? : string;
        instanceType? : string;
        lastUpdated? : Date;
        metadata? : ISwaggerInlineType510;
        shares? : Array<ISwaggerInlineType515>;
   
    }
         
    export interface ISwaggerInlineType517  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType521  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType522  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType520  {
        jaql? : ISwaggerInlineType521;
        field? : ISwaggerInlineType522;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType519  {
        name? : string;
        items? : Array<ISwaggerInlineType520>;
   
    }
         
    export interface ISwaggerInlineType518  {
        panels? : Array<ISwaggerInlineType519>;
   
    }
         
    export interface ISwaggerInlineType523  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType516  {
        title? : string;
        oid? : string;
        desc? : string;
        datasource? : ISwaggerInlineType517;
        type? : string;
        subtype? : string;
        dashboardid? : string;
        owner? : string;
        userId? : string;
        instanceType? : string;
        lastUpdated? : Date;
        metadata? : ISwaggerInlineType518;
        shares? : Array<ISwaggerInlineType523>;
   
    }
         
    export interface ISwaggerInlineType524  {
        title? : string;
        id? : string;
        address? : string;
        database? : string;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType526  {
        token? : string;
        deviceId? : string;
        cookieType? : string;
        userName? : string;
        expiration? : string;
        issueDate? : string;
   
    }
         
    export interface ISwaggerInlineType527  {
        id? : string;
        action? : string;
   
    }
         
    export interface ISwaggerInlineType525  {
        server? : string;
        authorization? : ISwaggerInlineType526;
        dashboards? : Array<ISwaggerInlineType527>;
   
    }
         
    export interface ISwaggerInlineType528  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType529  {
        shareId? : string;
        type? : string;
        rule? : string;
        subscribe? : boolean;
   
    }
         
    export interface ISwaggerInlineType530  {
        email? : string;
   
    }
         
    export interface ISwaggerInlineType531  {
        userName? : string;
   
    }
         
    export interface ISwaggerInlineType532  {
        password? : string;
   
    }
         
    export interface ISwaggerInlineType533  {
        userName? : string;
   
    }
         
    export interface ISwaggerInlineType534  {
        password? : string;
   
    }
         
    export interface ISwaggerInlineType535  {
        email? : string;
   
    }
         
    export interface ISwaggerInlineType536  {
        bigData? : boolean;
        expirationDate? : string;
        highAvailability? : boolean;
        inUseAdmins? : number;
        inUseDesigners? : number;
        inUseViewers? : number;
        maxAdmins? : number;
        maxDesigners? : number;
        maxViewers? : number;
        trial? : boolean;
   
    }
         
    export interface ISwaggerInlineType538  {
        isBigData? : boolean;
        version? : string;
   
    }
         
    export interface ISwaggerInlineType539  {
        isMobileEnabled? : boolean;
        isExpired? : boolean;
   
    }
         
    export interface ISwaggerInlineType537  {
        version? : ISwaggerInlineType538;
        license? : ISwaggerInlineType539;
   
    }
         
    export interface ISwaggerInlineType540  {
        success? : boolean;
        message? : string;
        access_token? : string;
        profile? : any;
   
    }
         
    export interface ISwaggerInlineType541  {
        token? : string;
        cookieType? : string;
        server? : string;
        userName? : string;
        deviceId? : string;
        expiration? : string;
        issueDate? : string;
   
    }
         
    export interface ISwaggerInlineType542  {
        serverName? : string;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType543  {
        userName? : string;
        password? : string;
   
    }
         
    export interface ISwaggerInlineType544  {
        serverName? : string;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType545  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType546  {
        name? : string;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType547  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType548  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType549  {
        name? : string;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType550  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType551  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType552  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType553  {
        name? : string;
        oid? : string;
        owner? : string;
        type? : string;
        userId? : string;
        instanceType? : string;
        created? : Date;
        lastUpdated? : Date;
        parentId? : string;
   
    }
         
    export interface ISwaggerInlineType555  {
        type? : string;
        recipient? : string;
   
    }
         
    export interface ISwaggerInlineType558  {
        paperFormat? : string;
        paperOrientation? : string;
        layout? : string;
        showNarration? : boolean;
   
    }
         
    export interface ISwaggerInlineType557  {
        includeTitle? : boolean;
        includeFilters? : boolean;
        includeDS? : boolean;
        renderingInfo? : ISwaggerInlineType558;
   
    }
         
    export interface ISwaggerInlineType556  {
        inline? : boolean;
        pdf? : ISwaggerInlineType557;
   
    }
         
    export interface ISwaggerInlineType554  {
        assetId? : string;
        assetType? : string;
        recipients? : Array<ISwaggerInlineType555>;
        preferences? : ISwaggerInlineType556;
   
    }
         
    export interface ISwaggerInlineType560  {
        values? : Array<number>;
   
    }
         
    export interface ISwaggerInlineType561  {
        name? : string;
        oid? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType559  {
        _id? : string;
        time? : Date;
        url? : string;
        context? : ISwaggerInlineType560;
        by? : ISwaggerInlineType561;
        seen? : boolean;
        hide? : boolean;
        alert? : string;
   
    }
         
    export interface ISwaggerInlineType563  {
        dateFrom? : Date;
        dateTo? : Date;
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface ISwaggerInlineType564  {
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface ISwaggerInlineType562  {
        query? : ISwaggerInlineType563;
        update? : ISwaggerInlineType564;
   
    }
         
    export interface ISwaggerInlineType566  {
        values? : Array<number>;
   
    }
         
    export interface ISwaggerInlineType567  {
        name? : string;
        oid? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType565  {
        _id? : string;
        time? : Date;
        url? : string;
        context? : ISwaggerInlineType566;
        by? : ISwaggerInlineType567;
        seen? : boolean;
        hide? : boolean;
        alert? : string;
   
    }
         
    export interface ISwaggerInlineType568  {
        seen? : boolean;
        hide? : boolean;
   
    }
         
    export interface ISwaggerInlineType570  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType574  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType575  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType573  {
        measures? : Array<ISwaggerInlineType574>;
        filters? : Array<ISwaggerInlineType575>;
   
    }
         
    export interface ISwaggerInlineType572  {
        datasource? : any;
        metadata? : ISwaggerInlineType573;
   
    }
         
    export interface ISwaggerInlineType576  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType577  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType571  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        kpi? : ISwaggerInlineType572;
        dashboard? : string;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType576;
        locale? : string;
        sources? : Array<ISwaggerInlineType577>;
   
    }
         
    export interface ISwaggerInlineType579  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType580  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType581  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType578  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType579;
        zapier? : ISwaggerInlineType580;
        webhooks? : Array<ISwaggerInlineType581>;
   
    }
         
    export interface ISwaggerInlineType569  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType570>;
        disabledUsers? : Array<string>;
        category? : string;
        type? : string;
        owner? : string;
        context? : ISwaggerInlineType571;
        action? : ISwaggerInlineType578;
   
    }
         
    export interface ISwaggerInlineType583  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType587  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType588  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType586  {
        measures? : Array<ISwaggerInlineType587>;
        filters? : Array<ISwaggerInlineType588>;
   
    }
         
    export interface ISwaggerInlineType585  {
        datasource? : any;
        metadata? : ISwaggerInlineType586;
   
    }
         
    export interface ISwaggerInlineType589  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType590  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType584  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        kpi? : ISwaggerInlineType585;
        dashboard? : string;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType589;
        locale? : string;
        sources? : Array<ISwaggerInlineType590>;
   
    }
         
    export interface ISwaggerInlineType592  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType593  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType594  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType591  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType592;
        zapier? : ISwaggerInlineType593;
        webhooks? : Array<ISwaggerInlineType594>;
   
    }
         
    export interface ISwaggerInlineType582  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType583>;
        disabledUsers? : Array<string>;
        category? : string;
        type? : string;
        owner? : string;
        context? : ISwaggerInlineType584;
        action? : ISwaggerInlineType591;
   
    }
         
    export interface ISwaggerInlineType596  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType600  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType601  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType599  {
        measures? : Array<ISwaggerInlineType600>;
        filters? : Array<ISwaggerInlineType601>;
   
    }
         
    export interface ISwaggerInlineType598  {
        datasource? : any;
        metadata? : ISwaggerInlineType599;
   
    }
         
    export interface ISwaggerInlineType602  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType603  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType597  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        kpi? : ISwaggerInlineType598;
        dashboard? : string;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType602;
        locale? : string;
        sources? : Array<ISwaggerInlineType603>;
   
    }
         
    export interface ISwaggerInlineType605  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType606  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType607  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType604  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType605;
        zapier? : ISwaggerInlineType606;
        webhooks? : Array<ISwaggerInlineType607>;
   
    }
         
    export interface ISwaggerInlineType595  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType596>;
        disabledUsers? : Array<string>;
        category? : string;
        type? : string;
        owner? : string;
        context? : ISwaggerInlineType597;
        action? : ISwaggerInlineType604;
   
    }
         
    export interface ISwaggerInlineType609  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType613  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType614  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType612  {
        measures? : Array<ISwaggerInlineType613>;
        filters? : Array<ISwaggerInlineType614>;
   
    }
         
    export interface ISwaggerInlineType611  {
        datasource? : any;
        metadata? : ISwaggerInlineType612;
   
    }
         
    export interface ISwaggerInlineType615  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType616  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType610  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        kpi? : ISwaggerInlineType611;
        dashboard? : string;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType615;
        locale? : string;
        sources? : Array<ISwaggerInlineType616>;
   
    }
         
    export interface ISwaggerInlineType618  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType619  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType620  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType617  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType618;
        zapier? : ISwaggerInlineType619;
        webhooks? : Array<ISwaggerInlineType620>;
   
    }
         
    export interface ISwaggerInlineType608  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType609>;
        disabledUsers? : Array<string>;
        category? : string;
        type? : string;
        owner? : string;
        context? : ISwaggerInlineType610;
        action? : ISwaggerInlineType617;
   
    }
         
    export interface ISwaggerInlineType622  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType624  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType625  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType623  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType624;
        sources? : Array<ISwaggerInlineType625>;
   
    }
         
    export interface ISwaggerInlineType627  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType628  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType629  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType626  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType627;
        zapier? : ISwaggerInlineType628;
        webhooks? : Array<ISwaggerInlineType629>;
   
    }
         
    export interface ISwaggerInlineType621  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType622>;
        context? : ISwaggerInlineType623;
        action? : ISwaggerInlineType626;
   
    }
         
    export interface ISwaggerInlineType630  {
        count? : number;
   
    }
         
    export interface ISwaggerInlineType632  {
        type? : string;
        id? : string;
   
    }
         
    export interface ISwaggerInlineType636  {
        jaql? : any;
        format? : any;
   
    }
         
    export interface ISwaggerInlineType637  {
        jaql? : any;
        panel? : string;
   
    }
         
    export interface ISwaggerInlineType635  {
        measures? : Array<ISwaggerInlineType636>;
        filters? : Array<ISwaggerInlineType637>;
   
    }
         
    export interface ISwaggerInlineType634  {
        datasource? : any;
        metadata? : ISwaggerInlineType635;
   
    }
         
    export interface ISwaggerInlineType638  {
        type? : string;
        leftOperand? : number;
        operator? : string;
        rightOperand? : number;
   
    }
         
    export interface ISwaggerInlineType639  {
        name? : string;
        oid? : string;
        server? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType633  {
        backToNormal? : boolean;
        buildSuccessAfterFailed? : boolean;
        buildSuccess? : boolean;
        buildFailed? : boolean;
        kpi? : ISwaggerInlineType634;
        dashboard? : string;
        notifyOnceMet? : boolean;
        notifyNotMet? : boolean;
        condition? : ISwaggerInlineType638;
        locale? : string;
        sources? : Array<ISwaggerInlineType639>;
   
    }
         
    export interface ISwaggerInlineType641  {
        active? : boolean;
        url? : string;
        channels? : string;
   
    }
         
    export interface ISwaggerInlineType642  {
        active? : boolean;
        url? : string;
   
    }
         
    export interface ISwaggerInlineType643  {
        name? : string;
        url? : string;
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType640  {
        email? : boolean;
        mobile? : boolean;
        feed? : boolean;
        slack? : ISwaggerInlineType641;
        zapier? : ISwaggerInlineType642;
        webhooks? : Array<ISwaggerInlineType643>;
   
    }
         
    export interface ISwaggerInlineType631  {
        name? : string;
        message? : string;
        enabled? : boolean;
        script? : string;
        parties? : Array<ISwaggerInlineType632>;
        disabledUsers? : Array<string>;
        category? : string;
        type? : string;
        owner? : string;
        context? : ISwaggerInlineType633;
        action? : ISwaggerInlineType640;
   
    }
         
    export interface ISwaggerInlineType644  {
        receiveNotification? : boolean;
   
    }
         
    export interface ISwaggerInlineType645  {
        active? : boolean;
   
    }
         
    export interface ISwaggerInlineType646  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface ISwaggerInlineType647  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface ISwaggerInlineType648  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface ISwaggerInlineType649  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface ISwaggerInlineType650  {
        /*
         * If TRUE enable email server instead of default.
         */
        enable? : boolean;
        /*
         * Hostname or IP address to connect to.
         */
        host? : string;
        /*
         * Port to connect to.
         */
        port? : number;
        /*
         * If TRUE the connection will only use TLS. If false (the
         * default), TLS may still be upgraded to if available via the
         * STARTTLS command.
         */
        secure? : boolean;
        /*
         * If this is TRUE and secure is FALSE, TLS will not be used
         * (either to connect, or as a STARTTLS connection upgrade
         * command).
         */
        ignoreTLS? : boolean;
        /*
         * If this is TRUE and secure is FALSE, it forces application
         * to use STARTTLS even if the server does not advertise
         * support for it.
         */
        requireTLS? : boolean;
        /*
         * How many milliseconds to wait for the connection to
         * establish.
         */
        connectionTimeout? : number;
        /*
         * How many milliseconds to wait for the greeting after
         * connection is established.
         */
        greetingTimeout? : number;
        /*
         * How many milliseconds of inactivity to allow.
         */
        socketTimeout? : number;
        /*
         * User name.
         */
        user? : string;
        /*
         * User password.
         */
        pass? : string;
        /*
         * If set to true then logs to console. If value is not set or
         * is false then nothing is logged.
         */
        logger? : boolean;
        /*
         * If set to true, then logs SMTP traffic, otherwise logs only
         * transaction events.
         */
        debug? : boolean;
   
    }
         
    export interface ISwaggerInlineType651  {
        /*
         * Name of the first day of week
         */
        firstday? : string;
        /*
         * Language for localization
         */
        language? : string;
   
    }
         
    export interface ISwaggerInlineType652  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * If SSO is enabled.
         */
        enabled? : boolean;
        /*
         * Type of SSO.
         */
        ssoType? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication.
         */
        loginUrl? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out.
         */
        logoutUrl? : string;
        /*
         * Used in the token generation script.
         */
        sharedSecret? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication via SAML.
         */
        loginUrlSaml? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out via SAML.
         */
        logoutUrlSaml? : string;
        /*
         * This is the certificate of identity provider.
         */
        idPCert? : string;
        /*
         * Allow lower level security by disabling JTI enforcement.
         */
        lowSecurityJwtSso? : boolean;
        /*
         * Update the users' groups, based on the SAML attribute
         * memberOf.
         */
        syncGroupsFromSamlToken? : boolean;
   
    }
         
    export interface ISwaggerInlineType653  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * If SSO is enabled.
         */
        enabled? : boolean;
        /*
         * Type of SSO.
         */
        ssoType? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication.
         */
        loginUrl? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out.
         */
        logoutUrl? : string;
        /*
         * Used in the token generation script.
         */
        sharedSecret? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication via SAML.
         */
        loginUrlSaml? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out via SAML.
         */
        logoutUrlSaml? : string;
        /*
         * This is the certificate of identity provider.
         */
        idPCert? : string;
        /*
         * Allow lower level security by disabling JTI enforcement.
         */
        lowSecurityJwtSso? : boolean;
        /*
         * Update the users' groups, based on the SAML attribute
         * memberOf.
         */
        syncGroupsFromSamlToken? : boolean;
   
    }
         
    export interface ISwaggerInlineType654  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * If SSO is enabled.
         */
        enabled? : boolean;
        /*
         * Type of SSO.
         */
        ssoType? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication.
         */
        loginUrl? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out.
         */
        logoutUrl? : string;
        /*
         * Used in the token generation script.
         */
        sharedSecret? : string;
        /*
         * This is the URL that nonsense will invoke to attempt remote
         * authentication via SAML.
         */
        loginUrlSaml? : string;
        /*
         * This is the URL that nonsense will return users to after
         * they log out via SAML.
         */
        logoutUrlSaml? : string;
        /*
         * This is the certificate of identity provider.
         */
        idPCert? : string;
        /*
         * Allow lower level security by disabling JTI enforcement.
         */
        lowSecurityJwtSso? : boolean;
        /*
         * Update the users' groups, based on the SAML attribute
         * memberOf.
         */
        syncGroupsFromSamlToken? : boolean;
   
    }
         
    /**
     * Fiscal Year.
     */
    
    export interface ISwaggerInlineType656  {
        month? : string;
   
    }
         
    export interface ISwaggerInlineType657  {
        /*
         * If mails are enabled.
         */
        enabled? : boolean;
        /*
         * Email of sender.
         */
        senderEmail? : string;
        /*
         * Name of sender.
         */
        senderName? : string;
   
    }
         
    export interface ISwaggerInlineType659  {
        /*
         * If cors settings is enabled.
         */
        enabled? : boolean;
        allowedOrigins? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType658  {
        /*
         * If SSL is enabled.
         */
        enableSSl? : boolean;
        cors? : ISwaggerInlineType659;
   
    }
         
    export interface ISwaggerInlineType655  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Web server public address.
         */
        alias? : string;
        /*
         * First day of the week for date related ElastiCube queries.
         */
        firstday? : string;
        /*
         * Fiscal Year.
         */
        fiscal? : ISwaggerInlineType656;
        /*
         * Allow admin access for all dashboards
         */
        isAdminAccessAllDashboards? : boolean;
        email? : ISwaggerInlineType657;
        webServer? : ISwaggerInlineType658;
   
    }
         
    /**
     * Fiscal Year.
     */
    
    export interface ISwaggerInlineType661  {
        month? : string;
   
    }
         
    export interface ISwaggerInlineType662  {
        /*
         * If mails are enabled.
         */
        enabled? : boolean;
        /*
         * Email of sender.
         */
        senderEmail? : string;
        /*
         * Name of sender.
         */
        senderName? : string;
   
    }
         
    export interface ISwaggerInlineType664  {
        /*
         * If cors settings is enabled.
         */
        enabled? : boolean;
        allowedOrigins? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType663  {
        /*
         * If SSL is enabled.
         */
        enableSSl? : boolean;
        cors? : ISwaggerInlineType664;
   
    }
         
    export interface ISwaggerInlineType660  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Web server public address.
         */
        alias? : string;
        /*
         * First day of the week for date related ElastiCube queries.
         */
        firstday? : string;
        /*
         * Fiscal Year.
         */
        fiscal? : ISwaggerInlineType661;
        /*
         * Allow admin access for all dashboards
         */
        isAdminAccessAllDashboards? : boolean;
        email? : ISwaggerInlineType662;
        webServer? : ISwaggerInlineType663;
   
    }
         
    /**
     * Fiscal Year.
     */
    
    export interface ISwaggerInlineType666  {
        month? : string;
   
    }
         
    export interface ISwaggerInlineType667  {
        /*
         * If mails are enabled.
         */
        enabled? : boolean;
        /*
         * Email of sender.
         */
        senderEmail? : string;
        /*
         * Name of sender.
         */
        senderName? : string;
   
    }
         
    export interface ISwaggerInlineType669  {
        /*
         * If cors settings is enabled.
         */
        enabled? : boolean;
        allowedOrigins? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType668  {
        /*
         * If SSL is enabled.
         */
        enableSSl? : boolean;
        cors? : ISwaggerInlineType669;
   
    }
         
    export interface ISwaggerInlineType665  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Web server public address.
         */
        alias? : string;
        /*
         * First day of the week for date related ElastiCube queries.
         */
        firstday? : string;
        /*
         * Fiscal Year.
         */
        fiscal? : ISwaggerInlineType666;
        /*
         * Allow admin access for all dashboards
         */
        isAdminAccessAllDashboards? : boolean;
        email? : ISwaggerInlineType667;
        webServer? : ISwaggerInlineType668;
   
    }
         
    export interface ISwaggerInlineType671  {
        /*
         * Default locale for localization.
         */
        default? : string;
        /*
         * If language autodetect is enabled.
         */
        autoDetectEnabled? : boolean;
   
    }
         
    export interface ISwaggerInlineType670  {
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Default language for localization.
         */
        language? : string;
        localization? : ISwaggerInlineType671;
   
    }
         
    export interface ISwaggerInlineType673  {
        /*
         * Default locale for localization.
         */
        default? : string;
        /*
         * If language autodetect is enabled.
         */
        autoDetectEnabled? : boolean;
   
    }
         
    export interface ISwaggerInlineType672  {
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Default language for localization.
         */
        language? : string;
        localization? : ISwaggerInlineType673;
   
    }
         
    export interface ISwaggerInlineType675  {
        /*
         * Default locale for localization.
         */
        default? : string;
        /*
         * If language autodetect is enabled.
         */
        autoDetectEnabled? : boolean;
   
    }
         
    export interface ISwaggerInlineType674  {
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Default language for localization.
         */
        language? : string;
        localization? : ISwaggerInlineType675;
   
    }
         
    export interface ISwaggerInlineType677  {
        /*
         * Default locale for localization.
         */
        default? : string;
        /*
         * If language autodetect is enabled.
         */
        autoDetectEnabled? : boolean;
   
    }
         
    export interface ISwaggerInlineType676  {
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Default language for localization.
         */
        language? : string;
        localization? : ISwaggerInlineType677;
   
    }
         
    export interface ISwaggerInlineType679  {
        /*
         * Default locale for localization.
         */
        default? : string;
        /*
         * If language autodetect is enabled.
         */
        autoDetectEnabled? : boolean;
   
    }
         
    export interface ISwaggerInlineType678  {
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Default language for localization.
         */
        language? : string;
        localization? : ISwaggerInlineType679;
   
    }
         
    export interface ISwaggerInlineType680  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Pulse page extension script.
         */
        script? : string;
   
    }
         
    export interface ISwaggerInlineType681  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Pulse page extension script.
         */
        script? : string;
   
    }
         
    export interface ISwaggerInlineType682  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Pulse page extension script.
         */
        script? : string;
   
    }
         
    export interface ISwaggerInlineType683  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Pulse page extension script.
         */
        script? : string;
   
    }
         
    export interface ISwaggerInlineType684  {
        /*
         * ID of config.
         */
        _id? : string;
        /*
         * Name of configuration.
         */
        name? : string;
        /*
         * Pulse page extension script.
         */
        script? : string;
   
    }
         
    export interface ISwaggerInlineType686  {
        columnName? : string;
        columnOrder? : number;
        dbType? : number;
        size? : number;
        precision? : number;
        scale? : number;
   
    }
         
    export interface ISwaggerInlineType687  {
        fkName? : string;
        parentSchema? : string;
        parentTable? : string;
        parentColumns? : Array<string>;
        childSchema? : string;
        childTable? : string;
        childColumns? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType685  {
        catalog? : string;
        schemaName? : string;
        tableName? : string;
        tableType? : string;
        columns? : Array<ISwaggerInlineType686>;
        relations? : Array<ISwaggerInlineType687>;
   
    }
         
    export interface ISwaggerInlineType688  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType689  {
        id? : string;
        name? : string;
   
    }
         
    export interface ISwaggerInlineType692  {
        title? : string;
        translationKey? : string;
   
    }
         
    export interface ISwaggerInlineType693  {
        title? : string;
        translationKey? : string;
   
    }
         
    export interface ISwaggerInlineType691  {
        database? : ISwaggerInlineType692;
        table? : ISwaggerInlineType693;
   
    }
         
    export interface ISwaggerInlineType695  {
        baseUrl? : string;
        authorizationEndpoint? : string;
        accessTokenEndpoint? : string;
        clientId? : string;
        clientSecret? : string;
        scope? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType697  {
        title? : string;
        value? : string;
   
    }
         
    export interface ISwaggerInlineType698  {
        parameter? : string;
        hasValue? : string;
   
    }
         
    export interface ISwaggerInlineType696  {
        name? : string;
        title? : string;
        titleTranslationKey? : string;
        type? : string;
        icon? : string;
        required? : boolean;
        send? : boolean;
        default? : string;
        description? : string;
        descriptionTranslationKey? : string;
        pattern? : string;
        trim? : boolean;
        min? : number;
        max? : number;
        multivalue? : boolean;
        options? : Array<ISwaggerInlineType697>;
        availableIf? : ISwaggerInlineType698;
   
    }
         
    export interface ISwaggerInlineType694  {
        oauth2? : ISwaggerInlineType695;
        base? : Array<ISwaggerInlineType696>;
   
    }
         
    export interface ISwaggerInlineType690  {
        Name? : string;
        titleCustomization? : ISwaggerInlineType691;
        connection? : ISwaggerInlineType694;
   
    }
         
    export interface ISwaggerInlineType699  {
        status? : string;
   
    }
         
    export interface ISwaggerInlineType700  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType701  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType703  {
        columnName? : string;
        columnOrder? : number;
        dbType? : number;
        size? : number;
        precision? : number;
        scale? : number;
   
    }
         
    export interface ISwaggerInlineType704  {
        fkName? : string;
        parentSchema? : string;
        parentTable? : string;
        parentColumns? : Array<string>;
        childSchema? : string;
        childTable? : string;
        childColumns? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType702  {
        catalog? : string;
        schemaName? : string;
        tableName? : string;
        tableType? : string;
        columns? : Array<ISwaggerInlineType703>;
        relations? : Array<ISwaggerInlineType704>;
   
    }
         
    export interface ISwaggerInlineType705  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType706  {
        headers? : Array<string>;
        values? : Array<number>;
   
    }
         
    export interface ISwaggerInlineType707  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType708  {
        count? : string;
   
    }
         
    export interface ISwaggerInlineType709  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType710  {
        code? : string;
        redirectUri? : string;
   
    }
         
    export interface ISwaggerInlineType712  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType714  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType713  {
        type? : string;
        arguments? : Array<ISwaggerInlineType714>;
   
    }
         
    export interface ISwaggerInlineType717  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType719  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType718  {
        type? : string;
        arguments? : ISwaggerInlineType719;
   
    }
         
    export interface ISwaggerInlineType716  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType717>;
        tuple-transformations? : Array<ISwaggerInlineType718>;
   
    }
         
    export interface ISwaggerInlineType715  {
        tables? : Array<ISwaggerInlineType716>;
   
    }
         
    export interface ISwaggerInlineType720  {
        type? : string;
   
    }
         
    export interface ISwaggerInlineType711  {
        _id? : string;
        shares? : Array<ISwaggerInlineType712>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType713>;
        schema? : ISwaggerInlineType715;
        schedule? : ISwaggerInlineType720;
   
    }
         
    export interface ISwaggerInlineType722  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType724  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType723  {
        type? : string;
        arguments? : Array<ISwaggerInlineType724>;
   
    }
         
    export interface ISwaggerInlineType727  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType729  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType728  {
        type? : string;
        arguments? : ISwaggerInlineType729;
   
    }
         
    export interface ISwaggerInlineType726  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType727>;
        tuple-transformations? : Array<ISwaggerInlineType728>;
   
    }
         
    export interface ISwaggerInlineType725  {
        tables? : Array<ISwaggerInlineType726>;
   
    }
         
    export interface ISwaggerInlineType730  {
        type? : string;
   
    }
         
    export interface ISwaggerInlineType721  {
        _id? : string;
        shares? : Array<ISwaggerInlineType722>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType723>;
        schema? : ISwaggerInlineType725;
        schedule? : ISwaggerInlineType730;
   
    }
         
    export interface ISwaggerInlineType732  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType734  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType733  {
        type? : string;
        arguments? : Array<ISwaggerInlineType734>;
   
    }
         
    export interface ISwaggerInlineType737  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType739  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType738  {
        type? : string;
        arguments? : ISwaggerInlineType739;
   
    }
         
    export interface ISwaggerInlineType736  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType737>;
        tuple-transformations? : Array<ISwaggerInlineType738>;
   
    }
         
    export interface ISwaggerInlineType735  {
        tables? : Array<ISwaggerInlineType736>;
   
    }
         
    export interface ISwaggerInlineType740  {
        type? : string;
   
    }
         
    export interface ISwaggerInlineType731  {
        _id? : string;
        shares? : Array<ISwaggerInlineType732>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType733>;
        schema? : ISwaggerInlineType735;
        schedule? : ISwaggerInlineType740;
   
    }
         
    export interface ISwaggerInlineType742  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType744  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType743  {
        type? : string;
        arguments? : Array<ISwaggerInlineType744>;
   
    }
         
    export interface ISwaggerInlineType747  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType749  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType748  {
        type? : string;
        arguments? : ISwaggerInlineType749;
   
    }
         
    export interface ISwaggerInlineType746  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType747>;
        tuple-transformations? : Array<ISwaggerInlineType748>;
   
    }
         
    export interface ISwaggerInlineType745  {
        tables? : Array<ISwaggerInlineType746>;
   
    }
         
    export interface ISwaggerInlineType750  {
        type? : string;
   
    }
         
    export interface ISwaggerInlineType741  {
        _id? : string;
        shares? : Array<ISwaggerInlineType742>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType743>;
        schema? : ISwaggerInlineType745;
        schedule? : ISwaggerInlineType750;
   
    }
         
    export interface ISwaggerInlineType752  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType754  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType753  {
        type? : string;
        arguments? : Array<ISwaggerInlineType754>;
   
    }
         
    export interface ISwaggerInlineType757  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType759  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType758  {
        type? : string;
        arguments? : ISwaggerInlineType759;
   
    }
         
    export interface ISwaggerInlineType756  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType757>;
        tuple-transformations? : Array<ISwaggerInlineType758>;
   
    }
         
    export interface ISwaggerInlineType755  {
        tables? : Array<ISwaggerInlineType756>;
   
    }
         
    export interface ISwaggerInlineType760  {
        type? : string;
   
    }
         
    export interface ISwaggerInlineType751  {
        _id? : string;
        shares? : Array<ISwaggerInlineType752>;
        owner? : string;
        elasticube? : string;
        name? : string;
        fullname? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType753>;
        schema? : ISwaggerInlineType755;
        schedule? : ISwaggerInlineType760;
   
    }
         
    export interface ISwaggerInlineType762  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType764  {
        table? : string;
        column? : string;
   
    }
         
    export interface ISwaggerInlineType763  {
        type? : string;
        arguments? : Array<ISwaggerInlineType764>;
   
    }
         
    export interface ISwaggerInlineType767  {
        id? : string;
        name? : string;
        type? : number;
        size? : number;
        scale? : number;
        precision? : number;
   
    }
         
    export interface ISwaggerInlineType769  {
        column? : string;
   
    }
         
    export interface ISwaggerInlineType768  {
        type? : string;
        arguments? : ISwaggerInlineType769;
   
    }
         
    export interface ISwaggerInlineType766  {
        id? : string;
        name? : string;
        columns? : Array<ISwaggerInlineType767>;
        tuple-transformations? : Array<ISwaggerInlineType768>;
   
    }
         
    export interface ISwaggerInlineType765  {
        tables? : Array<ISwaggerInlineType766>;
   
    }
         
    export interface ISwaggerInlineType770  {
        type? : string;
   
    }
         
    export interface ISwaggerInlineType761  {
        shares? : Array<ISwaggerInlineType762>;
        elasticube? : string;
        name? : string;
        type? : string;
        connection? : string;
        modeling-transformations? : Array<ISwaggerInlineType763>;
        schema? : ISwaggerInlineType765;
        schedule? : ISwaggerInlineType770;
   
    }
         
    export interface ISwaggerInlineType771  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType772  {
        partyId? : string;
        permission? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType774  {
        partyId? : string;
        type? : string;
        email? : string;
   
    }
         
    export interface ISwaggerInlineType773  {
        dataset? : string;
        shares? : Array<ISwaggerInlineType774>;
   
    }
         
    export interface ISwaggerInlineType776  {
        partyId? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType775  {
        _id? : string;
        dataSourceId? : string;
        allMembers? : boolean;
        members? : Array<string>;
        shares? : Array<ISwaggerInlineType776>;
        datatype? : string;
        table? : string;
        column? : string;
        live? : boolean;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType778  {
        partyId? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType777  {
        allMembers? : boolean;
        members? : Array<string>;
        shares? : Array<ISwaggerInlineType778>;
        datatype? : string;
        table? : string;
        column? : string;
        live? : boolean;
        fullname? : string;
   
    }
         
    export interface ISwaggerInlineType779  {
        _id? : string;
        owner? : string;
        provider? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
        schema? : string;
        parameters? : any;
   
    }
         
    export interface ISwaggerInlineType780  {
        _id? : string;
        owner? : string;
        provider? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
        schema? : string;
        parameters? : any;
   
    }
         
    export interface ISwaggerInlineType781  {
        _id? : string;
        owner? : string;
        provider? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
        schema? : string;
        parameters? : any;
   
    }
         
    export interface ISwaggerInlineType783  {
        _id? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
   
    }
         
    export interface ISwaggerInlineType782  {
        _id? : string;
        owner? : string;
        provider? : string;
        timeout? : number;
        refreshRate? : number;
        timezone? : string;
        schema? : string;
        parameters? : any;
        duplicates? : Array<ISwaggerInlineType783>;
   
    }
         
    export interface ISwaggerInlineType784  {
        status? : string;
   
    }
         
    export interface ISwaggerInlineType786  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType785  {
        connectionData? : ISwaggerInlineType786;
        /*
         * new provider name
         */
        provider? : string;
   
    }
         
    export interface ISwaggerInlineType788  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType787  {
        connectionData? : ISwaggerInlineType788;
        /*
         * new provider name
         */
        provider? : string;
   
    }
         
    export interface ISwaggerInlineType790  {
        columnName? : string;
        columnOrder? : number;
        dbType? : number;
        size? : number;
        precision? : number;
        scale? : number;
   
    }
         
    export interface ISwaggerInlineType791  {
        fkName? : string;
        parentSchema? : string;
        parentTable? : string;
        parentColumns? : Array<string>;
        childSchema? : string;
        childTable? : string;
        childColumns? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType789  {
        catalog? : string;
        schemaName? : string;
        tableName? : string;
        tableType? : string;
        columns? : Array<ISwaggerInlineType790>;
        relations? : Array<ISwaggerInlineType791>;
   
    }
         
    export interface ISwaggerInlineType793  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType792  {
        connectionData? : ISwaggerInlineType793;
        /*
         * new provider name
         */
        provider? : string;
   
    }
         
    export interface ISwaggerInlineType795  {
        columnName? : string;
        columnOrder? : number;
        dbType? : number;
        size? : number;
        precision? : number;
        scale? : number;
   
    }
         
    export interface ISwaggerInlineType796  {
        fkName? : string;
        parentSchema? : string;
        parentTable? : string;
        parentColumns? : Array<string>;
        childSchema? : string;
        childTable? : string;
        childColumns? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType794  {
        catalog? : string;
        schemaName? : string;
        tableName? : string;
        tableType? : string;
        columns? : Array<ISwaggerInlineType795>;
        relations? : Array<ISwaggerInlineType796>;
   
    }
         
    export interface ISwaggerInlineType798  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType797  {
        connectionData? : ISwaggerInlineType798;
        /*
         * new provider name
         */
        provider? : string;
   
    }
         
    export interface ISwaggerInlineType799  {
        headers? : Array<string>;
        values? : Array<number>;
   
    }
         
    export interface ISwaggerInlineType801  {
        /*
         * Key value pairs of connection properties for specific
         * connector. Values **must** be strings or array of strings.
         */
        connection? : any;
        /*
         * Database schema
         */
        schema? : string;
        /*
         * Table name
         */
        table? : string;
        limit? : number;
        /*
         * Used in schema details api. Tells api to return table
         * relations next to columns
         */
        fetchRelations? : boolean;
        sql? : string;
   
    }
         
    export interface ISwaggerInlineType800  {
        connectionData? : ISwaggerInlineType801;
        /*
         * new provider name
         */
        provider? : string;
   
    }
         
    export interface ISwaggerInlineType802  {
        _id? : string;
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        name? : string;
        syncUsn? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface ISwaggerInlineType803  {
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        password? : string;
        name? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface ISwaggerInlineType804  {
        _id? : string;
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        name? : string;
        syncUsn? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface ISwaggerInlineType805  {
        _id? : string;
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        name? : string;
        syncUsn? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface ISwaggerInlineType806  {
        enabled? : boolean;
        url? : string;
        baseDN? : string;
        username? : string;
        password? : string;
        name? : string;
        syncActive? : boolean;
        syncInterval? : number;
   
    }
         
    export interface ISwaggerInlineType807  {
        _id? : string;
        url? : string;
        baseDN? : string;
        username? : string;
        password? : string;
   
    }
         
    export interface ISwaggerInlineType808  {
        /*
         * indicates if to sync all the changes from the Active
         * Directory server since it was created
         */
        force? : boolean;
        /*
         * groups to sync
         */
        gnames? : Array<string>;
        /*
         * users to sync
         */
        unames? : Array<string>;
   
    }
         
    export interface ISwaggerInlineType809  {
        analytics_token? : string;
   
    }
         
    export interface ISwaggerInlineType810  {
        id? : string;
        column? : string;
        table? : string;
        dimtype? : string;
        indexed? : boolean;
        merged? : boolean;
        title? : string;
        type? : string;
   
    }
         
    export interface ISwaggerInlineType811  {
        term? : string;
        offset? : number;
        count? : number;
        ignoretypes? : string;
   
    }
         
    export interface ISwaggerInlineType814  {
        /*
         * Widget ID
         */
        oid? : string;
        /*
         * Widget title
         */
        title? : string;
        /*
         * Widget type
         */
        type? : string;
        /*
         * Time when widget started load (in milliseconds)
         */
        logStartLoad? : number;
        /*
         * Time when widget ended load (in milliseconds)
         */
        logEndLoad? : number;
        /*
         * Time when widget started query(in milliseconds)
         */
        logStartQuery? : number;
        /*
         * Time when widget ended query (in milliseconds)
         */
        logEndQuery? : number;
        /*
         * Time when widget started render(in milliseconds)
         */
        logStartRender? : number;
        /*
         * Time when widget ended render (in milliseconds)
         */
        logEndRender? : string;
   
    }
         
    /**
     * Dashboard object
     */
    
    export interface ISwaggerInlineType813  {
        /*
         * Dashboard title
         */
        title? : string;
        /*
         * Dashboard ID
         */
        oid? : string;
        /*
         * Time when dashboard started load (in milliseconds)
         */
        logStartLoad? : number;
        /*
         * Time when dashboard ended load (in milliseconds)
         */
        logEndLoad? : number;
        /*
         * Time when dashboard started refresh (in milliseconds)
         */
        logStartRefresh? : number;
        /*
         * Time when dashboard ended refresh (in milliseconds)
         */
        logEndRefresh? : number;
        widgets? : Array<ISwaggerInlineType814>;
   
    }
         
    export interface ISwaggerInlineType812  {
        /*
         * Dashboard object
         */
        dashboard? : ISwaggerInlineType813;
   
    }
         
    export interface ISwaggerInlineType815  {
        queryForSearch? : any;
        objectForUpdate? : any;
   
    }
         
    export interface ISwaggerInlineType816  {
        /*
         * narration provider token.
         */
        narrationToken? : string;
   
    }
         
    export interface ISwaggerInlineType817  {
        /*
         * narration text
         */
        narration? : string;
   
    }
         
    /**
     * narration configuration
     */
    
    export interface ISwaggerInlineType819  {
        /*
         * narration text format
         */
        format? : string;
        /*
         * narration text verbosity
         */
        verbosity? : string;
        /*
         * narration text sentiment
         */
        up_sentiment? : string;
        /*
         * narration text aggregation
         */
        aggregation? : string;
   
    }
         
    export interface ISwaggerInlineType822  {
        dim? : string;
        datatype? : string;
        title? : string;
   
    }
         
    export interface ISwaggerInlineType823  {
        id? : string;
        index? : number;
   
    }
         
    export interface ISwaggerInlineType821  {
        jaql? : ISwaggerInlineType822;
        field? : ISwaggerInlineType823;
        format? : any;
   
    }
         
    /**
     * JAQL query object
     */
    
    export interface ISwaggerInlineType820  {
        datasource? : string;
        metadata? : Array<ISwaggerInlineType821>;
        /*
         * data format
         */
        format? : string;
        /*
         * masked result check
         */
        isMaskedResult? : boolean;
        /*
         * narration text
         */
        count? : number;
        /*
         * offset
         */
        offset? : number;
   
    }
         
    export interface ISwaggerInlineType818  {
        /*
         * сhart type like "chart/pie" and etc.
         */
        chartType? : string;
        /*
         * narration configuration
         */
        narration? : ISwaggerInlineType819;
        /*
         * JAQL query object
         */
        jaqlRequest? : ISwaggerInlineType820;
        /*
         * widget id
         */
        widgetId? : string;
        /*
         * dashboard id
         */
        dashboardId? : string;
   
    }
         
    export interface ISwaggerInlineType824  {
        /*
         * disable/enable analytics for narration
         */
        enabled? : boolean;
        /*
         * attempts to find clusters of closely-related data points
         */
        clustering? : any;
        /*
         * determines if the data collection follows a normal
         * distribution
         */
        distribution? : any;
        /*
         * performs regressions of the measure values across the
         * discrete dimension and comments on the analysis
         */
        correlation? : any;
        /*
         * trendlines consist of fitting the data for each measure to
         * a line and determining whether or not that model fits the
         * data
         */
        trendline? : any;
        /*
         * segments are noteworthy/interesting portions of a series
         * with movements of a certain percent of change
         */
        segments? : any;
        /*
         * volatility is a measure of how erratic a series is, used to
         * rank series to find the most or least volatile
         */
        volatility? : any;
   
    }
         
    export interface ISwaggerInlineType825  {
        /*
         * disable/enable analytics for narration
         */
        enabled? : boolean;
        /*
         * attempts to find clusters of closely-related data points
         */
        clustering? : any;
        /*
         * determines if the data collection follows a normal
         * distribution
         */
        distribution? : any;
        /*
         * performs regressions of the measure values across the
         * discrete dimension and comments on the analysis
         */
        correlation? : any;
        /*
         * trendlines consist of fitting the data for each measure to
         * a line and determining whether or not that model fits the
         * data
         */
        trendline? : any;
        /*
         * segments are noteworthy/interesting portions of a series
         * with movements of a certain percent of change
         */
        segments? : any;
        /*
         * volatility is a measure of how erratic a series is, used to
         * rank series to find the most or least volatile
         */
        volatility? : any;
   
    }
         
    export interface ISwaggerInlineType826  {
        /*
         * disable/enable analytics for narration
         */
        enabled? : boolean;
        /*
         * attempts to find clusters of closely-related data points
         */
        clustering? : any;
        /*
         * determines if the data collection follows a normal
         * distribution
         */
        distribution? : any;
        /*
         * performs regressions of the measure values across the
         * discrete dimension and comments on the analysis
         */
        correlation? : any;
        /*
         * trendlines consist of fitting the data for each measure to
         * a line and determining whether or not that model fits the
         * data
         */
        trendline? : any;
        /*
         * segments are noteworthy/interesting portions of a series
         * with movements of a certain percent of change
         */
        segments? : any;
        /*
         * volatility is a measure of how erratic a series is, used to
         * rank series to find the most or least volatile
         */
        volatility? : any;
   
    }
         
    export interface ISwaggerInlineType829  {
        type? : string;
        coordinates? : Array<any>;
   
    }
         
    export interface ISwaggerInlineType828  {
        type? : string;
        id? : string;
        properties? : any;
        geometry? : ISwaggerInlineType829;
   
    }
         
    export interface ISwaggerInlineType827  {
        type? : string;
        features? : Array<ISwaggerInlineType828>;
   
    }
         
    export interface ISwaggerInlineType830  {
        locations? : Array<Ilocation>;
        geoLevel? : string;
   
    }
         
    /**
     * Plugin object
     */
    
    export interface ISwaggerInlineType832  {
        /*
         * plugin name
         */
        name? : string;
        /*
         * version of plugin
         */
        version? : number;
        /*
         * last time plugin updated
         */
        lastUpdate? : string;
        /*
         * enabled/disabled plugin status
         */
        isEnabled? : boolean;
        /*
         * plugin folder name
         */
        folderName? : string;
   
    }
         
    export interface ISwaggerInlineType833  {
        /*
         * limit of items to return
         */
        limit? : number;
        /*
         * number of items to skip
         */
        skip? : number;
        /*
         * filter by provided string
         */
        search? : string;
        /*
         * order by specific field
         */
        orderby? : string;
        /*
         * sort by descending or ascending
         */
        desc? : boolean;
   
    }
         
    /**
     * Plugin response model
     */
    
    export interface ISwaggerInlineType831  {
        plugins? : Array<ISwaggerInlineType832>;
        /*
         * amount of plugins
         */
        count? : number;
        queryMetadata? : ISwaggerInlineType833;
   
    }
         
    /**
     * Plugin object
     */
    
    export interface ISwaggerInlineType834  {
        /*
         * plugin name
         */
        name? : string;
        /*
         * version of plugin
         */
        version? : number;
        /*
         * last time plugin updated
         */
        lastUpdate? : string;
        /*
         * enabled/disabled plugin status
         */
        isEnabled? : boolean;
        /*
         * plugin folder name
         */
        folderName? : string;
   
    }
         
    /**
     * Plugin object
     */
    
    export interface ISwaggerInlineType835  {
        /*
         * plugin name
         */
        name? : string;
        /*
         * version of plugin
         */
        version? : number;
        /*
         * last time plugin updated
         */
        lastUpdate? : string;
        /*
         * enabled/disabled plugin status
         */
        isEnabled? : boolean;
        /*
         * plugin folder name
         */
        folderName? : string;
   
    }
         
    export interface ISwaggerInlineType836  {
        party? : string;
        type? : string;
        permission? : string;
   
    }
         
    /**
     * query metadata
     */
    
    export interface ISwaggerInlineType838  {
        /*
         * which items to look for suggestions
         */
        target? : Array<string>;
        /*
         * include popular fields or not
         */
        popular? : boolean;
        /*
         * total items which match query metadata
         */
        total? : number;
        /*
         * number of skiped items
         */
        skip? : number;
        /*
         * number of returned items
         */
        count? : number;
   
    }
         
    export interface ISwaggerInlineType839  {
        table? : string;
        column? : string;
        datatype? : string;
        title? : string;
        rank? : string;
   
    }
         
    /**
     * Array of candidates to suggest
     */
    
    export interface ISwaggerInlineType837  {
        /*
         * query metadata
         */
        queryMetadata? : ISwaggerInlineType838;
        /*
         * fields to suggest
         */
        suggestions? : Array<ISwaggerInlineType839>;
   
    }
         
    /**
     * Properties to get suggestion items
     */
    
    export interface ISwaggerInlineType840  {
        /*
         * datasource name
         */
        datasource? : any;
        /*
         * define suggestion type [widgets]
         */
        type? : string;
        /*
         * how many items to return. By default 20
         */
        count? : number;
        /*
         * which items to look for suggestions
         */
        fields? : Array<any>;
        /*
         * number of items to skip. By default 0
         */
        skip? : number;
        /*
         * include popular fields or not. By default true
         */
        popular? : boolean;
   
    }
         
    /**
     * Status of suggestions
     */
    
    export interface ISwaggerInlineType841  {
        /*
         * Time when was last suggestions refresh.
         */
        lastExecution? : string;
        /*
         * Define job status.
         */
        jobStatus? : string;
        /*
         * Job schedule in cron format.
         */
        jobFrequent? : string;
        /*
         * Executions status of suggestions processes.
         */
        executionStatus? : boolean;
   
    }
         
    /**
     * Status of suggestions
     */
    
    export interface ISwaggerInlineType842  {
        /*
         * Information message.
         */
        message? : string;
        /*
         * Suggestions code.
         */
        suggestionCode? : number;
   
    }
         
    /**
     * Properties to refresh suggestions
     */
    
    export interface ISwaggerInlineType843  {
        /*
         * refresh suggestions data or not. By default false.
         */
        data? : boolean;
        /*
         * refresh suggestions ranking or not. By default false.
         */
        ranking? : boolean;
   
    }
         
    export interface ISwaggerInlineType844  {
        title? : string;
        address? : string;
   
    }
     