import * as superAgentRequest from "superagent";
import { Stream, PassThrough } from "stream";
import { ISwaggerInlineType530,ISwaggerInlineType531,ISwaggerInlineType532,ISwaggerInlineType533,ISwaggerInlineType534,ISwaggerInlineType535,ISwaggerInlineType536 } from "./types";

/*
    nonsense API 1.0
    


    
*/


export class AccountHttpSvc {
    constructor(private baseUrl:string  = "/api/v1"){

    }

    /**
     * Begin reset password process
     * The **begin reset password** endpoint is the starting point
     * for the password reset process.
     * It generates a temporary *password reset token* for the
     * user associated with the provided email address and sends a
     * password reset email to him.
     * 
     * @param { ISwaggerInlineType530 } emailObject email of the user who's password to reset
     */
    public beginResetPassword(
         emailObject:ISwaggerInlineType530 ):Promise<void>{
        return new Promise<void>((resolve, reject) => {
            superAgentRequest
            .post(this.baseUrl + `/account/begin_reset_password`)
            .send(emailObject)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as void);
                }
            });
        });
    }
    /**
     * Validate password reset token
     * The **validate password reset token** endpoint receives the
     * temporary _password reset token_ generated by
     * `begin_reset_password`
     * and either returns the username of the user who's password
     * will be reset, or an error if the token is invalid, for
     * example if it was already used.
     * 
     * @param { string } token The temporary password reset token
     */
    public getUserNameForResetPassword(
         token:string ):Promise<ISwaggerInlineType531>{
        return new Promise<ISwaggerInlineType531>((resolve, reject) => {
            superAgentRequest
            .get(this.baseUrl + `/account/reset_password/${encodeURIComponent(token)}`)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as ISwaggerInlineType531);
                }
            });
        });
    }
    /**
     * Finalize password reset
     * The **reset password** endpoint receives the *reset
     * password token* and a new password and updates the user's
     * password accordingly.
     * @param { string } token The temporary password reset token
     * @param { ISwaggerInlineType532 } passwordObject The new password
     */
    public resetPassword(
         token:string ,
         passwordObject:ISwaggerInlineType532 ):Promise<void>{
        return new Promise<void>((resolve, reject) => {
            superAgentRequest
            .post(this.baseUrl + `/account/reset_password/${encodeURIComponent(token)}`)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as void);
                }
            });
        });
    }
    /**
     * Validate activation token
     * The **validate activation token** endpoint receives the
     * temporary _activation token_ generated by `begin_activate`
     * and either returns the username and language of the user to
     * be activated, or an error if the token is invalid,
     * for example if it was already used. Note, that language is
     * selected by language startegy: user's language,
     * group's language, admin selected language, default nonsense
     * language
     * 
     * @param { string } token The user's activation token.
     */
    public getUserDataForActivation(
         token:string ):Promise<ISwaggerInlineType533>{
        return new Promise<ISwaggerInlineType533>((resolve, reject) => {
            superAgentRequest
            .get(this.baseUrl + `/account/activate/${encodeURIComponent(token)}`)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as ISwaggerInlineType533);
                }
            });
        });
    }
    /**
     * Activate user
     * The **activate** endpoint receives the *activation token*
     * and a new password and updates the user's password
     * accordingly.
     * @param { string } token The user's activation token.
     * @param { ISwaggerInlineType534 } passwordObject The new password
     */
    public activateUser(
         token:string ,
         passwordObject:ISwaggerInlineType534 ):Promise<void>{
        return new Promise<void>((resolve, reject) => {
            superAgentRequest
            .post(this.baseUrl + `/account/activate/${encodeURIComponent(token)}`)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as void);
                }
            });
        });
    }
    /**
     * Begin user activation
     * The **begin activation** endpoint is the starting point for
     * the user activation process.
     * It generates a temporary *activation token* for the user
     * associated with the provided email address and sends an
     * activation email to him.
     * 
     * @param { ISwaggerInlineType535 } emailObj Email of the user to activate
     */
    public beginActivate(
         emailObj:ISwaggerInlineType535 ):Promise<void>{
        return new Promise<void>((resolve, reject) => {
            superAgentRequest
            .post(this.baseUrl + `/account/begin_activate`)
            .send(emailObj)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as void);
                }
            });
        });
    }
    /**
     * Bulk begin user activation
     * The **bulk begin activation** endpoint is the starting
     * point for the user activation process when activating
     * multiple users.
     * It generates a temporary *activation token* for the users
     * associated with the provided email addresses and sends an
     * activation email to them.
     * 
     * @param { Array<string> } emailList The list of emails of users to activate
     */
    public beginActivateBulk(
         emailList:Array<string> ):Promise<void>{
        return new Promise<void>((resolve, reject) => {
            superAgentRequest
            .post(this.baseUrl + `/account/begin_activate_bulk`)
            .send(emailList)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as void);
                }
            });
        });
    }
    /**
     * License Information
     * Gets the License information
     * 
     */
    public getLicenseInfo(
        ):Promise<ISwaggerInlineType536>{
        return new Promise<ISwaggerInlineType536>((resolve, reject) => {
            superAgentRequest
            .get(this.baseUrl + `/account/get_license_info`)
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as ISwaggerInlineType536);
                }
            });
        });
    }
}



