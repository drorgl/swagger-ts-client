/*****************************AutoGenerated Code : Do not edit *******************************/
// Type generated from Swagger definition

/*
    Remote Diagnostic Support API 1.0
    The Remote Diagnostic Support API will provide the
    possibility for 3rd party applications (e.g. ADAC, ATU,
    etc.) to access vehicle diagnostics data remotely on behalf
    of the Daimler customer. To use the endpoints you need a
    valid vin/fin (vehicleId).
    
    Contact:
    The open API platform by arik-Benz
    
    
*/



    
    export interface IErrorResponse  {
        /*
         * Error Code
         */
        errorCode? : string;
        /*
         * Error Message
         */
        errorMessage? : string;
   
    }
         
    export interface ICommonType  {
        /*
         * Not Implemented. Estimated completion time of the readout
         */
        asyncEstimatedComplete? : Date;
        /*
         * Not Implemented. Progress of the readout in percent.
         */
        asyncProgress? : number;
        /*
         * Reflects the status of the readouts
         */
        asyncStatus? : string;
        /*
         * Not Implemented. Recommended waiting time in milliseconds
         * until next request for status.
         */
        asyncWait? : number;
        /*
         * The id of the error in case something failed
         */
        exveErrorId? : string;
        /*
         * The error message in case something failed
         */
        exveErrorMsg? : string;
        /*
         * A unique reference to the error. Can be used in
         * communication with the offering party to help in resolving
         * problems.
         */
        exveErrorRef? : string;
        /*
         * A message regarding the result of the request. Can be
         * filled both when the request was completed and failed.
         */
        exveNote? : string;
        /*
         * Id unique for this readout.
         */
        id? : string;
        /*
         * Timestamp when this message was created.
         */
        messageTimestamp? : Date;
        /*
         * Timestamp when the data in the message was received by the
         * ExVe backend from the vehicle.
         */
        receivedTimestamp? : Date;
        /*
         * The vehicle identifier of the extended vehicle, e.g VIN
         */
        vehicleId? : string;
   
    }
         
    export interface IResourceDataContainer  {
        resourceReadout? : IResourceDataType;
   
    }
         
    export interface IResourceDataType  {
   
    }
         
    export interface IResourceDataItem  {
        /*
         * URI to API exposing resource
         */
        api? : string;
        /*
         * Name of resource
         */
        name? : string;
        /*
         * Version of resource in API
         */
        version? : string;
   
    }
         
    export interface IEcuDataContainer  {
        ecuReadout? : IEcuDataType;
   
    }
         
    export interface IEcuDataType  {
   
    }
         
    export interface IEcuDataItem  {
        /*
         * Identifier of the ECU
         */
        ecuId? : string;
        /*
         * Identifier(s) of the hardware unit(s) in this ECU
         */
        hardwareIds? : Array<string>;
        /*
         * Identifier(s) of the software unit(s) in this ECU
         */
        softwareIds? : Array<string>;
   
    }
         
    export interface IDtcDataContainer  {
        dtcReadout? : IDtcDataType;
   
    }
         
    export interface IDtcDataType  {
   
    }
         
    export interface IDtcDataItem  {
        /*
         * Identifier of the DTC.
         */
        dtcId? : string;
        /*
         * Date and time when the DTC occurred
         */
        dtcTimestamp? : string;
        /*
         * Identifier of the ECU where the DTC occurred
         */
        ecuId? : string;
        /*
         * Counter of how many times this DTC has occurred
         */
        occurrenceCounter? : number;
        /*
         * Reflects the status of the DTC
         */
        status? : string;
   
    }
         
    export interface IDtcSnapshotDataContainer  {
        dtcSnapshotReadout? : IDtcSnapshotDataType;
   
    }
         
    export interface IDtcSnapshotDataType  {
   
    }
         
    export interface IDtcSnapshotDataItem  {
        /*
         * Name of snapshot parameter
         */
        id? : string;
        /*
         * Value of snapshot parameter
         */
        value? : string;
   
    }
     