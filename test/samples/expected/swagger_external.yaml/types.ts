/*****************************AutoGenerated Code : Do not edit *******************************/
// Type generated from Swagger definition

/*
    Car Configurator API 1.0
    The Car Configurator API offers access to the arik-Benz car
    configuration functions. It provides required reference
    data such as the masterdata of all arik-Benz vehicles as
    well as functions to retrieve initial and changed
    configurations. In addition to that is is possible to save
    a newly created configuration so that it can be easily
    restored or shared with others.
    
    Contact:
    The open API platform by arik-Benz
    
    
*/



    
    /**
     * Represent a market (aka country) with a specific country
     * and a language.
     */
    
    export interface IMarket  {
        marketId? : string;
        country? : string;
        language? : string;
        _links? : ISelfReferencesLinks;
   
    }
         
    /**
     * The class of a Vehicle, e.g. 'A-Class'.
     */
    
    export interface IVehicleClass  {
        classId? : string;
        className? : string;
        _links? : ISelfModelLinks;
   
    }
         
    /**
     * The body of a Vehicle, e.g. 'Limousine'.
     */
    
    export interface IVehicleBody  {
        bodyId? : string;
        bodyName? : string;
        _links? : ISelfModelLinks;
   
    }
         
    /**
     * The model of a Vehicle, e.g. '176042_002'.
     */
    
    export interface IVehicleModel  {
        modelId? : string;
        shortName? : string;
        name? : string;
        baumuster? : string;
        nationalSalesType? : string;
        vehicleClass? : IVehicleClass;
        vehicleBody? : IVehicleBody;
        productGroup? : IProductGroup;
        priceInformation? : IPriceInformation;
        _links? : ISelfConfigurationLinks;
   
    }
         
    /**
     * The prices, installment price, taxes and ISO currency of a
     * vehicle.
     */
    
    export interface IPriceInformation  {
        price? : number;
        netPrice? : number;
        instalmentPrice? : number;
        currency? : string;
        taxes? : Array<ITax>;
   
    }
         
    /**
     * The country specific tax information.
     */
    
    export interface ITax  {
        id? : string;
        amount? : number;
        baseAmount? : number;
        charge? : number;
        rate? : number;
   
    }
         
    /**
     * Links to self.
     */
    
    export interface ISelfLink  {
        self? : IHRef;
   
    }
         
    /**
     * Link to VIM image API.
     */
    
    export interface IImageComponentLink  {
        imageapi_component? : IHRef;
   
    }
         
    /**
     * Links to self and models resources.
     */
    
    export interface ISelfModelLinks  {
        self? : IHRef;
        models? : IHRef;
   
    }
         
    /**
     * Links to self and configuration resources.
     */
    
    export interface ISelfConfigurationLinks  {
        self? : IHRef;
        configuration? : IHRef;
   
    }
         
    /**
     * Links to self and image resources.
     */
    
    export interface ISelfSelectablesImageVehicleLinks  {
        self? : IHRef;
        selectables? : IHRef;
        imageapi_vehicle? : IHRef;
   
    }
         
    /**
     * Market specific links to the specific resources. i.e.
     * classes, bodies, etc.
     */
    
    export interface ISelfReferencesLinks  {
        self? : IHRef;
        classes? : IHRef;
        bodies? : IHRef;
        models? : IHRef;
        productgroups? : IHRef;
   
    }
         
    /**
     * The URL to the specific resource.
     */
    
    export interface IHRef  {
        href? : string;
   
    }
         
    /**
     * A vehicle component.
     */
    
    export interface IVehicleComponent  {
        id? : string;
        componentSortId? : number;
        name? : string;
        /*
         * HTML elements can be present
         */
        description? : string;
        code? : string;
        codeType? : string;
        componentType? : IVehicleComponentType;
        priceInformation? : IPriceInformation;
        /*
         * Standard equipment
         */
        standard? : boolean;
        /*
         * Selected by the customer
         */
        selected? : boolean;
        /*
         * Cannot changed by the customer
         */
        fixed? : boolean;
        /*
         * Hidden, should not be displayed to the customer, not
         * relevant for the customer
         */
        hidden? : boolean;
        /*
         * Not relevant for the customer
         */
        pseudoCode? : boolean;
        _links? : IImageComponentLink;
   
    }
         
    export interface ISwaggerInlineType28  {
        componentId? : IVehicleComponent;
   
    }
         
    /**
     * Contains the vehicle components and the structure with
     * component categories.
     */
    
    export interface IVehicleComponentTree  {
        vehicleComponents? : ISwaggerInlineType28;
        componentCategories? : Array<IVehicleComponentCategory>;
        _links? : ISelfLink;
   
    }
         
    /**
     * The component category of a VehicleComponent.
     */
    
    export interface IVehicleComponentCategory  {
        categoryId? : string;
        categorySortId? : number;
        categoryName? : string;
        cardinality? : IVehicleComponentCategoryCardinality;
        subcategories? : Array<IVehicleComponentCategory>;
        componentIds? : Array<IVehicleComponentId>;
   
    }
         
    /**
     * The component id of a VehicleComponent.
     */
    
    export interface IVehicleComponentId  {
        componentId? : string;
   
    }
         
    /**
     * The cardinality of the vehicle components belong to
     * component category.
     */
    
    export type IVehicleComponentCategoryCardinality = string;
    
    /**
     * The component type of a vehicle component.
     */
    
    export type IVehicleComponentType = string;
    
    /**
     * A vehicle configuration.
     */
    
    export interface IVehicleConfiguration  {
        marketId? : string;
        modelId? : string;
        configurationId? : string;
        initialPrice? : IPriceInformation;
        configurationPrice? : IPriceInformation;
        modelYear? : string;
        changeYear? : string;
        vehicleComponents? : Array<IVehicleComponent>;
        technicalInformation? : ITechnicalInformation;
        wltpConfiguration? : boolean;
        _links? : ISelfSelectablesImageVehicleLinks;
   
    }
         
    /**
     * Contains all technical information calculated using BDAs.
     */
    
    export interface ITechnicalInformation  {
        engine? : IEngine;
        energyEfficiencyClass? : string;
        transmission? : ITransmission;
        acceleration? : IAmount;
        topSpeed? : IAmount;
        doors? : number;
        seats? : number;
        nedc? : INedc;
        wltp? : IWltp;
   
    }
         
    /**
     * All technical information about a specific engine.
     */
    
    export interface IEngine  {
        fuelType? : IFuelType;
        alternativeFuelType? : IFuelType;
        engineConcept? : IEngineConcept;
        driveConcept? : IDriveConcept;
        fuelEconomy? : IFuelEconomy;
        powerHp? : IAmount;
        powerKw? : IAmount;
        powerHybridExtensionHp? : IAmount;
        powerHybridExtensionKw? : IAmount;
        cylinder? : string;
        capacity? : IAmount;
        emissionStandard? : string;
   
    }
         
    /**
     * The kind of fuel used by an engine of a vehicle. Where
     * UNDEFINED is used as the default and/or error case.
     */
    
    export type IFuelType = string;
    
    /**
     * The kind of fuel used by an engine of a vehicle determines
     * the engine type. Where UNDEFINED is used as the default
     * and/or error case.
     */
    
    export type IEngineConcept = string;
    
    /**
     * The kind of drive concept of a vehicle. Where UNDEFINED is
     * used as the default and/or error case.
     */
    
    export type IDriveConcept = string;
    
    /**
     * This is for the fuel consumption holding a value and unit.
     */
    
    export interface IFuelEconomy  {
        fuelConsumptionCityMin? : IAmount;
        fuelConsumptionCityMax? : IAmount;
        fuelConsumptionOverlandMin? : IAmount;
        fuelConsumptionOverlandMax? : IAmount;
        fuelConsumptionCombinedMin? : IAmount;
        fuelConsumptionCombinedMax? : IAmount;
        fuelConsumptionElectricity? : IAmount;
        consumptionOfElectricityMin? : IAmount;
        consumptionOfElectricityMax? : IAmount;
        emissionCO2Min? : IAmount;
        emissionCO2Max? : IAmount;
   
    }
         
    /**
     * The transmission of the vehicle configuration.
     */
    
    export interface ITransmission  {
        name? : string;
        code? : string;
        codeType? : string;
   
    }
         
    /**
     * Holds a value and unit.
     */
    
    export interface IAmount  {
        unit? : string;
        value? : number;
   
    }
         
    /**
     * A vehicle alternative.
     */
    
    export interface IVehicleAlternative  {
        marketId? : string;
        modelId? : string;
        configurationId? : string;
        addedComponents? : Array<IVehicleComponent>;
        removedComponents? : Array<IVehicleComponent>;
        updatedComponents? : Array<IVehicleComponent>;
        priceInformation? : any;
        _links? : ISelfSelectablesImageVehicleLinks;
   
    }
         
    /**
     * JSON object containing the modelId and the configurationId
     */
    
    export interface IOnlineCodeRequestBody  {
        /*
         * String that identifies a model. e.g. '176042_002'
         */
        modelId? : string;
        /*
         * String that identifies a configuration. e.g.
         * E-D15-D18-D41-D46-D49-D52-D53-D54-D59-D60-D71-F32-F36-F88-F98-G03-G05-G36-G56-I61-J67-M23-M70-N18-N25-N62-N92-O76-Q29-Q56-Q79-Q92-S01-S05-S08-S63-S92-T05-T07-T62-T84-T88_I-953_L-696_P-001_S-152-160-161-171-258-290-292-294-411-442-470-472-475-485-516-533-538-560-570-573-580-584-58U-591-620-70B-807-888-B03-B16-B51-K11-L18-R43-U60
         */
        configurationId? : string;
   
    }
         
    /**
     * The onlinecode is a unique identifier for a stored vehicle
     * configuration.
     */
    
    export interface IOnlineCodeResponseBody  {
        /*
         * String that identifies the online code
         */
        onlineCode? : string;
   
    }
         
    /**
     * Represent the active product groups for a market.
     */
    
    export interface IProductGroupsPerMarket  {
        market? : IMarket;
        productGroups? : Array<IProductGroup>;
        _links? : ISelfModelLinks;
   
    }
         
    /**
     * Represent a product group.
     */
    
    export interface IProductGroup  {
        name? : string;
   
    }
         
    /**
     * Holds all relevant informations for the Nedc 'New European
     * Drive Cycle'.
     */
    
    export interface INedc  {
        consumption? : INedcConsumption;
        emission? : INedcEmission;
        electricRange? : INedcAmount;
        weight? : INedcAmount;
   
    }
         
    /**
     * The Nedc 'New European Drive Cycle' consumption.
     */
    
    export interface INedcConsumption  {
        city? : INedcGear;
        country? : INedcGear;
        combined? : INedcGear;
        weighted? : INedcGear;
        electric? : INedcAmount;
   
    }
         
    /**
     * The Nedc 'New European Drive Cycle' emission.
     */
    
    export interface INedcEmission  {
        city? : INedcGear;
        country? : INedcGear;
        combined? : INedcGear;
        weighted? : INedcAmount;
   
    }
         
    /**
     * The gear of a vehicle. A vehicle can have a primary and a
     * secondary gear.
     */
    
    export interface INedcGear  {
        primaryGear? : INedcAmount;
        secondaryGear? : INedcAmount;
   
    }
         
    /**
     * The Nedc 'New European Drive Cycle' specific amount holds
     * the nedc specific values.
     */
    
    export interface INedcAmount  {
        individual? : IAmount;
        min? : IAmount;
        max? : IAmount;
   
    }
         
    /**
     * Holds all relevant informations for the Wltp 'Worldwide
     * harmonized Light vehicles Test Procedure' drive cycle.
     */
    
    export interface IWltp  {
        consumption? : IWltpConsumption;
        emission? : IWltpEmission;
   
    }
         
    /**
     * The Wltp 'Worldwide harmonized Light vehicles Test
     * Procedure' consumption.
     */
    
    export interface IWltpConsumption  {
        low? : IWltpGear;
        medium? : IWltpGear;
        high? : IWltpGear;
        extraHigh? : IWltpGear;
        total? : IWltpGear;
        weighted? : IWltpGear;
        chargeDeplete? : IWltpGear;
        chargeDepleteCop? : IWltpGear;
   
    }
         
    /**
     * The Wltp 'Worldwide harmonized Light vehicles Test
     * Procedure' range.
     */
    
    export interface IWltpRange  {
        low? : IWltpElectricRange;
        medium? : IWltpElectricRange;
        high? : IWltpElectricRange;
        lowMid? : IWltpElectricRange;
        total? : IWltpElectricRange;
   
    }
         
    /**
     * The Wltp 'Worldwide harmonized Light vehicles Test
     * Procedure' emission.
     */
    
    export interface IWltpEmission  {
        low? : IWltpGear;
        medium? : IWltpGear;
        high? : IWltpGear;
        extraHigh? : IWltpGear;
        total? : IWltpGear;
        weighted? : IWltpGear;
        chargeDeplete? : IWltpGear;
        chargeDepleteCop? : IWltpGear;
        chargeDepleteWeighted? : IWltpGear;
        lowMid? : IWltpGear;
   
    }
         
    /**
     * The gear of a vehicle. A vehicle can have a primary and a
     * secondary gear.
     */
    
    export interface IWltpGear  {
        primaryGear? : IWltpAmount;
        secondaryGear? : IWltpAmount;
   
    }
         
    /**
     * The allElectric and equivalentAllElectric range that a
     * vehicle (pure-electic or hybrid) can reach
     */
    
    export interface IWltpElectricRange  {
        all? : IWltpAmount;
        equivalentAll? : IWltpAmount;
   
    }
         
    /**
     * The Wltp 'Worldwide harmonized Light vehicles Test
     * Procedure' drive cycle specific amount holds the wltp
     * specific values.
     */
    
    export interface IWltpAmount  {
        individual? : IAmount;
        min? : IAmount;
        max? : IAmount;
   
    }
         
    /**
     * The response object holds either an error object, in case
     * that the request was malformed, or a vehicle object
     * containing all urls for the requested perspectives.
     */
    
    export interface IVehicleImageResponse  {
        /*
         * A map holding a vehicle image for each requested
         * perspective, e.g. EXT000.
         */
        vehicle? : any;
   
    }
         
    /**
     * The response object holds either an error object, in case
     * that the request was malformed, or an equipments object
     * containing a map with all equipment urls for the requested
     * vehicle with the equipment codes as map keys.
     */
    
    export interface IAllEquipmentImagesResponse  {
        equipments? : IEquipmentImageMap;
   
    }
         
    /**
     * The map holds either an error object, in case that the
     * request was malformed, or an equipments object containing a
     * map with all equipment image urls for the requested vehicle
     * with the equipment codes as map keys.
     */
    
    export interface IEquipmentImageMap  {
   
    }
         
    /**
     * An object describing an image URL that could be a vehicle
     * image for example. This includes the URL to the content. In
     * case of an error that is related to the requested image
     * material (e.g. perspective), an error object is present
     * containing further information.
     */
    
    export interface IImageUrlWithError  {
        url? : string;
        error? : IImageError;
   
    }
         
    /**
     * An object describing an image URL that could be a vehicle
     * image for example. This includes the URL to the content.
     */
    
    export interface IImageUrl  {
        url? : string;
   
    }
         
    /**
     * The code image contains an equipment code with a
     * corresponding image URL.
     */
    
    export interface ICodeImage  {
        /*
         * The equipment code for the corresponding image.
         */
        code? : string;
        /*
         * An URL pointing to an image of an equipment.
         */
        url? : string;
   
    }
         
    /**
     * A rim image object
     */
    
    export interface IRimImageResponse  {
        rim? : ICodeImage;
   
    }
         
    /**
     * A trim image object
     */
    
    export interface ITrimImageResponse  {
        trim? : ICodeImage;
   
    }
         
    /**
     * A paint image object
     */
    
    export interface IPaintImageResponse  {
        paint? : IPaintsImages;
   
    }
         
    /**
     * An upholstery image object
     */
    
    export interface IUpholsteryImageResponse  {
        upholstery? : ICodeImage;
   
    }
         
    /**
     * An equipment image object
     */
    
    export interface IEquipmentImageResponse  {
        equipment? : IImageUrl;
   
    }
         
    /**
     * An engine image object
     */
    
    export interface IEngineImageResponse  {
        engine? : IImageUrl;
   
    }
         
    /**
     * Components images object
     */
    
    export interface IComponentsImagesResponse  {
        components? : IComponentsImages;
   
    }
         
    /**
     * A set of URLs pointing to images of the vehicle in low
     * resolution.
     */
    
    export interface IComponentsImages  {
        equipments? : IEquipmentImageMap;
        paint? : IPaintsImages;
        engine? : IImageUrl;
        trim? : ICodeImage;
        rim? : ICodeImage;
        upholstery? : ICodeImage;
   
    }
         
    /**
     * The upper (paint2) and the lower (paint1) paint of the
     * vehicle.
     */
    
    export interface IPaintsImages  {
        paint1? : ICodeImage;
        paint2? : ICodeImage;
   
    }
         
    /**
     * The error object containing detailed information about the
     * error.
     */
    
    export interface IImageError  {
        code? : string;
        message? : string;
        uuid? : string;
   
    }
     