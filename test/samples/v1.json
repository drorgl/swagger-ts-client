{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "nonsense API"
  },
  "basePath": "/api/v1",
  "consumes": [ "application/json" ],
  "produces": [ "application/json", "text/plain" ],
  "paths": {
    "/elasticubes/sets": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getSets",
        "summary": "Get ElastiCube sets",
        "description": "The **get ElastiCube sets** endpoint returns a list of ElastiCube sets.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "An Array of ElastiCube Sets.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "pattern": "^[^#]*$"
                  },
                  "routingMode": { "type": "string" },
                  "fullNames": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      },
      "post": {
        "x-permission-type": "none",
        "operationId": "addSet",
        "summary": "Add ElastiCube sets",
        "description": "The *add ElastiCube set* endpoint receives a new ElastiCube set object and creates that set in nonsense, returning the created object.\n<br/>If a server full name does not exist, an error will be returned.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "pattern": "^[^#]*$"
                },
                "routingMode": { "type": "string" },
                "fullNames": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                  }
                }
              }
            }
          },
          "400": {
            "description": "- **22001** The 'fullNames' parameter must be an array\n- **22002** The 'fullNames' parameter cannot be empty\n- **22003** The ElastiCube set already exists\n- **22004** One or more of the given ElastiCubes could not be found\n- **22005** One or more of the given ElastiCubes are already part of the ElastiCube set\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic ElastiCube set object (in `JSON` notation) to be added",
            "name": "set",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "pattern": "^[^#]*$"
                },
                "routingMode": { "type": "string" },
                "fullNames": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/sets/{title}": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getSet",
        "summary": "Get ElastiCube set",
        "description": "The **get ElastiCube set** endpoint returns an ElastiCube set by title.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "ElastiCubes Set.",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "pattern": "^[^#]*$"
                },
                "routingMode": { "type": "string" },
                "fullNames": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube set to get",
            "name": "title",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "none",
        "operationId": "updateSet",
        "summary": "Update ElastiCube set",
        "description": "The **update ElastiCube set** endpoint updates the ElastiCube set by title and returns the updated object.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "pattern": "^[^#]*$"
                },
                "routingMode": { "type": "string" },
                "fullNames": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                  }
                }
              }
            }
          },
          "400": {
            "description": "- **22001** The 'fullNames' parameter must be an array\n- **22002** The 'fullNames' parameter cannot be empty\n- **22003** The ElastiCube set already exists\n- **22004** One or more of the given ElastiCubes could not be found\n- **22005** One or more of the given ElastiCubes are already part of the ElastiCube set\n- **22006** The ElastiCube set not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube set to update",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Basic ElastiCube set object (in `JSON` notation) to be added",
            "name": "set",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "pattern": "^[^#]*$"
                },
                "routingMode": { "type": "string" },
                "fullNames": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                  }
                }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "operationId": "deleteSet",
        "summary": "Delete ElastiCube set",
        "description": "The **delete ElastiCube set** endpoint deletes the ElastiCube set by title.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "204": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "pattern": "^[^#]*$"
                },
                "routingMode": { "type": "string" },
                "fullNames": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
                  }
                }
              }
            }
          },
          "400": {
            "description": "- **22006** SetNotFound\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube set to delete",
            "name": "title",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/{elasticube}/jaql/explain": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "none",
        "operationId": "explainJaql",
        "summary": "Explains the jaql",
        "description": "The **explain Jaql** endpoint explains the jaql.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "An object of jaql explain.",
            "schema": { "type": "object" }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube set to delete",
            "name": "elasticube",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to include row count",
            "name": "rowcount",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Whether to include unique count",
            "name": "uniquecount",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "description": "Jaql Object to be explained",
            "name": "jaql",
            "schema": { "type": "object" },
            "required": true
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/revision": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getRevision",
        "summary": "Get ElastiCube build revision",
        "description": "Get ElastiCube and Elasticubes sets build revision.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "An Array of ElastiCube Sets.",
            "schema": { "type": "string" }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/sql_manual_query": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "none",
        "summary": "Creates an SQL query",
        "description": "The **post sql manual query** endpoint creates an SQL query on an ElastiCube.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Creating successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" },
                    "connectionString": { "type": "string" },
                    "providerName": {
                      "type": "string",
                      "enum": [ "sql", "MySql" ]
                    },
                    "schemaName": { "type": "string" },
                    "originalTableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The manualTableSqlQuery object that defines the SQL query that creates a table and the name of the new table",
            "name": "manualTableSqlQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "queryString": { "type": "string" },
                "tableName": { "type": "string" },
                "connectionString": { "type": "string" },
                "providerName": {
                  "type": "string",
                  "enum": [ "sql", "MySql" ]
                },
                "schemaName": { "type": "string" },
                "originalTableName": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/sql_manual_query/{tableName}": {
      "get": {
        "x-permission-type": "none",
        "summary": "Get an SQL query",
        "description": "The **get sql manual query** endpoint returns an SQL query for an ElastiCube table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Reading successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" },
                    "connectionString": { "type": "string" },
                    "providerName": {
                      "type": "string",
                      "enum": [ "sql", "MySql" ]
                    },
                    "schemaName": { "type": "string" },
                    "originalTableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table to get",
            "name": "tableName",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "none",
        "summary": "Update an SQL query",
        "description": "The **update sql manual query** endpoint updates the SQL query of an ElastiCube table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Updated successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" },
                    "connectionString": { "type": "string" },
                    "providerName": {
                      "type": "string",
                      "enum": [ "sql", "MySql" ]
                    },
                    "schemaName": { "type": "string" },
                    "originalTableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the SQL query is to be updated",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the SQL query is to be updated",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the SQL query is to be updated",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The new SQL query that replaces the existing query",
            "name": "manualTableSqlQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "queryString": { "type": "string" },
                "tableName": { "type": "string" },
                "connectionString": { "type": "string" },
                "providerName": {
                  "type": "string",
                  "enum": [ "sql", "MySql" ]
                },
                "schemaName": { "type": "string" },
                "originalTableName": { "type": "string" }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "summary": "Delete an SQL query",
        "description": "The **delete sql manual query** endpoint deletes the SQL query of an ElastiCube table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- SQL query deleted successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" },
                    "connectionString": { "type": "string" },
                    "providerName": {
                      "type": "string",
                      "enum": [ "sql", "MySql" ]
                    },
                    "schemaName": { "type": "string" },
                    "originalTableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the SQL query is to be deleted",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get where the SQL query is to be deleted",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the SQL query is to be deleted",
            "name": "tableName",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/custom_tables": {
      "get": {
        "x-permission-type": "none",
        "summary": "Get an ElastiCube’s custom tables",
        "description": "The **get custom tables** endpoint returns a list of SQL queries for custom tables and their table names.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Reading successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "tables": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "queryString": { "type": "string" },
                      "tableName": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "none",
        "summary": "Creates a custom table",
        "description": "The **post custom tables** endpoint creates a custom table on an ElastiCube through an SQL query.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Creating successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the custom table is to be created",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the custom table is to be created",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The tableSqlQuery object that defines the SQL query that creates a table and the name of the custom table",
            "name": "tableSqlQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "queryString": { "type": "string" },
                "tableName": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/custom_tables/{tableName}": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "summary": "Get an SQL query for a custom table",
        "description": "The **get custom table** endpoint returns an SQL query for a custom table in an ElastiCube.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Reading successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table to get",
            "name": "tableName",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "none",
        "summary": "Update an SQL query",
        "description": "The **patch custom table** endpoint updates a custom table’s SQL query.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Updated successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the custom table is to be updated",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the custom table is to be updated",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the custom table is to be updated",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The sqlQuery object that defines the SQL query of the custom table",
            "name": "sqlQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": { "queryString": { "type": "string" } }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "summary": "Delete a custom table",
        "description": "The **delete custom table** endpoint deletes the SQL query that defines a custom table, removing the table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Deleted successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "tableName": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the custom table is to be deleted",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the custom table is to be deleted",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the custom table is to be deleted",
            "name": "tableName",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/{tableName}/custom_fields": {
      "get": {
        "x-permission-type": "none",
        "summary": "Get a list of custom fields",
        "description": "The **get custom fields** endpoint returns a list of custom fields and their SQL queries.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Reading successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "queryString": { "type": "string" },
                      "fieldName": { "type": "string" },
                      "fieldType": {
                        "type": "string",
                        "default": "BigInt",
                        "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table to get",
            "name": "tableName",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "none",
        "summary": "Adds a custom field",
        "description": "The **post custom fields** endpoint adds a custom field to a table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Creating successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "fieldName": { "type": "string" },
                    "fieldType": {
                      "type": "string",
                      "default": "BigInt",
                      "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the custom field is to be created",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the custom field is to be created",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the custom field is to be created",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The fieldSqlQuery object that defines the SQL query and the name of the custom field",
            "name": "fieldSqlQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "queryString": { "type": "string" },
                "fieldName": { "type": "string" },
                "fieldType": {
                  "type": "string",
                  "default": "BigInt",
                  "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/{tableName}/custom_fields/{fieldName}": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "summary": "Get the SQL query of a custom field",
        "description": "The **get custom field** endpoint returns the SQL query of a custom field.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Reading successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "fieldName": { "type": "string" },
                    "fieldType": {
                      "type": "string",
                      "default": "BigInt",
                      "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table to get",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table filed to get",
            "name": "fieldName",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "none",
        "summary": "Updates a custom field",
        "description": "The **patch custom field** endpoint updates the SQL query of a custom field.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Updated successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "fieldName": { "type": "string" },
                    "fieldType": {
                      "type": "string",
                      "default": "BigInt",
                      "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the custom field is to be updated",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the custom field is to be updated",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the custom field is to be updated",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table filed where the custom field is to be updated",
            "name": "fieldName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The sqlQuery object that defines the SQL query of a custom field",
            "name": "sqlQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "queryString": { "type": "string" },
                "fieldType": {
                  "type": "string",
                  "default": "BigInt",
                  "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "summary": "Delete a custom field",
        "description": "The **delete custom field** endpoint deletes the SQL query that creates a custom field removing the field from the table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Deleted successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "object",
                  "properties": {
                    "queryString": { "type": "string" },
                    "fieldName": { "type": "string" },
                    "fieldType": {
                      "type": "string",
                      "default": "BigInt",
                      "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the custom field is to be deleted",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the custom field is to be deleted",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the custom field is to be deleted",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table filed to get",
            "name": "fieldName",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/{tableName}/relations": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "none",
        "summary": "Create a relation between two fields",
        "description": "The **post relations** endpoint creates a new relationship between two fields in an ElastiCube table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Creating successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "relation": {
                  "type": "object",
                  "properties": {
                    "sourceField": { "type": "string" },
                    "targetTable": { "type": "string" },
                    "targetField": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the relation is to be created",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the relation is to be created",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the relation is to be created",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The fieldUpdateRelation object that defines the relation between two fields in a table",
            "name": "fieldUpdateRelation",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "sourceField": { "type": "string" },
                "targetTable": { "type": "string" },
                "targetField": { "type": "string" }
              }
            }
          }
        ]
      },
      "get": {
        "x-permission-type": "none",
        "summary": "Get an ElastiCube table’s relation",
        "description": "The **get relations** endpoint returns an ElastiCube table’s relations.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Reading successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "relations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sourceField": { "type": "string" },
                      "targetTable": { "type": "string" },
                      "targetField": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube to get",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table to get",
            "name": "tableName",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "none",
        "summary": "Update a relation between two fields",
        "description": "The **patch relations** endpoint updates a relation between two fields in an ElastiCube table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Updated successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "relation": {
                  "type": "object",
                  "properties": {
                    "sourceField": { "type": "string" },
                    "targetTable": { "type": "string" },
                    "targetField": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the relation is to be updated",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the relation is to be updated",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the relation is to be updated",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The fieldUpdateRelation object that defines the relation between two fields in a table",
            "name": "fieldUpdateRelation",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "sourceField": { "type": "string" },
                "targetTable": { "type": "string" },
                "targetField": { "type": "string" },
                "newTargetTable": { "type": "string" },
                "newTargetField": { "type": "string" }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "summary": "Deletes a relation",
        "description": "The **delete relations** endpoint deletes a relation between two fields in an ElastiCube table.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Deleted successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "relation": {
                  "type": "object",
                  "properties": {
                    "sourceField": { "type": "string" },
                    "targetTable": { "type": "string" },
                    "targetField": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube where the relation is to be deleted",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube where the relation is to be deleted",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the table where the relation is to be deleted",
            "name": "tableName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The fieldUpdateRelation object that defines which realtion delete in a table",
            "name": "fieldRelation",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "sourceField": { "type": "string" },
                "targetTable": { "type": "string" },
                "targetField": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/servers/{server}/settings": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "admin-only",
        "summary": "Updates the settings of Elasticubes Server",
        "description": "The **post server settings** updated the settings of Elasticbes server.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Updating successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "serverSettings": {
                  "type": "object",
                  "properties": {
                    "DefaultDataDirectory": { "type": "string" },
                    "ElasticubeMemoryAllocation": { "type": "integer" },
                    "DataImportChunkSize": { "type": "integer" },
                    "SimultaneousQueryExecutions": { "type": "integer" },
                    "QueryTimeout": { "type": "integer" },
                    "RecycleQueries": {
                      "type": "boolean",
                      "default": true
                    },
                    "RserverEnabled": {
                      "type": "boolean",
                      "default": false
                    },
                    "Rserver": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ElastiCube server address",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "boolean value for restarting the ElastiCubes or not",
            "name": "restart",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "body",
            "description": "The settings object to update",
            "name": "serverSettings",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DefaultDataDirectory": { "type": "string" },
                "ElasticubeMemoryAllocation": { "type": "integer" },
                "DataImportChunkSize": { "type": "integer" },
                "SimultaneousQueryExecutions": { "type": "integer" },
                "QueryTimeout": { "type": "integer" },
                "RecycleQueries": {
                  "type": "boolean",
                  "default": true
                },
                "RserverEnabled": {
                  "type": "boolean",
                  "default": false
                },
                "Rserver": { "type": "string" }
              }
            }
          }
        ]
      },
      "get": {
        "x-permission-type": "admin-only",
        "summary": "Get the settings of Elasticubes Server",
        "description": "The **get server settings** gets the settings of Elasticbes server.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Got successfully\n",
            "schema": {
              "type": "object",
              "properties": {
                "serverSettings": {
                  "type": "object",
                  "properties": {
                    "DefaultDataDirectory": { "type": "string" },
                    "ElasticubeMemoryAllocation": { "type": "integer" },
                    "DataImportChunkSize": { "type": "integer" },
                    "SimultaneousQueryExecutions": { "type": "integer" },
                    "QueryTimeout": { "type": "integer" },
                    "RecycleQueries": {
                      "type": "boolean",
                      "default": true
                    },
                    "RserverEnabled": {
                      "type": "boolean",
                      "default": false
                    },
                    "Rserver": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube to get",
            "name": "server",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/servers/{server}/settings/rserver/test": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "summary": "Tests connectivity to R server",
        "description": "The **test R server** tests connectivity to R server\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "- Got successfully\n",
            "schema": { "type": "boolean" }
          },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ElastiCube server",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The R server address",
            "name": "rserver",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/elasticubes/{server}/{title}/updateCube": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "updateCube",
        "summary": "Update ElastiCube",
        "description": "The *Update ElastiCube* endpoint updating ElastiCube object.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": { "description": "Update operation was successful" },
          "404": {
            "description": "Resource Not Found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The server of the ElastiCube",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The title of the ElastiCube",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The object that contain parameters to update or create",
            "name": "updateObj",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fiscal": {
                  "type": "string",
                  "description": "Fiscal Year.",
                  "enum": [ "system", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" ]
                }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/getElasticubes": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getElasticubes",
        "summary": "Get ElastiCubes",
        "description": "The **get Elasticubes Model** endpoint returns an array of ElastiCube Models.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": { "description": "- An Array of ElastiCube Models.\n" },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      },
      "post": {
        "x-permission-type": "none",
        "operationId": "getElasticubes",
        "summary": "Get ElastiCube",
        "description": "The **get Elasticubes Model** endpoint returns an array of ElastiCube Models.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": { "description": "- An Array of ElastiCube Models.\n" },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "- An Array of ElastiCubes for which need to get a model\n",
            "name": "cubes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "elasticube": { "type": "string" },
                  "server": { "type": "string" }
                }
              }
            }
          }
        ]
      }
    },
    "/elasticubes/permissionsCheck": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "elasticubes/check_users_permission",
        "operationId": "permissionsCheck",
        "summary": "Check elasticubes permissions",
        "tags": [ "elasticubes" ],
        "description": "Check elasticubes/dataset permission across users and groups\n",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "- An array of objects with users array, groups array and elasticube, server property or dataset\n",
            "name": "permissionsCube",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "users", "groups" ],
                "properties": {
                  "dataset": { "type": "string" },
                  "server": { "type": "string" },
                  "elasticube": { "type": "string" },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "email": { "type": "string" }
                      }
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permision verification result.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dataset": { "type": "string" },
                  "server": { "type": "string" },
                  "elasticube": { "type": "string" },
                  "allMembersAllowed": { "type": "boolean" },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "accessAllowed": { "type": "boolean" },
                        "email": { "type": "string" }
                      }
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "accessAllowed": { "type": "boolean" },
                        "name": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "- **500** Internal Server Error\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/elasticubes/cubeShares": {
      "x-swagger-router-controller": "elasticubes.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "addCubesShares",
        "summary": "Adding members to elasticubes shares array",
        "description": "The **adding members to Elasticubes Model** endpoint returns an object of ElastiCube Models.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": { "description": "- ElastiCube Model.\n" },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "- An object with elasticube id or title, server, shares array info\n",
            "name": "server",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "server", "elasticube", "shares" ],
              "properties": {
                "server": { "type": "string" },
                "elasticube": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "partyId": { "type": "string" },
                      "type": { "type": "string" },
                      "email": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/users": {
      "x-swagger-router-controller": "users.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/get",
        "operationId": "getUsers",
        "summary": "Get users",
        "description": "The **get users** endpoint returns a list of users with their details.\n<br/>Results can be filtered by parameters such as username and email.\n<br/><br/>The expandable fields for the user object are `groups`, `adgroups` and `role`.\n",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "An array of users",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "email": {
                    "type": "string",
                    "pattern": ""
                  },
                  "userName": { "type": "string" },
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "roleId": { "type": "string" },
                  "active": { "type": "boolean" },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    }
                  },
                  "adgroups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                    }
                  },
                  "activeDirectory": { "type": "boolean" },
                  "principalName": { "type": "string" },
                  "objectSid": { "type": "string" },
                  "uSNChanged": { "type": "string" },
                  "dn": { "type": "string" },
                  "preferences": {
                    "type": "object",
                    "properties": {
                      "localeId": { "type": "string" },
                      "language": { "type": "string" }
                    }
                  },
                  "uiSettings": { "type": "object" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastLogin": { "type": "string" },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "pendingExpiration": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "createdSso": { "type": "string" }
                }
              }
            }
          },
          "404": {
            "description": "Invalid expand parameter.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Username to filter by",
            "name": "userName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Email to filter by",
            "name": "email",
            "required": false,
            "type": "string",
            "pattern": ""
          },
          {
            "in": "query",
            "description": "First name to filter by",
            "name": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Last name to filter by",
            "name": "lastName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Role ID to filter by",
            "name": "roleId",
            "required": false,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Group ID to filter by",
            "name": "groupId",
            "required": false,
            "type": "string",
            "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
          },
          {
            "in": "query",
            "description": "User state to filter by - `true` for active users, `false` for inactive users",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "User origin to filter by - `ad` for active directory or `nonsense`",
            "name": "origin",
            "required": false,
            "type": "string",
            "enum": [ "ad", "nonsense" ]
          },
          {
            "in": "query",
            "description": "Array of user IDs to get, separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/add",
        "operationId": "addUser",
        "summary": "Add a new user",
        "description": "The *add user* endpoint receives a new user object and creates that user in nonsense, returning the created object.\n<br/>If a user with the same username or email exists, it will return an error.\n",
        "tags": [ "users" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "- **2004** The user already exists.\n- **2006** Multiple super-users are not allowed.\n- **2007** Cannot add user because the license has been exceeded.\n- **2009** Mandatory fields cannot be empty.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": { "description": "Role not found." },
          "422": {
            "description": "- **601** Invalid object ID.\n- **2003** Mandatory fields are missing.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic user object (in `JSON` notation) to be added",
            "name": "user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "preferences": {
                  "type": "object",
                  "properties": { "localeId": { "type": "string" } }
                },
                "uiSettings": { "type": "object" }
              }
            }
          }
        ]
      }
    },
    "/users/ad": {
      "x-swagger-router-controller": "users.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/add",
        "operationId": "addAdUser",
        "summary": "Add a new Active Directory user",
        "description": "The **add Active Directory user** endpoint receives an Active Directory user object, retrieves the user's details from Active Directory and adds it to the application.",
        "tags": [ "users" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "- **2004** The user already exists.\n- **2006** Multiple super-users are not allowed.\n- **2007** Cannot add user because the license has been exceeded.\n- **2008** Cannot add a user that does not have a principal name in Active Directory.\n- **2009** Mandatory fields cannot be empty.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "- **601** Invalid object ID.\n- **2003** Mandatory fields are missing.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Active Directory user object to be added",
            "name": "adUser",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userName": { "type": "string" },
                "roleId": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "objectSid": {
                  "type": "string",
                  "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                },
                "preferences": {
                  "type": "object",
                  "properties": { "localeId": { "type": "string" } }
                },
                "uiSettings": { "type": "object" }
              }
            }
          }
        ]
      }
    },
    "/users/bulk": {
      "x-swagger-router-controller": "users.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/add",
        "operationId": "addUsers",
        "summary": "Add several users at once",
        "description": "The **bulk add** endpoint allows adding multiple users at once, by receiving an array of user objects whose structure is alike to the single **add user** endpoint.",
        "tags": [ "users" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "pattern": ""
                  },
                  "userName": { "type": "string" },
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "roleId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    }
                  },
                  "preferences": {
                    "type": "object",
                    "properties": { "localeId": { "type": "string" } }
                  },
                  "uiSettings": { "type": "object" }
                }
              }
            }
          },
          "400": {
            "description": "- **2002** Invalid Users format. Users must be passed as an array.\n- **2004** One or more of the given users already exists.\n- **2005** The given users contain duplicates.\n- **2006** Multiple super-users are not allowed.\n- **2007** Cannot add user because the license has been exceeded.\n- **2009** Mandatory fields cannot be empty.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "- **601** Invalid object ID.\n- **2003** Mandatory fields are missing.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "A collection of basic user objects (in `JSON` notation) to be added",
            "name": "users",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/nonsenseUser" }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/remove",
        "operationId": "deleteUsers",
        "summary": "Delete users",
        "description": "The *delete users* endpoint receives users' ids and deletes these users in nonsense.\n<br/>If a user with the specified id is not exists, it will return an error.\n",
        "tags": [ "users" ],
        "responses": {
          "204": { "description": "No response was specified" },
          "400": { "description": "- **2011** A super-user cannot be deleted.\n" },
          "404": { "description": "- **2001** One or more users not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Array of user IDs to get, separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          }
        ]
      }
    },
    "/users/ad/bulk": {
      "x-swagger-router-controller": "users.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/add",
        "operationId": "addAdUsers",
        "summary": "Bulk add Active Directory users",
        "description": "The **bulk add Active Directory user** endpoint receives an array of Active Directory user objects, retrieves the user's details from Active Directory and adds it to the application.",
        "tags": [ "users" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "userName": { "type": "string" },
                  "roleId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    }
                  },
                  "objectSid": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  },
                  "preferences": {
                    "type": "object",
                    "properties": { "localeId": { "type": "string" } }
                  },
                  "uiSettings": { "type": "object" }
                }
              }
            }
          },
          "400": {
            "description": "- **2002** Invalid Users format. Users must be passed as an array.\n- **2004** One or more of the given users already exists.\n- **2005** The given users contain duplicates.\n- **2006** Multiple super-users are not allowed.\n- **2007** Cannot add users because the license has been exceeded.\n- **2008** Cannot add a user that does not have a principal name in Active Directory.\n- **2009** Mandatory fields cannot be empty.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "- **601** Invalid object ID.\n- **2003** Mandatory fields are missing.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Array of Active Directory user objects to be added",
            "name": "adUsers",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/adUser" }
            }
          }
        ]
      }
    },
    "/users/preferences": {
      "x-swagger-router-controller": "users.controller.v1",
      "patch": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "updateUserPreferences",
        "summary": "Update user's preferences, for example, localeId or language",
        "description": "The **update user preferences** endpoint changes preferences (localeId, language, etc) for the current user.\n",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Fields for update in the user preferences",
            "name": "newUserPreferences",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "localeId": { "type": "string" },
                "language": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/users/uiSettings": {
      "x-swagger-router-controller": "users.controller.v1",
      "patch": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "updateUserUiSettings",
        "summary": "Update user's ui settings, for example, show welcome notification",
        "description": "The **update user ui settings** endpoint saves ui settings chosen by the user itself.\n",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Fields for update in the user ui settings",
            "name": "newUserUiSettings",
            "required": true,
            "schema": { "type": "object" }
          }
        ]
      }
    },
    "/users/{id}/uiSettings": {
      "x-swagger-router-controller": "users.controller.v1",
      "delete": {
        "x-hide": true,
        "x-permission-type": "general",
        "x-permission-path": "manage/users/modify",
        "operationId": "resetUiSettings",
        "summary": "Reset user's ui settings",
        "description": "The *delete user's ui settings* endpoint receives a user id and reset that user's ui settings.\n<br/>If a user with the specified id is not exists, it will return an error.\n",
        "tags": [ "users" ],
        "responses": {
          "204": { "description": "No response was specified" },
          "400": { "description": "- **2011** A super-user cannot be deleted.\n" },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the user to reset it's ui settings",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/users/{id}": {
      "x-swagger-router-controller": "users.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/get",
        "operationId": "getUser",
        "summary": "Get a specific user",
        "description": "The **get user by ID** endpoint retrieves a specific user object corresponding to the provided ID.<br/><br/>The expandable fields for the user object are `groups`, `adgroups` and `role`.",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "- **202** Invalid expand parameter.\n- **2001** User not found.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the user to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/modify",
        "operationId": "updateUser",
        "summary": "Update a user",
        "description": "The *update user* endpoint receives a user id and what fields to update, returning the updated object.\n<br/>If a user with the specified id is not exists, it will return an error.\n",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the user to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Partial user object (in `JSON` notation) containing the fields to update",
            "name": "user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "preferences": {
                  "type": "object",
                  "properties": { "localeId": { "type": "string" } }
                },
                "uiSettings": { "type": "object" }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/remove",
        "operationId": "deleteUser",
        "summary": "Delete a user",
        "description": "The *delete user* endpoint receives a user id and deletes that user in nonsense, returning the deleted object.\n<br/>If a user with the specified id is not exists, it will return an error.\n",
        "tags": [ "users" ],
        "responses": {
          "204": { "description": "No response was specified" },
          "400": { "description": "- **2011** A super-user cannot be deleted.\n" },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the user to delete",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/users/{id}/registerDevice": {
      "x-swagger-router-controller": "users.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "registerDevice",
        "summary": "Register a mobile device and token for a user",
        "description": "Register a mobile device and token for a user",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the user to register the device for",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Device object (in `JSON` notation) containing the ids",
            "name": "device",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deviceId": { "type": "string" },
                "token": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/users/{id}/unregisterDevice": {
      "x-swagger-router-controller": "users.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "unregisterDevice",
        "summary": "Unregister a mobile device from a user",
        "description": "Unregister a mobile device from a user",
        "tags": [ "users" ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "email": {
                  "type": "string",
                  "pattern": ""
                },
                "userName": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "roleId": { "type": "string" },
                "active": { "type": "boolean" },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "adgroups": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  }
                },
                "activeDirectory": { "type": "boolean" },
                "principalName": { "type": "string" },
                "objectSid": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "dn": { "type": "string" },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "localeId": { "type": "string" },
                    "language": { "type": "string" }
                  }
                },
                "uiSettings": { "type": "object" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastLogin": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pendingExpiration": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdSso": { "type": "string" }
              }
            }
          },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the user to unregister the device for",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Device object (in `JSON` notation) containing the ids",
            "name": "device",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deviceId": { "type": "string" },
                "token": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/groups": {
      "x-swagger-router-controller": "groups.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/get",
        "operationId": "getGroups",
        "summary": "Get groups",
        "description": "The **get groups** endpoint returns a list of user groups with their details.<br/>The results can be filtered by different parameters such as group name or origin.<br/><br/>The expandable fields for the group object are `users` and `role`.",
        "tags": [ "groups" ],
        "responses": {
          "200": {
            "description": "An array of groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "name": { "type": "string" },
                  "language": { "type": "string" },
                  "mail": { "type": "string" },
                  "ad": { "type": "boolean" },
                  "roleId": {
                    "type": "string",
                    "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
                  },
                  "defaultRole": { "type": "string" },
                  "objectSid": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  },
                  "dn": { "type": "string" },
                  "uSNChanged": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "description": "Group name to filter by",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Group email to filter by",
            "name": "mail",
            "required": false,
            "type": "string",
            "pattern": ""
          },
          {
            "in": "query",
            "description": "Group role ID to filter by",
            "name": "roleId",
            "required": false,
            "type": "string",
            "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
          },
          {
            "in": "query",
            "description": "Group origin to filter by (`ad` or `nonsense`)",
            "name": "origin",
            "required": false,
            "type": "string",
            "enum": [ "ad", "nonsense" ]
          },
          {
            "in": "query",
            "description": "Group IDs to filter by, separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/add",
        "operationId": "addGroup",
        "summary": "Add a new group",
        "description": "The *add group* endpoint receives a new group object and creates that group in nonsense, returning the created object.\n<br/>If a group with the same name exists, it will return an error.\n",
        "tags": [ "groups" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "name": { "type": "string" },
                "language": { "type": "string" },
                "mail": { "type": "string" },
                "ad": { "type": "boolean" },
                "roleId": {
                  "type": "string",
                  "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
                },
                "defaultRole": { "type": "string" },
                "objectSid": {
                  "type": "string",
                  "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                },
                "dn": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic group object (in `JSON` notation) to be added",
            "name": "group",
            "required": true,
            "schema": {
              "type": "object",
              "properties": { "name": { "type": "string" } }
            }
          }
        ]
      }
    },
    "/groups/ad": {
      "x-swagger-router-controller": "groups.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/add",
        "operationId": "addAdGroup",
        "summary": "Add a new Active Directory group",
        "description": "The **add Active Directory group** endpoint receives an Active Directory groups object, retrieves the group's details from Active Directory and adds it to the application.",
        "tags": [ "groups" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "name": { "type": "string" },
                "language": { "type": "string" },
                "mail": { "type": "string" },
                "ad": { "type": "boolean" },
                "roleId": {
                  "type": "string",
                  "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
                },
                "defaultRole": { "type": "string" },
                "objectSid": {
                  "type": "string",
                  "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                },
                "dn": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Active Directory group object to be added",
            "name": "adGroup",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "cn": { "type": "string" },
                "roleId": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "objectSid": {
                  "type": "string",
                  "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                },
                "dn": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/groups/bulk": {
      "x-swagger-router-controller": "groups.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/add",
        "operationId": "addGroups",
        "summary": "Add several groups at once",
        "description": "The **bulk add** endpoint allows adding multiple groups at once, by receiving an array of group objects whose structure is alike to the single **add group** endpoint.",
        "tags": [ "groups" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "name": { "type": "string" },
                  "language": { "type": "string" },
                  "mail": { "type": "string" },
                  "ad": { "type": "boolean" },
                  "roleId": {
                    "type": "string",
                    "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
                  },
                  "defaultRole": { "type": "string" },
                  "objectSid": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  },
                  "dn": { "type": "string" },
                  "uSNChanged": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "A collection of basic group objects (in `JSON` notation) to be added",
            "name": "groups",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/nonsenseGroup" }
            }
          }
        ]
      }
    },
    "/groups/ad/bulk": {
      "x-swagger-router-controller": "groups.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/add",
        "operationId": "addAdGroups",
        "summary": "Bulk add Active Directory groups",
        "description": "The **bulk add Active Directory group** endpoint receives an array of Active Directory group objects, retrieves the group's details from Active Directory and adds it to the application.",
        "tags": [ "groups" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "cn": { "type": "string" },
                  "roleId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "objectSid": {
                    "type": "string",
                    "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                  },
                  "dn": { "type": "string" }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Array of Active Directory user objects to be added",
            "name": "adGroups",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/adGroup" }
            }
          }
        ]
      }
    },
    "/groups/{id}": {
      "x-swagger-router-controller": "groups.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/get",
        "operationId": "getGroup",
        "summary": "Get a specific group",
        "description": "The **get  group by id** endpoint returns the details of the user group corresponding to the `id` parameter.<br/><br/>The expandable fields for the group object are `users` and `role`.",
        "tags": [ "groups" ],
        "responses": {
          "200": {
            "description": "Group details",
            "schema": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "name": { "type": "string" },
                "language": { "type": "string" },
                "mail": { "type": "string" },
                "ad": { "type": "boolean" },
                "roleId": {
                  "type": "string",
                  "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
                },
                "defaultRole": { "type": "string" },
                "objectSid": {
                  "type": "string",
                  "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
                },
                "dn": { "type": "string" },
                "uSNChanged": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "description": "The ID of the group to get.",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "delete": {
        "x-permission-type": "general",
        "x-permission-path": "manage/groups/remove",
        "operationId": "removeGroup",
        "summary": "Delete a specific group",
        "description": "The **delete group by id** endpoint removes the group corresponding to the `id` parameter.",
        "tags": [ "groups" ],
        "responses": {
          "204": { "description": "Delete operation was successfull" },
          "404": {
            "description": "resource not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the group to remove.",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "none",
      "get": {
        "responses": {
          "200": {
            "description": "An array of dashboards",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "desc": { "type": "string" },
                  "oid": { "type": "string" },
                  "source": { "type": "string" },
                  "parentFolder": { "type": "string" },
                  "type": { "type": "string" },
                  "shares": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [ "shareId", "type" ],
                      "properties": {
                        "shareId": {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$"
                        },
                        "type": {
                          "type": "string",
                          "enum": [ "user", "group" ]
                        },
                        "rule": {
                          "type": "string",
                          "enum": [ "view", "edit" ]
                        },
                        "subscribe": { "type": "boolean" }
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "palette": {
                        "type": "object",
                        "properties": {
                          "colors": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "name": { "type": "string" },
                          "isSystem": { "type": "boolean" }
                        }
                      }
                    }
                  },
                  "owner": { "type": "string" },
                  "userId": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "datasource": {
                    "type": "object",
                    "required": [ "title" ],
                    "properties": {
                      "title": { "type": "string" },
                      "id": { "type": "string" },
                      "address": { "type": "string" },
                      "database": { "type": "string" },
                      "fullname": { "type": "string" }
                    }
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        }
                      }
                    }
                  },
                  "instanceType": { "type": "string" },
                  "layout": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "columns": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "width": { "type": "number" },
                            "cells": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "subcells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "elements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "widgetId": { "type": "string" },
                                              "minHeight": { "type": "number" },
                                              "maxHeight": { "type": "number" },
                                              "minWidth": { "type": "number" },
                                              "maxWidth": { "type": "number" },
                                              "height": { "type": "number" },
                                              "defaultWidth": { "type": "number" }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "previewLayout": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string" },
                        "format": { "type": "string" },
                        "orientation": { "type": "string" },
                        "layout": { "type": "string" },
                        "headerSize": { "type": "string" },
                        "title": { "type": "boolean" },
                        "elasticubeBuilt": { "type": "boolean" },
                        "elasticubeName": { "type": "boolean" },
                        "filters": { "type": "boolean" },
                        "logo": { "type": "boolean" },
                        "pageNumbers": { "type": "boolean" },
                        "pages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": { "type": "string" },
                              "columns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "width": { "type": "number" },
                                    "cells": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "subcells": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "elements": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "widgetId": { "type": "string" },
                                                      "minHeight": { "type": "number" },
                                                      "maxHeight": { "type": "number" },
                                                      "minWidth": { "type": "number" },
                                                      "maxWidth": { "type": "number" },
                                                      "height": { "type": "number" },
                                                      "defaultWidth": { "type": "number" }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "defaultFilters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getOwnedDashboards",
        "summary": "Get a user's dashboards",
        "description": "The **get dashboards** endpoint provides access to a specified user's dashboards in their stored format as `JSON` objects.\n<br/>It's results can be filtered by parameters such as dashboard name, parent folder, or datasource.\n<br/><br/>The expandable fields for the dashboard object are `widgets`, `parentFolder`, `userAuth`, `rule` and `owner`.\n",
        "tags": [ "dashboards" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Parent folder ID to filter by",
            "name": "parentFolder",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Name to filter by",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Datasource name to filter by",
            "name": "datasourceTitle",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Datasource address to filter by",
            "name": "datasourceAddress",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "dashboards/create",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **add dashboard** endpoint reveives a dashboard object and adds it to the user's dashboards.",
        "tags": [ "dashboards" ],
        "summary": "Add a new dashboard",
        "operationId": "addDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic dashboard object to be added",
            "name": "dashboard",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "title", "datasource" ],
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "parentFolder": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/dashboards/export": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "dashboards/export_dash",
        "produces": [ "application/octet-stream" ],
        "responses": {
          "200": {
            "description": "Dash file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a dashboards as .dash file",
        "description": "The **export dashboards** endpoint returns the dashboards `JSON` content in a `.dash` file, which can be imported into nonsense.",
        "tags": [ "dashboards" ],
        "operationId": "exportDashboardsAsDASH",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Dashboard IDs to export",
            "name": "dashboardIds",
            "required": true,
            "collectionFormat": "csv",
            "type": "array",
            "items": { "type": "string" }
          }
        ]
      }
    },
    "/dashboards/bulk": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "delete": {
        "x-permission-type": "general",
        "x-permission-path": "dashboards/delete",
        "responses": {
          "200": { "description": "Delete operation was successful" },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **delete dashboards** endpoint deletes dashboards with the provided IDs.",
        "tags": [ "dashboards" ],
        "summary": "Delete dashboards",
        "operationId": "removeDashboardsBulk",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "The IDs of the dashboards to delete",
            "name": "dashboardIds",
            "required": true,
            "collectionFormat": "csv",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ]
      }
    },
    "/dashboards/admin": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "admins-only",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "responses": {
          "200": {
            "description": "An array of dashboards",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "desc": { "type": "string" },
                  "oid": { "type": "string" },
                  "source": { "type": "string" },
                  "parentFolder": { "type": "string" },
                  "type": { "type": "string" },
                  "shares": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [ "shareId", "type" ],
                      "properties": {
                        "shareId": {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$"
                        },
                        "type": {
                          "type": "string",
                          "enum": [ "user", "group" ]
                        },
                        "rule": {
                          "type": "string",
                          "enum": [ "view", "edit" ]
                        },
                        "subscribe": { "type": "boolean" }
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "palette": {
                        "type": "object",
                        "properties": {
                          "colors": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "name": { "type": "string" },
                          "isSystem": { "type": "boolean" }
                        }
                      }
                    }
                  },
                  "owner": { "type": "string" },
                  "userId": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "datasource": {
                    "type": "object",
                    "required": [ "title" ],
                    "properties": {
                      "title": { "type": "string" },
                      "id": { "type": "string" },
                      "address": { "type": "string" },
                      "database": { "type": "string" },
                      "fullname": { "type": "string" }
                    }
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        }
                      }
                    }
                  },
                  "instanceType": { "type": "string" },
                  "layout": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "columns": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "width": { "type": "number" },
                            "cells": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "subcells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "elements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "widgetId": { "type": "string" },
                                              "minHeight": { "type": "number" },
                                              "maxHeight": { "type": "number" },
                                              "minWidth": { "type": "number" },
                                              "maxWidth": { "type": "number" },
                                              "height": { "type": "number" },
                                              "defaultWidth": { "type": "number" }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "previewLayout": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string" },
                        "format": { "type": "string" },
                        "orientation": { "type": "string" },
                        "layout": { "type": "string" },
                        "headerSize": { "type": "string" },
                        "title": { "type": "boolean" },
                        "elasticubeBuilt": { "type": "boolean" },
                        "elasticubeName": { "type": "boolean" },
                        "filters": { "type": "boolean" },
                        "logo": { "type": "boolean" },
                        "pageNumbers": { "type": "boolean" },
                        "pages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": { "type": "string" },
                              "columns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "width": { "type": "number" },
                                    "cells": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "subcells": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "elements": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "widgetId": { "type": "string" },
                                                      "minHeight": { "type": "number" },
                                                      "maxHeight": { "type": "number" },
                                                      "minWidth": { "type": "number" },
                                                      "maxWidth": { "type": "number" },
                                                      "height": { "type": "number" },
                                                      "defaultWidth": { "type": "number" }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "defaultFilters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getAllDashboards",
        "summary": "Get all dashboards",
        "description": "The **get all dashboards** endpoint provides access to all available dashboards in their stored format as `JSON` objects.\n<br/>Its results can be filtered by parameters such as dashboard type, dashboard name, parent folder, or datasource.\n<br/><br/>The expandable fields for the dashboard object are `widgets`, `parentFolder` and `owner`.\n",
        "tags": [ "admin" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Dashboard instance type to filter by",
            "name": "dashboardType",
            "required": false,
            "type": "string",
            "enum": [ "owner", "user", "proxy" ]
          },
          {
            "in": "query",
            "description": "Dashboard owner information",
            "name": "ownerInfo",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Dashboard ID to filter by",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Parent folder ID to filter by",
            "name": "parentFolder",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Name to filter by",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Datasource name to filter by",
            "name": "datasourceTitle",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Datasource address to filter by",
            "name": "datasourceAddress",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Dashboard ownership type to filter by, rewrites \"dashboardType\" filter",
            "name": "ownershipType",
            "required": false,
            "type": "string",
            "enum": [ "all", "root", "owner", "shared", "sharedAndSharedRoot" ]
          },
          {
            "in": "query",
            "description": "Search by dashboard title query string",
            "name": "search",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Defines response type, as list of items (default) or object with properties",
            "name": "asObject",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/dashboards/import": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "post": {
        "deprecated": true,
        "x-permission-type": "general",
        "x-permission-path": "dashboards/import",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **import dashboard** endpoint receives a `.dash` file containing a nonsense dashboard and creates it in the user's dashboards.",
        "tags": [ "dashboards" ],
        "summary": "Import a dashboard",
        "operationId": "importDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic dashboard object to be added",
            "name": "dashboard",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "title", "datasource" ],
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "parentFolder": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "in": "query",
            "description": "The folder to add the imported dashboard to",
            "name": "importFolder",
            "required": false,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/import/bulk": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "dashboards/import",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "desc": { "type": "string" },
                  "oid": { "type": "string" },
                  "source": { "type": "string" },
                  "parentFolder": { "type": "string" },
                  "type": { "type": "string" },
                  "shares": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [ "shareId", "type" ],
                      "properties": {
                        "shareId": {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$"
                        },
                        "type": {
                          "type": "string",
                          "enum": [ "user", "group" ]
                        },
                        "rule": {
                          "type": "string",
                          "enum": [ "view", "edit" ]
                        },
                        "subscribe": { "type": "boolean" }
                      }
                    }
                  },
                  "style": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "palette": {
                        "type": "object",
                        "properties": {
                          "colors": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "name": { "type": "string" },
                          "isSystem": { "type": "boolean" }
                        }
                      }
                    }
                  },
                  "owner": { "type": "string" },
                  "userId": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "datasource": {
                    "type": "object",
                    "required": [ "title" ],
                    "properties": {
                      "title": { "type": "string" },
                      "id": { "type": "string" },
                      "address": { "type": "string" },
                      "database": { "type": "string" },
                      "fullname": { "type": "string" }
                    }
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        }
                      }
                    }
                  },
                  "instanceType": { "type": "string" },
                  "layout": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "columns": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "width": { "type": "number" },
                            "cells": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "subcells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "elements": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "widgetId": { "type": "string" },
                                              "minHeight": { "type": "number" },
                                              "maxHeight": { "type": "number" },
                                              "minWidth": { "type": "number" },
                                              "maxWidth": { "type": "number" },
                                              "height": { "type": "number" },
                                              "defaultWidth": { "type": "number" }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "previewLayout": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string" },
                        "format": { "type": "string" },
                        "orientation": { "type": "string" },
                        "layout": { "type": "string" },
                        "headerSize": { "type": "string" },
                        "title": { "type": "boolean" },
                        "elasticubeBuilt": { "type": "boolean" },
                        "elasticubeName": { "type": "boolean" },
                        "filters": { "type": "boolean" },
                        "logo": { "type": "boolean" },
                        "pageNumbers": { "type": "boolean" },
                        "pages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": { "type": "string" },
                              "columns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "width": { "type": "number" },
                                    "cells": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "subcells": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "elements": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "widgetId": { "type": "string" },
                                                      "minHeight": { "type": "number" },
                                                      "maxHeight": { "type": "number" },
                                                      "minWidth": { "type": "number" },
                                                      "maxWidth": { "type": "number" },
                                                      "height": { "type": "number" },
                                                      "defaultWidth": { "type": "number" }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "defaultFilters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **import dashboard** endpoint receives a `.dash` file containing dashboards and adds those dashboards to the user's Dashboard list.",
        "tags": [ "dashboards" ],
        "summary": "Import dashboards",
        "operationId": "importDashboardBulk",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic dashboard object to be added",
            "name": "dashboards",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/baseDashboard" }
            }
          },
          {
            "in": "query",
            "description": "Determines if the existing dashboard should be overwritten. <br/>**skip**: The existing dashboard is not overwritten. <br/>**overwrite**: The existing dashboard is overwritten. <br/>**duplicate**: A new copy of the existing dashboard is created on the target server.",
            "name": "action",
            "required": false,
            "type": "string",
            "enum": [ "skip", "overwrite", "duplicate" ]
          },
          {
            "in": "query",
            "description": "Republish dashboards on target server after copying (only affects overwritten dashboards that were previously shared on the target server)",
            "name": "republish",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "The folder to add the imported dashboard to",
            "name": "importFolder",
            "required": false,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{id}": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "x-permission-type": "none",
        "operationId": "getDashboardById",
        "summary": "Get a specific dashboard",
        "description": "The **get dashboard by ID** endpoint returns a specific dashboard object by ID.<br/><br/>The expandable fields for the dashboard object are `widgets`, `parentFolder`, `userAuth` and `owner`.\n",
        "tags": [ "dashboards" ],
        "responses": {
          "200": {
            "description": "The dashboard with the given ID",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The updated dashboard",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **update dashboard** endpoint will perform a partial update on the dashboard of the provided ID, updating the fields in the dashboard object provided in the body.",
        "tags": [ "dashboards" ],
        "summary": "Update a dashboard",
        "operationId": "updateDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The partial dashboard object who's fields will be updated",
            "name": "dashboard",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-path": "dashboards/delete",
        "responses": {
          "204": { "description": "Delete operation was successfull" },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **delete dashboard** endpoint deletes a dashboard with the provided ID.",
        "tags": [ "dashboards" ],
        "summary": "Delete a dashboard",
        "operationId": "removeDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to delete",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{id}/exists": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "x-permission-type": "none",
        "operationId": "doesDashboardExist",
        "summary": "Check whether a specific dashboard exists",
        "description": "The **dashboard exists** endpoint checks whether a dashboard with the provided ID exists.\n",
        "tags": [ "dashboards" ],
        "responses": {
          "200": {
            "description": "Whether the dashboard exists or not",
            "schema": {
              "type": "object",
              "properties": { "exists": { "type": "boolean" } }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{id}/export/dash": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "x-permission-path": "dashboards/export_dash",
        "produces": [ "application/octet-stream" ],
        "responses": {
          "200": {
            "description": "Dash file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a dashboard as .dash file",
        "description": "The **export dashboard to `.dash` file** endpoint returns the dashboard's `JSON` in a `.dash` file that can be later imported into nonsense.",
        "tags": [ "dashboards" ],
        "operationId": "exportDashboardAsDASH",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to export",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{id}/export/png": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "x-permission-path": "dashboards/export_jpeg",
        "produces": [ "image/png" ],
        "responses": {
          "200": {
            "description": "Image file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a dashboard as .png image",
        "description": "The **export dashboard to `.png`** endpoind returns the requested dashboard rendered as a `.png` image file.\n<br/>It can be configured to export images of different width, and to include or exclude certain parts (such as dashboard filters).\n<br/>Note that dashboards rendered this way have a different layout to dashboards displayed in the application, called the reporting layout.\n",
        "tags": [ "dashboards" ],
        "operationId": "exportDashboardAsPNG",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to export",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Should dashboard title be included in the exported file",
            "name": "includeTitle",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Should dashboard filters be included in the exported file",
            "name": "includeFilters",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Should dashboard datasource info be included in the exported file",
            "name": "includeDs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Render width in pixels",
            "name": "width",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/dashboards/{id}/export/pdf": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "x-permission-path": "dashboards/export_pdf",
        "produces": [ "application/pdf" ],
        "responses": {
          "200": {
            "description": "PDF file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a dashboard as .pdf file",
        "description": "The **export dashboard to `.pdf`** endpoind returns the requested dashboard rendered as a `.pdf` document file.\n<br/>It can be configured to export PDFs of different paper sizes, orientation, as well as to include or exclude certain parts (such as dashboard filters).\n<br/>Note that dashboards rendered this way have a different layout to dashboards displayed in the application, and can be either the **as is** layout (the reporting layout) or the **feed** layout which puts each widget in it's own line.\n",
        "tags": [ "dashboards" ],
        "operationId": "exportDashboardAsPDF",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to export",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "What paper format should be used while rendering the dashboard",
            "name": "paperFormat",
            "default": "A4",
            "required": true,
            "type": "string",
            "enum": [ "A3", "A4", "A5", "legal", "letter", "tabloid" ]
          },
          {
            "in": "query",
            "description": "What paper orientation should be used while rendering the dashboard",
            "name": "paperOrientation",
            "required": true,
            "type": "string",
            "enum": [ "portrait", "landscape" ]
          },
          {
            "in": "query",
            "description": "What layout should be used while rendering the dashboard, *as is* or *feed*",
            "name": "layout",
            "required": true,
            "type": "string",
            "enum": [ "asis", "feed" ]
          },
          {
            "in": "query",
            "description": "Should dashboard title be included in the exported file",
            "name": "includeTitle",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Should dashboard filters be included in the exported file",
            "name": "includeFilters",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Should dashboard datasource info be included in the exported file",
            "name": "includeDs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Widget Id (Use only for Table and Pivot Widgets)",
            "name": "widgetid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Should use a new Pixel Perfect Reporting",
            "name": "preview",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Count of Table/Pivot rows to export",
            "name": "rowCount",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "description": "Should Table/Pivot Widget title be included in the exported file",
            "name": "showTitle",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "description": "Should Table/Pivot Widget footer be included in the exported file",
            "name": "showFooter",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "description": "Table/Pivot Widget title text in the exported file",
            "name": "title",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Table/Pivot widget title size in the exported file",
            "name": "titleSize",
            "required": false,
            "type": "string",
            "enum": [ "small", "medium", "large" ],
            "default": "medium"
          },
          {
            "in": "query",
            "description": "Table/Pivot widget title position in the exported file",
            "name": "titlePosition",
            "required": false,
            "type": "string",
            "enum": [ "flex-start", "center", "flex-end" ],
            "default": "flex-start"
          }
        ]
      },
      "post": {
        "x-permission-path": "dashboards/export_pdf",
        "x-hide": true,
        "produces": [ "application/pdf" ],
        "responses": {
          "200": {
            "description": "PDF file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a dashboard as .pdf file on behind of user",
        "description": "The **export dashboard to `.pdf`** endpoind returns the requested dashboard rendered as a `.pdf` document file.\n<br/>It can be configured to export PDFs of different paper sizes, orientation, as well as to include or exclude certain parts (such as dashboard filters).\n<br/>Note that dashboards rendered this way have a different layout to dashboards displayed in the application, and can be either the **as is** layout (the reporting layout) or the **feed** layout which puts each widget in it's own line.\n",
        "tags": [ "dashboards" ],
        "operationId": "exportDashboardAsPDFonBehalfUser",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to export",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "The ID of the dashboard to export",
            "name": "userId",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Should dashboard title be included in the exported file",
            "name": "includeTitle",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Should dashboard filters be included in the exported file",
            "name": "includeFilters",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "Should dashboard datasource info be included in the exported file",
            "name": "includeDs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "description": "What paper format should be used while rendering the dashboard",
            "name": "paperFormat",
            "default": "A4",
            "required": true,
            "type": "string",
            "enum": [ "A3", "A4", "A5", "legal", "letter", "tabloid" ]
          },
          {
            "in": "query",
            "description": "What paper orientation should be used while rendering the dashboard",
            "name": "paperOrientation",
            "required": true,
            "type": "string",
            "enum": [ "portrait", "landscape" ]
          },
          {
            "in": "query",
            "description": "What layout should be used while rendering the dashboard, *as is* or *feed*",
            "name": "layout",
            "default": "asis",
            "required": true,
            "type": "string",
            "enum": [ "asis", "feed" ]
          },
          {
            "in": "body",
            "description": "custom filters array to be added to the dashboard",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "jaql": {
                    "type": "object",
                    "properties": {
                      "dim": { "type": "string" },
                      "datatype": { "type": "string" },
                      "title": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/dashboards/{id}/duplicate": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "post": {
        "x-permission-path": "dashboards/duplicate",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **duplicate dashboard** endpoint creates a new dashboard based on an existing dashboard of the provided ID.",
        "tags": [ "dashboards" ],
        "summary": "Duplicate a dashboard",
        "operationId": "duplicateDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to duplicate",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{id}/admin/change_owner": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "admins-only",
      "x-asset-prop-path": "swagger.params.id",
      "post": {
        "responses": {
          "200": {
            "description": "The updated dashboard",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **change owner** endpoint updates the owner of any dashboard according to the dashboard ID.",
        "tags": [ "admin" ],
        "summary": "Change dashboard owner",
        "operationId": "changeDashboardOwner",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Object with the ID of new owner of a dashboard",
            "name": "ownerData",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "ownerId" ],
              "properties": {
                "ownerId": { "type": "string" },
                "originalOwnerRule": {
                  "type": "string",
                  "enum": [ "edit", "view" ]
                }
              }
            }
          }
        ]
      }
    },
    "/dashboards/{id}/change_owner": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "post": {
        "x-permission-path": "dashboards/change_owner",
        "responses": {
          "200": {
            "description": "The updated dashboard",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **change owner** endpoint updates the owner of any dashboard according to the dashboard ID.",
        "tags": [ "dashboards" ],
        "summary": "Change dashboard owner",
        "operationId": "changeDashboardOwner",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Object with the ID of new owner of a dashboard",
            "name": "ownerData",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "ownerId" ],
              "properties": {
                "ownerId": { "type": "string" },
                "originalOwnerRule": {
                  "type": "string",
                  "enum": [ "edit", "view" ]
                }
              }
            }
          }
        ]
      }
    },
    "/dashboards/{id}/publish": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.id",
      "post": {
        "x-permission-path": "dashboards/share",
        "responses": {
          "204": { "description": "Operation was successfull" },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **publish dashboard** endpoint publishes the dashboard to all shared recipients. <br/>Setting the 'force' parameter to 'true' will forcefully replace the recipients' dashboard.",
        "tags": [ "dashboards" ],
        "summary": "Publishes a dashboard",
        "operationId": "publishDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to publish",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "When set to 'false' the recipient must click 'Restore dashboard' to retrieve the published version. When set to 'true' the publisehd dashboard will override the recipient's local copy immediately.",
            "name": "force",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/dashboards/publish/bulk": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "general",
        "x-permission-path": "dashboards/share",
        "responses": {
          "200": { "description": "Operation was successfull" },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **publish dashboards** endpoint publishes the dashboard to all shared recipients. <br/>Setting the 'force' parameter to 'true' will forcefully replace the recipients' dashboard.",
        "tags": [ "dashboards" ],
        "summary": "Publishes dashboards",
        "operationId": "publishDashboardBulk",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "The IDs of the dashboards to publish",
            "name": "ids",
            "required": true,
            "collectionFormat": "csv",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          },
          {
            "in": "query",
            "description": "When set to 'false' the recipient must click 'Restore dashboard' to retrieve the published version. When set to 'true' the publisehd dashboard will override the recipient's local copy immediately.",
            "name": "force",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/dashboards/{id}/restore": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "none",
      "post": {
        "responses": {
          "204": { "description": "Operation was successfull" },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **restore dashboard** endpoint restores the dashboard to the last version published by the dashboard owner. All local changes to the dashboard will be overridden.",
        "tags": [ "dashboards" ],
        "summary": "Restores a dashboard",
        "operationId": "restoreDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to publish",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{id}/undo_Import": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "x-permission-type": "none",
      "post": {
        "responses": {
          "201": {
            "description": "Operation was successfull",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "oid": { "type": "string" },
                "source": { "type": "string" },
                "parentFolder": { "type": "string" },
                "type": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "palette": {
                      "type": "object",
                      "properties": {
                        "colors": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "name": { "type": "string" },
                        "isSystem": { "type": "boolean" }
                      }
                    }
                  }
                },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "instanceType": { "type": "string" },
                "layout": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "previewLayout": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "format": { "type": "string" },
                      "orientation": { "type": "string" },
                      "layout": { "type": "string" },
                      "headerSize": { "type": "string" },
                      "title": { "type": "boolean" },
                      "elasticubeBuilt": { "type": "boolean" },
                      "elasticubeName": { "type": "boolean" },
                      "filters": { "type": "boolean" },
                      "logo": { "type": "boolean" },
                      "pageNumbers": { "type": "boolean" },
                      "pages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "width": { "type": "number" },
                                  "cells": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "subcells": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "elements": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "widgetId": { "type": "string" },
                                                    "minHeight": { "type": "number" },
                                                    "maxHeight": { "type": "number" },
                                                    "minWidth": { "type": "number" },
                                                    "maxWidth": { "type": "number" },
                                                    "height": { "type": "number" },
                                                    "defaultWidth": { "type": "number" }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "defaultFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jaql": {
                        "type": "object",
                        "properties": {
                          "dim": { "type": "string" },
                          "datatype": { "type": "string" },
                          "title": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **undo import dashboard** endpoint restores the dashboard to the last backup that performed before the last import. All local changes to the dashboard will be overridden.",
        "tags": [ "dashboards" ],
        "summary": "Restores a dashboard",
        "operationId": "undoImportDashboard",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to restore",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{dashboardId}/widgets": {
      "x-swagger-router-controller": "widgets.controller.v1",
      "get": {
        "x-permission-type": "none",
        "responses": {
          "200": {
            "description": "An array of widgets",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "oid": { "type": "string" },
                  "desc": { "type": "string" },
                  "datasource": {
                    "type": "object",
                    "required": [ "title" ],
                    "properties": {
                      "title": { "type": "string" },
                      "id": { "type": "string" },
                      "address": { "type": "string" },
                      "database": { "type": "string" },
                      "fullname": { "type": "string" }
                    }
                  },
                  "type": { "type": "string" },
                  "subtype": { "type": "string" },
                  "dashboardid": { "type": "string" },
                  "owner": { "type": "string" },
                  "userId": { "type": "string" },
                  "instanceType": { "type": "string" },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "panels": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": { "type": "string" },
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "jaql": {
                                    "type": "object",
                                    "properties": {
                                      "dim": { "type": "string" },
                                      "datatype": { "type": "string" },
                                      "title": { "type": "string" }
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "properties": {
                                      "id": { "type": "string" },
                                      "index": { "type": "integer" }
                                    }
                                  },
                                  "format": { "type": "object" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "shares": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [ "shareId", "type" ],
                      "properties": {
                        "shareId": {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$"
                        },
                        "type": {
                          "type": "string",
                          "enum": [ "user", "group" ]
                        },
                        "rule": {
                          "type": "string",
                          "enum": [ "view", "edit" ]
                        },
                        "subscribe": { "type": "boolean" }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a dashboard's widgets",
        "description": "The **get dashboard widgets** endpoint returns an array of a dashboard's widgets.\n<br/>The result can be filtered by different parameters such as the widget type or title.\n",
        "tags": [ "dashboards", "widgets" ],
        "operationId": "getDashboardWidgets",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to get",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Widget title to filter by",
            "name": "title",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Widget type to filter by",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Widget sub-type to filter by",
            "name": "subtype",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          }
        ]
      },
      "post": {
        "x-permission-type": "asset",
        "x-asset-prop-path": "swagger.params.dashboardId",
        "x-permission-path": "widgets/create",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "oid": { "type": "string" },
                "desc": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "type": { "type": "string" },
                "subtype": { "type": "string" },
                "dashboardid": { "type": "string" },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "panels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "jaql": {
                                  "type": "object",
                                  "properties": {
                                    "dim": { "type": "string" },
                                    "datatype": { "type": "string" },
                                    "title": { "type": "string" }
                                  }
                                },
                                "field": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "string" },
                                    "index": { "type": "integer" }
                                  }
                                },
                                "format": { "type": "object" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **add widget to dashboard** endpoint adds the provided widget object to the dashboard of the given ID.",
        "tags": [ "dashboards", "widgets" ],
        "summary": "Add a new widget to a dashboard",
        "operationId": "addDashboardWidget",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to add the widget to",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Basic widget object to be added to the dashboard",
            "name": "widget",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "datasource", "type", "metadata" ],
              "properties": {
                "title": { "type": "string" },
                "desc": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "type": { "type": "string" },
                "subtype": { "type": "string" },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "panels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "jaql": {
                                  "type": "object",
                                  "properties": {
                                    "dim": { "type": "string" },
                                    "datatype": { "type": "string" },
                                    "title": { "type": "string" }
                                  }
                                },
                                "field": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "string" },
                                    "index": { "type": "integer" }
                                  }
                                },
                                "format": { "type": "object" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/dashboards/{dashboardId}/widgets/{id}": {
      "x-swagger-router-controller": "widgets.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.dashboardId",
      "get": {
        "x-permission-type": "none",
        "responses": {
          "200": {
            "description": "The widget with the given ID",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "oid": { "type": "string" },
                "desc": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "type": { "type": "string" },
                "subtype": { "type": "string" },
                "dashboardid": { "type": "string" },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "panels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "jaql": {
                                  "type": "object",
                                  "properties": {
                                    "dim": { "type": "string" },
                                    "datatype": { "type": "string" },
                                    "title": { "type": "string" }
                                  }
                                },
                                "field": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "string" },
                                    "index": { "type": "integer" }
                                  }
                                },
                                "format": { "type": "object" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "- **10001** dashboard not found\n- **14004** widget not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a specific widget from a dashboard",
        "description": "The **get dashboard widget by ID** endpoint returns a specific widget (by ID) from a specific dashboard.",
        "tags": [ "dashboards", "widgets" ],
        "operationId": "getDashboardWidgetById",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard containing the widget",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "path",
            "description": "The ID of the widget to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The updated widget",
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "oid": { "type": "string" },
                "desc": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "type": { "type": "string" },
                "subtype": { "type": "string" },
                "dashboardid": { "type": "string" },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "panels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "jaql": {
                                  "type": "object",
                                  "properties": {
                                    "dim": { "type": "string" },
                                    "datatype": { "type": "string" },
                                    "title": { "type": "string" }
                                  }
                                },
                                "field": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "string" },
                                    "index": { "type": "integer" }
                                  }
                                },
                                "format": { "type": "object" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "- **10001** dashboard not found\n- **14004** widget not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **update widget** endpoint will perform a partial update on the dashboard's widget of the provided ID, updating the fields with the widget object provided in the body.",
        "tags": [ "dashboards", "widgets" ],
        "summary": "Partially update a widget",
        "operationId": "updateDashboardWidget",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard containing the widget",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "path",
            "description": "The ID of the widget to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The partial widget object who's fields will be updated",
            "name": "widget",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "oid": { "type": "string" },
                "desc": { "type": "string" },
                "datasource": {
                  "type": "object",
                  "required": [ "title" ],
                  "properties": {
                    "title": { "type": "string" },
                    "id": { "type": "string" },
                    "address": { "type": "string" },
                    "database": { "type": "string" },
                    "fullname": { "type": "string" }
                  }
                },
                "type": { "type": "string" },
                "subtype": { "type": "string" },
                "dashboardid": { "type": "string" },
                "owner": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "panels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "jaql": {
                                  "type": "object",
                                  "properties": {
                                    "dim": { "type": "string" },
                                    "datatype": { "type": "string" },
                                    "title": { "type": "string" }
                                  }
                                },
                                "field": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "string" },
                                    "index": { "type": "integer" }
                                  }
                                },
                                "format": { "type": "object" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "shareId", "type" ],
                    "properties": {
                      "shareId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "rule": {
                        "type": "string",
                        "enum": [ "view", "edit" ]
                      },
                      "subscribe": { "type": "boolean" }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-path": "widgets/delete",
        "responses": {
          "204": { "description": "Delete operation was successfull" },
          "404": {
            "description": "- **10001** dashboard not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **delete widget** endpoint deletes a widget with the provided ID from it's dashboard.",
        "tags": [ "dashboards", "widgets" ],
        "summary": "Delete a widget",
        "operationId": "removeDashboardWidget",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard containing the widget",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "path",
            "description": "The ID of the widget to delete",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/dashboards/{dashboardId}/widgets/{id}/export/png": {
      "x-swagger-router-controller": "widgets.controller.v1",
      "x-permission-type": "asset",
      "x-asset-prop-path": "swagger.params.dashboardId",
      "get": {
        "x-permission-path": "widgets/export_png",
        "produces": [ "image/png" ],
        "responses": {
          "200": {
            "description": "Image file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "- **10001** dashboard not found\n- **14004** widget not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a specific widget as .png image",
        "description": "The **export widget to `.png`** endpoint returns a specified widget rendered as a `.png` image.\n<br/>The desired output image size (height & width) must be specified.\n",
        "tags": [ "dashboards", "widgets" ],
        "operationId": "exportDashboardWidgetAsPNG",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard containing the widget",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "path",
            "description": "The ID of the widget to export",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Render width in pixels",
            "name": "width",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Render height in pixels",
            "name": "height",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/dashboards/{server}/{title}/replace_datasource": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "dashboards/replace_datasource",
        "responses": {
          "200": {
            "description": "Number of dashboards affected",
            "schema": { "type": "integer" }
          }
        },
        "operationId": "replaceDataSource",
        "summary": "Replace Datasource",
        "description": "The **replace datasource** endpoint replaces the datasource for any specified dashboard.\n<br/>When dashboard ID is ommitted, the datasource will be replaced for all dashboards associated with that datasource.\n",
        "tags": [ "admin" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "Datasource Server(\"Set\" for ElastiCube sets) to update",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Datasource Title to update",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The ID of the dashboard to get",
            "name": "dashboardId",
            "required": false,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The new datasource object",
            "name": "datasource",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "title" ],
              "properties": {
                "title": { "type": "string" },
                "id": { "type": "string" },
                "address": { "type": "string" },
                "database": { "type": "string" },
                "fullname": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/dashboards/copy": {
      "x-swagger-router-controller": "dashboards.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "dashboards/copy_to_server",
        "responses": { "200": { "description": "The copied dashboards" } },
        "operationId": "copyDashboardsToServer",
        "summary": "Copy dashboard to server",
        "description": "The **copy dashboards to server** endpoint copies the seleteced dashboards to a remote nonsense server.\n",
        "tags": [ "dashboards" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "The copy request object",
            "name": "copyRequest",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "type": "string",
                  "pattern": "^https?\\:\\/\\/.+"
                },
                "authorization": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string" },
                    "deviceId": { "type": "string" },
                    "cookieType": { "type": "string" },
                    "userName": { "type": "string" },
                    "expiration": { "type": "string" },
                    "issueDate": { "type": "string" }
                  }
                },
                "dashboards": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "action": {
                        "type": "string",
                        "enum": [ "duplicate", "overwrite", "skip" ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "in": "query",
            "description": "Republish dashboards on target server after copying\n(only affects overwritten dashboards that were previously shared at target server)\n",
            "name": "republish",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Continute despite of nonsense versions incompatability",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/dashboards/{dashboardId}/shares": {
      "x-swagger-router-controller": "shares.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getDashboardsShares",
        "summary": "Get a dashboard's shares",
        "description": "The **get shares** endpoint returns a dashboard's share configurations.<br/><br/>The expandable fields for the shares object are `group` and `user`.",
        "tags": [ "shares", "dashboards" ],
        "responses": {
          "200": {
            "description": "An array of the dashboard's sharing configurations",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "shareId", "type" ],
                "properties": {
                  "shareId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "type": {
                    "type": "string",
                    "enum": [ "user", "group" ]
                  },
                  "rule": {
                    "type": "string",
                    "enum": [ "view", "edit" ]
                  },
                  "subscribe": { "type": "boolean" }
                }
              }
            }
          },
          "404": {
            "description": "expand resource not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard who's shares to get.",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/dashboards/{dashboardId}/shares/{id}": {
      "x-swagger-router-controller": "shares.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getDashboardsShare",
        "summary": "Get a dashboard's specific share configuration",
        "description": "The **get share by id** endpoint returns the details of a specific share of the dashboard.<br/><br/>The expandable fields for the shares object are `group` and `user`.",
        "tags": [ "shares", "dashboards" ],
        "responses": {
          "200": {
            "description": "A dashboard share configuration",
            "schema": {
              "type": "object",
              "required": [ "shareId", "type" ],
              "properties": {
                "shareId": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "type": {
                  "type": "string",
                  "enum": [ "user", "group" ]
                },
                "rule": {
                  "type": "string",
                  "enum": [ "view", "edit" ]
                },
                "subscribe": { "type": "boolean" }
              }
            }
          },
          "404": {
            "description": "expand resource not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dashboard to get.",
            "name": "dashboardId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "path",
            "description": "The ID of the share to get.",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/account/begin_reset_password": {
      "x-swagger-router-controller": "account.controller.v1",
      "x-permission-type": "none",
      "post": {
        "x-skip-auth": true,
        "operationId": "beginResetPassword",
        "summary": "Begin reset password process",
        "description": "The **begin reset password** endpoint is the starting point for the password reset process.\nIt generates a temporary *password reset token* for the user associated with the provided email address and sends a password reset email to him.\n",
        "responses": {
          "204": { "description": "email successfuly sent" },
          "404": {
            "description": "invalid email",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "tags": [ "account" ],
        "parameters": [
          {
            "in": "body",
            "description": "email of the user who's password to reset",
            "name": "emailObject",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "email" ],
              "properties": { "email": { "type": "string" } }
            }
          }
        ]
      }
    },
    "/account/reset_password/{token}": {
      "x-swagger-router-controller": "account.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-skip-auth": true,
        "operationId": "getUserNameForResetPassword",
        "summary": "Validate password reset token",
        "description": "The **validate password reset token** endpoint receives the temporary _password reset token_ generated by `begin_reset_password`\nand either returns the username of the user who's password will be reset, or an error if the token is invalid, for example if it was already used.\n",
        "responses": {
          "200": {
            "description": "Reset token is valid",
            "schema": {
              "type": "object",
              "required": [ "userName" ],
              "properties": { "userName": { "type": "string" } }
            }
          },
          "404": {
            "description": "Reset token is invalid",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "tags": [ "account" ],
        "parameters": [
          {
            "in": "path",
            "description": "The temporary password reset token",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-skip-auth": true,
        "responses": {
          "204": { "description": "Password was reset successfuly" },
          "404": {
            "description": "Reset token is invalid",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "tags": [ "account" ],
        "operationId": "resetPassword",
        "summary": "Finalize password reset",
        "description": "The **reset password** endpoint receives the *reset password token* and a new password and updates the user's password accordingly.",
        "parameters": [
          {
            "in": "path",
            "description": "The temporary password reset token",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The new password",
            "name": "passwordObject",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "password" ],
              "properties": { "password": { "type": "string" } }
            }
          }
        ]
      }
    },
    "/account/activate/{token}": {
      "x-swagger-router-controller": "account.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-skip-auth": true,
        "responses": {
          "200": {
            "description": "Token validated",
            "schema": {
              "type": "object",
              "required": [ "userName" ],
              "properties": { "userName": { "type": "string" } }
            }
          },
          "404": {
            "description": "Provided token is invalid",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "summary": "Validate activation token",
        "description": "The **validate activation token** endpoint receives the temporary _activation token_ generated by `begin_activate`\nand either returns the username and language of the user to be activated, or an error if the token is invalid,\nfor example if it was already used. Note, that language is selected by language startegy: user's language,\ngroup's language, admin selected language, default nonsense language\n",
        "tags": [ "account" ],
        "operationId": "getUserDataForActivation",
        "parameters": [
          {
            "in": "path",
            "description": "The user's activation token.",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-skip-auth": true,
        "responses": {
          "204": { "description": "User activated successfully" },
          "404": {
            "description": "Invalid activation token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "description": "The **activate** endpoint receives the *activation token* and a new password and updates the user's password accordingly.",
        "tags": [ "account" ],
        "summary": "Activate user",
        "operationId": "activateUser",
        "parameters": [
          {
            "in": "path",
            "description": "The user's activation token.",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The new password",
            "name": "passwordObject",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "password" ],
              "properties": { "password": { "type": "string" } }
            }
          }
        ]
      }
    },
    "/account/begin_activate": {
      "x-swagger-router-controller": "account.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/add",
        "responses": {
          "204": { "description": "email successfuly sent" },
          "404": {
            "description": "invalid email",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "summary": "Begin user activation",
        "description": "The **begin activation** endpoint is the starting point for the user activation process.\nIt generates a temporary *activation token* for the user associated with the provided email address and sends an activation email to him.\n",
        "tags": [ "account" ],
        "operationId": "beginActivate",
        "parameters": [
          {
            "in": "body",
            "description": "Email of the user to activate",
            "name": "emailObj",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "email" ],
              "properties": {
                "email": {
                  "type": "string",
                  "pattern": ""
                }
              }
            }
          }
        ]
      }
    },
    "/account/begin_activate_bulk": {
      "x-swagger-router-controller": "account.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/users/add",
        "responses": {
          "204": { "description": "email successfuly sent" },
          "404": {
            "description": "invalid email",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "tags": [ "account" ],
        "summary": "Bulk begin user activation",
        "description": "The **bulk begin activation** endpoint is the starting point for the user activation process when activating multiple users.\nIt generates a temporary *activation token* for the users associated with the provided email addresses and sends an activation email to them.\n",
        "operationId": "beginActivateBulk",
        "parameters": [
          {
            "in": "body",
            "description": "The list of emails of users to activate",
            "name": "emailList",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": ""
              }
            }
          }
        ]
      }
    },
    "/account/get_license_info": {
      "x-swagger-router-controller": "account.controller.v1",
      "x-permission-type": "none",
      "get": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "bigData": { "type": "boolean" },
                "expirationDate": { "type": "string" },
                "highAvailability": { "type": "boolean" },
                "inUseAdmins": { "type": "integer" },
                "inUseDesigners": { "type": "integer" },
                "inUseViewers": { "type": "integer" },
                "maxAdmins": { "type": "integer" },
                "maxDesigners": { "type": "integer" },
                "maxViewers": { "type": "integer" },
                "trial": { "type": "boolean" }
              }
            }
          }
        },
        "summary": "License Information",
        "description": "Gets the License information\n",
        "tags": [ "account" ],
        "operationId": "getLicenseInfo"
      }
    },
    "/application/status": {
      "x-swagger-router-controller": "application.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-skip-auth": true,
        "operationId": "getApplicationStatus",
        "summary": "Get the application's status",
        "description": "The **application status** endpoint provides information on the current status of the nonsense application.<br/>It currently provides the version number and some license info.",
        "tags": [ "application" ],
        "responses": {
          "200": {
            "description": "Current application status",
            "schema": {
              "type": "object",
              "required": [ "version", "license" ],
              "properties": {
                "version": {
                  "type": "object",
                  "properties": {
                    "isBigData": { "type": "boolean" },
                    "version": { "type": "string" }
                  }
                },
                "license": {
                  "type": "object",
                  "properties": {
                    "isMobileEnabled": { "type": "boolean" },
                    "isExpired": { "type": "boolean" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentication/startup/{email}": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-skip-auth": true,
        "x-hide": true,
        "description": "Redirect super user to nonsense home page.",
        "responses": { "302": { "description": "Redirect to home page or login page" } },
        "tags": [ "authentication" ],
        "summary": "Redirect super user to nonsense home page",
        "operationId": "startup",
        "parameters": [
          {
            "in": "path",
            "description": "Super user email",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/tryLogin": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "post": {
        "x-hide": true,
        "x-skip-auth": true,
        "consumes": [ "application/x-www-form-urlencoded" ],
        "responses": {
          "200": { "description": "User Id" },
          "401": {
            "description": "invalid credentials",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "description": "Simulates login with username and password",
        "tags": [ "authentication" ],
        "summary": "tryLogin.",
        "operationId": "tryLogin",
        "parameters": [
          {
            "in": "formData",
            "description": "username or email.",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "description": "user's password.",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "description": "user's locale.",
            "name": "localeId",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/login": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "post": {
        "x-skip-auth": true,
        "consumes": [ "application/x-www-form-urlencoded" ],
        "responses": {
          "200": {
            "description": "Authentication token",
            "schema": {
              "type": "object",
              "required": [ "success", "message", "access_token", "profile" ],
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "access_token": { "type": "string" },
                "profile": { "type": "object" }
              }
            }
          },
          "401": {
            "description": "Unathorized: Invalid credentials. Wrong username or password.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "summary": "Authenticate and receive token",
        "description": "The **login** endpoint validates passed credentials and returns an API token for subsequent requests to the API.\n",
        "tags": [ "authentication" ],
        "operationId": "login",
        "parameters": [
          {
            "in": "header",
            "description": "The device id.",
            "name": "x-device-id",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "description": "User's username or email",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "description": "User's password in plain text",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "description": "User's locale, as ISO language code (See [table](http://www.lingoes.net/en/translator/langcode.htm))",
            "name": "localeId",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/remote_login": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-hide": true,
        "operationId": "getRemoteLoginUserToken",
        "summary": "get user token",
        "description": "The **remoteLogin** endpoint returns user token that saved from other server",
        "tags": [ "authentication" ],
        "responses": { "200": { "description": "return remote user token" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Server",
            "name": "server",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/send_token": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-hide": true,
        "operationId": "sendTokenToRemoteServer",
        "summary": "send token to sever",
        "description": "The **sendToken** endpoint send token to the server in query.",
        "tags": [ "authentication" ],
        "responses": { "200": { "description": "return the response from remote save token" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Server",
            "name": "server",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/save_token": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "post": {
        "x-hide": true,
        "x-skip-auth": true,
        "operationId": "saveRemoteLoginToken",
        "summary": "Save remote token to DB",
        "description": "The **saveToken** endpoint save token from remote server.",
        "tags": [ "authentication" ],
        "responses": { "200": { "description": "return the token" } },
        "parameters": [
          {
            "in": "body",
            "description": "Token",
            "name": "Token",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "token", "cookieType", "server", "userName" ],
              "properties": {
                "token": { "type": "string" },
                "cookieType": { "type": "string" },
                "server": { "type": "string" },
                "userName": { "type": "string" },
                "deviceId": { "type": "string" },
                "expiration": { "type": "string" },
                "issueDate": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/authentication/logout": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "responses": {
          "200": { "description": "Log out was perfomed successfully. The API token has been revoked." },
          "401": {
            "description": "Unauthorized: Invalid API token.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "summary": "Log out and revoke token",
        "description": "The **logout** endpoint revokes the given user's token, ensuring requests made with it will no longer work.<br/>A new token may be generated using the **login** endpoint.",
        "tags": [ "authentication" ],
        "operationId": "logout",
        "parameters": [
          {
            "in": "header",
            "description": "The device id.",
            "name": "x-device-id",
            "required": false,
            "type": "string"
          },
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Specific Device ID who's token to revoke. If not provided, the user's API token will be revoked.",
            "name": "targetDevice",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/logout_all": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "responses": {
          "204": { "description": "Logout all was performed successfully. All user's tokens have been revoked." },
          "401": {
            "description": "Unauthorized: Invalid API token.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "summary": "Log out and revoke all user's tokens",
        "description": "The **logout all** endpoint revokes all if a user's existing tokens, both for the API and all devices.",
        "tags": [ "authentication" ],
        "operationId": "logoutAll",
        "parameters": [
          {
            "in": "header",
            "description": "The device id.",
            "name": "x-device-id",
            "required": false,
            "type": "string"
          },
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/authentication/admin/logout": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "admins-only",
      "get": {
        "responses": {
          "204": { "description": "Tokens revoked successfuly" },
          "401": {
            "description": "Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "description": "The **admin logout** endpoint allows admin users to revoke all tokens of multiple users.",
        "tags": [ "authentication" ],
        "summary": "Revoke all tokens for multiple users",
        "operationId": "logoutUsers",
        "parameters": [
          {
            "in": "header",
            "description": "The device id.",
            "name": "x-device-id",
            "required": false,
            "type": "string"
          },
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "User IDs who's tokens to revoke, separated by a comma (`,`) and without spaces",
            "name": "users",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          }
        ]
      }
    },
    "/authentication/admin/tokens/{tokenType}": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "admins-only",
      "delete": {
        "responses": {
          "204": { "description": "API token revoked successfuly" },
          "401": {
            "description": "Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "description": "The **admin delete tokens** endpoint allows admin users to revoke all API tokens of multiple users, leaving the device tokens intact.",
        "tags": [ "authentication" ],
        "summary": "Revoke API tokens for multiple users",
        "operationId": "revokeTokens",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "Token type to revoke",
            "name": "tokenType",
            "required": true,
            "type": "string",
            "enum": [ "api", "odbc", "sso" ]
          },
          {
            "in": "query",
            "description": "User IDs who's tokens to revoke, separated by a comma (`,`) and without spaces",
            "name": "users",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          }
        ]
      }
    },
    "/authentication/get_license": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-hide": true,
        "responses": { "200": { "description": "Fetching license info was sucessful." } },
        "summary": "Get license information from oxygen",
        "operationId": "getLicense"
      }
    },
    "/authentication/login_saml_callback": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "post": {
        "consumes": [ "application/x-www-form-urlencoded" ],
        "responses": { "302": { "description": "Redirect to the original URL" } },
        "summary": "Receive token for SAML authentication",
        "description": "The **login_saml_callback** endpoint receives passed SAML credentials and returns an API token for subsequent requests to the API.",
        "tags": [ "authentication" ],
        "operationId": "samlLoginCallback",
        "parameters": [
          {
            "in": "formData",
            "description": "The original URL that the user requested",
            "name": "RelayState",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "description": "Response from SAML identity provider with decoded user data",
            "name": "SAMLResponse",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/authentication/server_access": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "getAllServersAccess",
        "summary": "Get a list of trusted servers",
        "description": "The **get all servers access** endpoint returns a list of trusted servers that can copy dashboards to your server.",
        "tags": [ "authentication" ],
        "responses": { "200": { "description": "An array of trusted servers" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      },
      "post": {
        "operationId": "addServerAccess",
        "summary": "Add a trusted server",
        "description": "The **add server access** endpoint add trusted server.",
        "tags": [ "authentication" ],
        "responses": {
          "200": { "description": "The added server" },
          "400": {
            "description": "Server Already Exists",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "The server object (in `JSON` notation) to be added to the Trusted Server list.",
            "name": "serverAccess",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "serverName" ],
              "properties": {
                "serverName": { "type": "string" },
                "name": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/app_database/encrypt_database_password": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "admins-only",
      "get": {
        "operationId": "encryptMongoPassword",
        "summary": "Returns an encrypted password from plaintext",
        "description": "The **encryptDatabasePassword** endpoint encrypts and returns a password from plaintext.",
        "tags": [ "admin" ],
        "responses": { "200": { "description": "Plaintext password was encrypted successfully" } },
        "parameters": [
          {
            "in": "query",
            "description": "plaintext password",
            "name": "plaintext",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/app_database/change_database_user_password": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "admins-only",
      "post": {
        "operationId": "changeMongoUserPassword",
        "summary": "Change a MongoDB user’s password",
        "description": "Change a user’s password for the MongoDB installed with nonsense.",
        "tags": [ "admin" ],
        "responses": {
          "200": { "description": "Password changed successfully" },
          "400": { "description": "Invalid username" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "The User object that defines the user whose password is to be changed and the new password.",
            "name": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "userName" ],
              "properties": {
                "userName": { "type": "string" },
                "password": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/authentication/server_access/{id}": {
      "x-swagger-router-controller": "authentication.controller.v1",
      "x-permission-type": "none",
      "patch": {
        "operationId": "editServerAccess",
        "summary": "Edit a trusted server",
        "description": "The **patch servers access** endpoint edits a trusted server by its ID. You can revtrive the ID throught the **get servers access** endpoint.",
        "tags": [ "authentication" ],
        "responses": { "200": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID if the trusted server.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The server object (in `JSON` notation) to be edited in the Trusted Server list.",
            "name": "serverAccess",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "serverName" ],
              "properties": {
                "serverName": { "type": "string" },
                "name": { "type": "string" }
              }
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteServerAccess",
        "summary": "Remove a trusted server's access",
        "description": "The **delete servers access** endpoint removes a trusted server from the Trusted Server Access list.",
        "tags": [ "authentication" ],
        "responses": { "200": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the trusted server.",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/folders": {
      "x-swagger-router-controller": "folders.controller.v1",
      "get": {
        "x-permission-type": "none",
        "responses": {
          "200": {
            "description": "An array of folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "oid": { "type": "string" },
                  "owner": { "type": "string" },
                  "type": { "type": "string" },
                  "userId": { "type": "string" },
                  "instanceType": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "parentId": { "type": "string" }
                }
              }
            }
          }
        },
        "operationId": "getFolders",
        "summary": "Get folders",
        "description": "The **get folders** endpoint provides access to a specified user's folders in their stored format as `JSON` objects.\n<br/>The results can be filtered by the 'name' parameter.\n<br/><br/>The expandable fields for the folder object are `dashboards` and `owner`.\n",
        "tags": [ "folders" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Name to filter by",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Structure type of the folders",
            "name": "structure",
            "required": false,
            "type": "string",
            "enum": [ "flat", "tree" ]
          },
          {
            "in": "query",
            "description": "Array of folder IDs to get, separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "folders/create",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "oid": { "type": "string" },
                "owner": { "type": "string" },
                "type": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "parentId": { "type": "string" }
              }
            }
          }
        },
        "description": "The **add folder** endpoint reveives a folder object and adds it to the user's folders.",
        "tags": [ "folders" ],
        "summary": "Add a new folder",
        "operationId": "addFolder",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic folder object to be added",
            "name": "folder",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "parentId": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/folders/{id}": {
      "x-swagger-router-controller": "folders.controller.v1",
      "x-permission-type": "asset",
      "x-asset-type": "folder",
      "x-asset-prop-path": "swagger.params.id",
      "get": {
        "x-permission-type": "none",
        "operationId": "getFolderById",
        "summary": "Get a specific folder",
        "description": "The **get folder by ID** endpoint returns a specific folder object by ID. <br/>The expandable fields for the folder object are `dashboards` and `owner`.",
        "tags": [ "folders" ],
        "responses": {
          "200": {
            "description": "The folder with the given ID",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "oid": { "type": "string" },
                "owner": { "type": "string" },
                "type": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "parentId": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the folder to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-path": "folders/modify",
        "responses": {
          "200": {
            "description": "The updated folder",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "oid": { "type": "string" },
                "owner": { "type": "string" },
                "type": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "parentId": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **update folder** endpoint will perform a partial update on the folder of the provided ID, updating the fields in the folder object provided in the body.",
        "tags": [ "folders" ],
        "summary": "Update a folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the folder to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The partial folder object who's fields will be updated",
            "name": "folder",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "parentId": { "type": "string" }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-path": "folders/delete",
        "responses": {
          "204": { "description": "Delete operation was successfull" },
          "404": {
            "description": "Folder not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **delete folder** endpoint deletes the entire folder subtree, including all dashboards and widgets.",
        "tags": [ "folders" ],
        "summary": "Delete a folder",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the folder to delete",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/folders/{id}/subtree": {
      "x-swagger-router-controller": "folders.controller.v1",
      "get": {
        "x-permission-type": "none",
        "responses": {
          "200": {
            "description": "The folders subtree with the given ID",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "oid": { "type": "string" },
                "owner": { "type": "string" },
                "type": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "parentId": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "description: Folder not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get a folder subtree",
        "description": "The **get folder subtree by ID** endpoint returns the subtree for a specific folder.",
        "tags": [ "folders" ],
        "operationId": "getFolderSubtreeById",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the folder to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Structure type of the folders",
            "name": "structure",
            "required": false,
            "type": "string",
            "enum": [ "flat", "tree" ]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/folders/{id}/ancestors": {
      "x-swagger-router-controller": "folders.controller.v1",
      "get": {
        "x-permission-type": "none",
        "responses": {
          "200": {
            "description": "The folders ancestors with the given ID",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "oid": { "type": "string" },
                "owner": { "type": "string" },
                "type": { "type": "string" },
                "userId": { "type": "string" },
                "instanceType": { "type": "string" },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                },
                "parentId": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "description: Folder not found\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get folder ancestors",
        "description": "The **get folder ancestors by ID** endpoint returns the ancestors of a specific folder.",
        "tags": [ "folders" ],
        "operationId": "getFolderAncestorsById",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the folder to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "Structure type of the folders",
            "name": "structure",
            "required": false,
            "type": "string",
            "enum": [ "flat", "tree" ]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/folders/getDashboardList": {
      "x-swagger-router-controller": "folders.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-hide": true,
        "responses": {
          "200": {
            "description": "An array of folders and dashboards - for mobile use only",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "oid": { "type": "string" },
                  "owner": { "type": "string" },
                  "type": { "type": "string" },
                  "userId": { "type": "string" },
                  "instanceType": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "parentId": { "type": "string" }
                }
              }
            }
          }
        },
        "operationId": "getDashboardsList",
        "summary": "Get a user's folders and dashboards flat",
        "description": "The **getDashboardsList** endpoint provides access to a specified user's folders and dashboards in their stored format as `JSON` objects.\n<br/><br/>This endpoint is used for mobile only\n",
        "tags": [ "folders" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/folders/bulk": {
      "x-swagger-router-controller": "folders.controller.v1",
      "delete": {
        "x-permission-path": "folders/delete",
        "x-permission-type": "general",
        "responses": {
          "200": { "description": "Delete operation was successfull" },
          "404": {
            "description": "Folder not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **delete folders** endpoint deletes the entire folders subtree, including all dashboards and widgets.",
        "tags": [ "folders" ],
        "summary": "Delete folders",
        "operationId": "deleteFolders",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "The IDs of the folders to delete",
            "name": "folderIds",
            "required": true,
            "collectionFormat": "csv",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ]
      }
    },
    "/navver": {
      "x-swagger-router-controller": "folders.controller.v1",
      "get": {
        "x-permission-type": "none",
        "responses": {
          "200": {
            "description": "An array of folders",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "oid": { "type": "string" },
                  "owner": { "type": "string" },
                  "type": { "type": "string" },
                  "userId": { "type": "string" },
                  "instanceType": { "type": "string" },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "parentId": { "type": "string" }
                }
              }
            }
          }
        },
        "operationId": "getFoldersAndDashboardsForNavver",
        "summary": "Get all data for navver",
        "description": "The **navver** endpoint provides access to a specified user's folders and dashboards in their stored format as `JSON` objects.\n",
        "tags": [ "folders" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/reporting": {
      "x-swagger-router-controller": "reporting.controller.v1",
      "x-permission-type": "none",
      "post": {
        "operationId": "sendReports",
        "summary": "Send E-Mail report for an asset",
        "description": "The **send report** endpoint receives asset info and recipients list and sends an email report. Note: the users and groups in the recipients section must be **shared** to the dashboard.\n",
        "tags": [ "reporting" ],
        "responses": {
          "204": { "description": "Send report operation was successful" },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "subErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "error": {
                                "type": "object",
                                "properties": {
                                  "code": { "type": "integer" },
                                  "message": { "type": "string" },
                                  "status": { "type": "integer" },
                                  "httpMessage": { "type": "string" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "An object containing the data needed in order to send the report. AssetId being the dashboard ID and the recipients array should contain the user's /group's ID along with its type. The prefrences section describes the content of the Email to be sent.\n",
            "name": "reportObject",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "assetId", "assetType", "recipients", "preferences" ],
              "properties": {
                "assetId": { "type": "string" },
                "assetType": {
                  "type": "string",
                  "enum": [ "dashboard" ]
                },
                "recipients": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      },
                      "recipient": { "type": "string" }
                    }
                  }
                },
                "preferences": {
                  "type": "object",
                  "properties": {
                    "inline": { "type": "boolean" },
                    "pdf": {
                      "type": "object",
                      "properties": {
                        "includeTitle": {
                          "type": "boolean",
                          "default": true
                        },
                        "includeFilters": {
                          "type": "boolean",
                          "default": true
                        },
                        "includeDS": {
                          "type": "boolean",
                          "default": true
                        },
                        "renderingInfo": {
                          "type": "object",
                          "properties": {
                            "paperFormat": {
                              "type": "string",
                              "default": "A4",
                              "enum": [ "A3", "A4", "A5", "legal", "letter", "tabloid", "LEGAL", "LETTER", "TABLOID" ]
                            },
                            "paperOrientation": {
                              "type": "string",
                              "default": "portrait",
                              "enum": [ "portrait", "landscape" ]
                            },
                            "layout": {
                              "type": "string",
                              "default": "asis",
                              "enum": [ "asis", "feed" ]
                            },
                            "showNarration": {
                              "type": "boolean",
                              "default": true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/events": {
      "x-swagger-router-controller": "events.controller.v1",
      "get": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "getEvents",
        "summary": "Get an array of user's events",
        "description": "The **events** endpoint receives event properties that are filtered by (date from, date to, has seen, is hidden) and returns an array of events that according to the defined filters for a user.\n<br/><br/>The expandable field for the event object is `alert`.\n",
        "tags": [ "events" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Array of alert ids to filter by, separated by a comma (`,`) and without spaces",
            "name": "alertIds",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          },
          {
            "in": "query",
            "name": "dateFrom",
            "description": "The date/time from which the events begin. (ISO format)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "seen",
            "description": "Event state filter. `true` indicates the event has been seen by the user, `false` indicates the event has not been seen.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "hide",
            "description": "Event state filter. `true` indicates the event was hidden from the user, `false` indicates the event displayed to the user.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "interest",
            "description": "Event state filter. `true` indicates the user is intrested in the event as a notification, `false` indicates the user is not intrested in the event as a notification.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of events",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "url": { "type": "string" },
                  "context": {
                    "type": "object",
                    "properties": {
                      "values": {
                        "type": "array",
                        "items": { "type": "integer" }
                      }
                    }
                  },
                  "by": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "name": { "type": "string" },
                      "oid": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "dashboard", "cube", "server" ]
                      }
                    }
                  },
                  "seen": { "type": "boolean" },
                  "hide": { "type": "boolean" },
                  "alert": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "updateUserEventBulk",
        "summary": "Update bulk of events",
        "description": "The **update bulk of events** endpoint performs a partial update on the events according to the query, updating the fields in the event object defined in the body.\nThe updatable fields are `seen` and `hide`.\n",
        "tags": [ "events" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "query - fetching",
            "name": "updateQuery",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "object",
                  "properties": {
                    "dateFrom": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "dateTo": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "seen": { "type": "boolean" },
                    "hide": { "type": "boolean" }
                  }
                },
                "update": {
                  "type": "object",
                  "properties": {
                    "seen": { "type": "boolean" },
                    "hide": { "type": "boolean" }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated events number",
            "schema": { "type": "integer" }
          }
        }
      }
    },
    "/events/{id}": {
      "x-swagger-router-controller": "events.controller.v1",
      "patch": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "updateUserEvent",
        "summary": "Update an event",
        "description": "The **update event** endpoint performs a partial update on the event of the defined ID, updating the fields in the event object defined in the body.\nThe updatable fields are `seen` and `hide`.\n",
        "tags": [ "events" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the event to be updated",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The partial event object whose field will be updated",
            "name": "event",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "seen": { "type": "boolean" },
                "hide": { "type": "boolean" }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated event",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "time": {
                  "type": "string",
                  "format": "date-time"
                },
                "url": { "type": "string" },
                "context": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": { "type": "integer" }
                    }
                  }
                },
                "by": {
                  "type": "object",
                  "required": [ "type" ],
                  "properties": {
                    "name": { "type": "string" },
                    "oid": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "type": {
                      "type": "string",
                      "enum": [ "dashboard", "cube", "server" ]
                    }
                  }
                },
                "seen": { "type": "boolean" },
                "hide": { "type": "boolean" },
                "alert": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/count": {
      "x-swagger-router-controller": "events.controller.v1",
      "get": {
        "x-hide": true,
        "x-permission-type": "none",
        "operationId": "getEventsCount",
        "summary": "Get a number of a user's events",
        "description": "The **events count** endpoint returns the amount of events for a user filtered according by parameters such as date/time, has seen, and is hidden.\n",
        "tags": [ "events" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "description": "The date/time from which the event count begins. (ISO format)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "seen",
            "description": "Event state filter. `true` indicates the event has been seen by the user, `false` indicates the event has not been seen.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "hide",
            "description": "Event state filter. `true` indicates the event was hidden from the user, `false` indicates the event displayed to the user.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "interest",
            "description": "Event state filter. `true` indicates the user is intrested in the event as a notification, `false` indicates the user is not intrested in the event as a notification.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of events filtered by the received parameters",
            "schema": { "type": "integer" }
          }
        }
      }
    },
    "/alerts": {
      "x-swagger-router-controller": "alerts.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "widgets/add_to_pulse",
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "required": [ "parties", "category", "type", "enabled", "name", "action" ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "script": {
                  "type": "string",
                  "default": ""
                },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "disabledUsers": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "category": {
                  "type": "string",
                  "enum": [ "system", "kpi", "dashboard" ]
                },
                "type": {
                  "type": "string",
                  "enum": [ "build", "kpi" ]
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "kpi": {
                      "type": "object",
                      "required": [ "datasource", "metadata" ],
                      "properties": {
                        "datasource": { "type": "object" },
                        "metadata": {
                          "type": "object",
                          "required": [ "measures" ],
                          "properties": {
                            "measures": {
                              "type": "array",
                              "minItems": 1,
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "format": { "type": "object" }
                                }
                              }
                            },
                            "filters": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "panel": {
                                    "type": "string",
                                    "default": "scope",
                                    "enum": [ "scope" ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "dashboard": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "locale": { "type": "string" },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean",
                      "default": true
                    },
                    "mobile": {
                      "type": "boolean",
                      "default": true
                    },
                    "feed": {
                      "type": "boolean",
                      "default": true
                    },
                    "slack": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        },
                        "channels": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The **add alert** endpoint receives an alert object and adds it to the system's alerts.",
        "tags": [ "alerts" ],
        "summary": "Add a new alert",
        "operationId": "addAlert",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic alert object to be added.",
            "name": "alert",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "parties", "category", "type", "enabled", "name", "action" ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "script": {
                  "type": "string",
                  "default": ""
                },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "disabledUsers": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "category": {
                  "type": "string",
                  "enum": [ "system", "kpi", "dashboard" ]
                },
                "type": {
                  "type": "string",
                  "enum": [ "build", "kpi" ]
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "kpi": {
                      "type": "object",
                      "required": [ "datasource", "metadata" ],
                      "properties": {
                        "datasource": { "type": "object" },
                        "metadata": {
                          "type": "object",
                          "required": [ "measures" ],
                          "properties": {
                            "measures": {
                              "type": "array",
                              "minItems": 1,
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "format": { "type": "object" }
                                }
                              }
                            },
                            "filters": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "panel": {
                                    "type": "string",
                                    "default": "scope",
                                    "enum": [ "scope" ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "dashboard": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "locale": { "type": "string" },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean",
                      "default": true
                    },
                    "mobile": {
                      "type": "boolean",
                      "default": true
                    },
                    "feed": {
                      "type": "boolean",
                      "default": true
                    },
                    "slack": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        },
                        "channels": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "get": {
        "x-permission-type": "none",
        "operationId": "getAlerts",
        "summary": "Get alerts",
        "description": "The **get alert** endpoint provides access to a specified user's alert in their stored format as `JSON` objects.",
        "tags": [ "alerts" ],
        "responses": {
          "200": {
            "description": "The alert with the given ID",
            "schema": {
              "type": "object",
              "required": [ "parties", "category", "type", "enabled", "name", "action" ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "script": {
                  "type": "string",
                  "default": ""
                },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "disabledUsers": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "category": {
                  "type": "string",
                  "enum": [ "system", "kpi", "dashboard" ]
                },
                "type": {
                  "type": "string",
                  "enum": [ "build", "kpi" ]
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "kpi": {
                      "type": "object",
                      "required": [ "datasource", "metadata" ],
                      "properties": {
                        "datasource": { "type": "object" },
                        "metadata": {
                          "type": "object",
                          "required": [ "measures" ],
                          "properties": {
                            "measures": {
                              "type": "array",
                              "minItems": 1,
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "format": { "type": "object" }
                                }
                              }
                            },
                            "filters": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "panel": {
                                    "type": "string",
                                    "default": "scope",
                                    "enum": [ "scope" ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "dashboard": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "locale": { "type": "string" },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean",
                      "default": true
                    },
                    "mobile": {
                      "type": "boolean",
                      "default": true
                    },
                    "feed": {
                      "type": "boolean",
                      "default": true
                    },
                    "slack": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        },
                        "channels": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Alert not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Array of alert IDs to get separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/alerts/{id}": {
      "x-swagger-router-controller": "alerts.controller.v1",
      "patch": {
        "x-permission-type": "none",
        "operationId": "updateUserAlert",
        "summary": "Update an alert",
        "description": "The **update alert** endpoint performs a partial update on the alert of the defined ID, updating the fields in the alert object defined in the body. The updatable fields are `name`, `enabled`, `message`, `parties`, `action`, `context`.",
        "tags": [ "alerts" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the alert to be updated",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The partial alert object whose field will be updated",
            "name": "alert",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": { "type": "boolean" },
                "script": { "type": "string" },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "boolean" },
                    "mobile": { "type": "boolean" },
                    "feed": { "type": "boolean" },
                    "slack": {
                      "type": "object",
                      "required": [ "active", "url", "channels" ],
                      "properties": {
                        "active": { "type": "boolean" },
                        "url": { "type": "string" },
                        "channels": { "type": "string" }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "required": [ "active", "url" ],
                      "properties": {
                        "active": { "type": "boolean" },
                        "url": { "type": "string" }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated alert",
            "schema": {
              "type": "object",
              "required": [ "parties", "category", "type", "enabled", "name", "action" ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "script": {
                  "type": "string",
                  "default": ""
                },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "disabledUsers": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "category": {
                  "type": "string",
                  "enum": [ "system", "kpi", "dashboard" ]
                },
                "type": {
                  "type": "string",
                  "enum": [ "build", "kpi" ]
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "kpi": {
                      "type": "object",
                      "required": [ "datasource", "metadata" ],
                      "properties": {
                        "datasource": { "type": "object" },
                        "metadata": {
                          "type": "object",
                          "required": [ "measures" ],
                          "properties": {
                            "measures": {
                              "type": "array",
                              "minItems": 1,
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "format": { "type": "object" }
                                }
                              }
                            },
                            "filters": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "panel": {
                                    "type": "string",
                                    "default": "scope",
                                    "enum": [ "scope" ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "dashboard": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "locale": { "type": "string" },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean",
                      "default": true
                    },
                    "mobile": {
                      "type": "boolean",
                      "default": true
                    },
                    "feed": {
                      "type": "boolean",
                      "default": true
                    },
                    "slack": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        },
                        "channels": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Alert not found, or not owned by the user",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "x-permission-type": "none",
        "operationId": "getAlertById",
        "summary": "Get a specific alert",
        "description": "The **get alert by ID** endpoint returns a specific alert object by ID.",
        "tags": [ "alerts" ],
        "responses": {
          "200": {
            "description": "The alert with the given ID",
            "schema": {
              "type": "object",
              "required": [ "parties", "category", "type", "enabled", "name", "action" ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "script": {
                  "type": "string",
                  "default": ""
                },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "disabledUsers": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "category": {
                  "type": "string",
                  "enum": [ "system", "kpi", "dashboard" ]
                },
                "type": {
                  "type": "string",
                  "enum": [ "build", "kpi" ]
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "kpi": {
                      "type": "object",
                      "required": [ "datasource", "metadata" ],
                      "properties": {
                        "datasource": { "type": "object" },
                        "metadata": {
                          "type": "object",
                          "required": [ "measures" ],
                          "properties": {
                            "measures": {
                              "type": "array",
                              "minItems": 1,
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "format": { "type": "object" }
                                }
                              }
                            },
                            "filters": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "panel": {
                                    "type": "string",
                                    "default": "scope",
                                    "enum": [ "scope" ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "dashboard": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "locale": { "type": "string" },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean",
                      "default": true
                    },
                    "mobile": {
                      "type": "boolean",
                      "default": true
                    },
                    "feed": {
                      "type": "boolean",
                      "default": true
                    },
                    "slack": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        },
                        "channels": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Alert not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the alert to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "responses": {
          "204": { "description": "Delete operation was successfull" },
          "404": {
            "description": "Alert not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "The **delete alert** endpoint deletes an alert and all of it's related events.",
        "tags": [ "alerts" ],
        "summary": "Delete an alert",
        "operationId": "deleteAlert",
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the alert to be deleted",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/alerts/count": {
      "x-swagger-router-controller": "alerts.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getAlertsCount",
        "summary": "Get the amount of alerts for a user",
        "description": "The **alerts count** endpoint returns the amount of alerts for a user if the user is the owner of the alerts.",
        "tags": [ "alerts" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of the user alerts",
            "schema": {
              "type": "object",
              "required": [ "count" ],
              "properties": { "count": { "type": "number" } }
            }
          }
        }
      }
    },
    "/alerts/{id}/setReceiveNotification": {
      "x-swagger-router-controller": "alerts.controller.v1",
      "patch": {
        "x-permission-type": "none",
        "operationId": "updateReceiveNotification",
        "summary": "Update alert's disabled users",
        "description": "The **update receive notification** endpoint removes or adds a specific user to be notified when the alert is being executed.",
        "tags": [ "alerts" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the alert to be updated",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The user and parameter Whether to disable or enable the user",
            "name": "setReceiveNotification",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "receiveNotification" ],
              "properties": { "receiveNotification": { "type": "boolean" } }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated alert",
            "schema": {
              "type": "object",
              "required": [ "parties", "category", "type", "enabled", "name", "action" ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "message": { "type": "string" },
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "script": {
                  "type": "string",
                  "default": ""
                },
                "parties": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "group", "user", "adgroup" ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      }
                    }
                  }
                },
                "disabledUsers": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  }
                },
                "category": {
                  "type": "string",
                  "enum": [ "system", "kpi", "dashboard" ]
                },
                "type": {
                  "type": "string",
                  "enum": [ "build", "kpi" ]
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "context": {
                  "type": "object",
                  "properties": {
                    "backToNormal": { "type": "boolean" },
                    "buildSuccessAfterFailed": { "type": "boolean" },
                    "buildSuccess": { "type": "boolean" },
                    "buildFailed": { "type": "boolean" },
                    "kpi": {
                      "type": "object",
                      "required": [ "datasource", "metadata" ],
                      "properties": {
                        "datasource": { "type": "object" },
                        "metadata": {
                          "type": "object",
                          "required": [ "measures" ],
                          "properties": {
                            "measures": {
                              "type": "array",
                              "minItems": 1,
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "format": { "type": "object" }
                                }
                              }
                            },
                            "filters": {
                              "type": "array",
                              "uniqueItems": true,
                              "items": {
                                "type": "object",
                                "required": [ "jaql" ],
                                "properties": {
                                  "jaql": { "type": "object" },
                                  "panel": {
                                    "type": "string",
                                    "default": "scope",
                                    "enum": [ "scope" ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "dashboard": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "notifyOnceMet": { "type": "boolean" },
                    "notifyNotMet": { "type": "boolean" },
                    "condition": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "fixed", "smart" ]
                        },
                        "leftOperand": { "type": "number" },
                        "operator": { "type": "string" },
                        "rightOperand": { "type": "number" }
                      }
                    },
                    "locale": { "type": "string" },
                    "sources": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "type" ],
                        "properties": {
                          "name": { "type": "string" },
                          "oid": {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{24}$"
                          },
                          "server": { "type": "string" },
                          "type": {
                            "type": "string",
                            "enum": [ "cube", "server" ]
                          }
                        }
                      }
                    }
                  }
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean",
                      "default": true
                    },
                    "mobile": {
                      "type": "boolean",
                      "default": true
                    },
                    "feed": {
                      "type": "boolean",
                      "default": true
                    },
                    "slack": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        },
                        "channels": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "zapier": {
                      "type": "object",
                      "x-default": true,
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "default": false
                        },
                        "url": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "default": [],
                      "items": {
                        "type": "object",
                        "required": [ "active", "url", "name" ],
                        "properties": {
                          "name": { "type": "string" },
                          "url": { "type": "string" },
                          "active": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Alert not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/features": {
      "x-swagger-router-controller": "featureToggle.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "getFeatures",
        "summary": "Get an array of features configurations",
        "description": "The **features** endpoint return an array of all features than can be turned on and off.\n",
        "tags": [ "features" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of features",
            "schema": {
              "type": "array",
              "items": { "type": "object" }
            }
          }
        }
      }
    },
    "/features/{key}/toggle": {
      "x-swagger-router-controller": "featureToggle.controller.v1",
      "patch": {
        "x-permission-type": "admins-only",
        "operationId": "toggleFeature",
        "summary": "Turn a feature on or off",
        "description": "The **toggle** endpoint turns a specific feature on or off.",
        "tags": [ "features" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The key of the feature to be updated",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Should the feature be turned on or off",
            "name": "toggleFeature",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "active" ],
              "properties": { "active": { "type": "boolean" } }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated feature",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "Feature not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/settings/email_server": {
      "x-swagger-router-controller": "settings.emailServer.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "getEmailServer",
        "summary": "Return email server settings",
        "description": "The **email server settings** used for Email Server settings managing.\n",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Email server settings",
            "schema": {
              "type": "object",
              "required": [ "enable", "host", "port" ],
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "If TRUE enable email server instead of default."
                },
                "host": {
                  "type": "string",
                  "description": "Hostname or IP address to connect to."
                },
                "port": {
                  "type": "integer",
                  "description": "Port to connect to."
                },
                "secure": {
                  "type": "boolean",
                  "default": false,
                  "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
                },
                "ignoreTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
                },
                "requireTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
                },
                "connectionTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 10000,
                  "description": "How many milliseconds to wait for the connection to establish."
                },
                "greetingTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds to wait for the greeting after connection is established."
                },
                "socketTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds of inactivity to allow."
                },
                "user": {
                  "type": "string",
                  "description": "User name."
                },
                "pass": {
                  "type": "string",
                  "description": "User password."
                },
                "logger": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
                },
                "debug": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
                }
              }
            }
          },
          "404": {
            "description": "Email server does not set",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addEmailServer",
        "summary": "Add email server settings",
        "description": "The **email server settings** used for Email Server settings managing.\n",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Email server settings",
            "schema": {
              "type": "object",
              "required": [ "enable", "host", "port" ],
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "If TRUE enable email server instead of default."
                },
                "host": {
                  "type": "string",
                  "description": "Hostname or IP address to connect to."
                },
                "port": {
                  "type": "integer",
                  "description": "Port to connect to."
                },
                "secure": {
                  "type": "boolean",
                  "default": false,
                  "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
                },
                "ignoreTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
                },
                "requireTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
                },
                "connectionTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 10000,
                  "description": "How many milliseconds to wait for the connection to establish."
                },
                "greetingTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds to wait for the greeting after connection is established."
                },
                "socketTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds of inactivity to allow."
                },
                "user": {
                  "type": "string",
                  "description": "User name."
                },
                "pass": {
                  "type": "string",
                  "description": "User password."
                },
                "logger": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
                },
                "debug": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
                }
              }
            }
          },
          "400": { "description": "- **7501** Email server settings already exists\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the settings of email server",
            "name": "emailServer",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "enable", "host", "port" ],
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "If TRUE enable email server instead of default."
                },
                "host": {
                  "type": "string",
                  "description": "Hostname or IP address to connect to."
                },
                "port": {
                  "type": "integer",
                  "description": "Port to connect to."
                },
                "secure": {
                  "type": "boolean",
                  "default": false,
                  "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
                },
                "ignoreTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
                },
                "requireTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
                },
                "connectionTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 10000,
                  "description": "How many milliseconds to wait for the connection to establish."
                },
                "greetingTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds to wait for the greeting after connection is established."
                },
                "socketTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds of inactivity to allow."
                },
                "user": {
                  "type": "string",
                  "description": "User name."
                },
                "pass": {
                  "type": "string",
                  "description": "User password."
                },
                "logger": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
                },
                "debug": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
                }
              }
            }
          }
        ]
      },
      "patch": {
        "operationId": "updateEmailServer",
        "summary": "Update email server settings",
        "description": "The **email server settings** used for Email Server settings managing.\n",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Email server settings",
            "schema": {
              "type": "object",
              "required": [ "enable", "host", "port" ],
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "If TRUE enable email server instead of default."
                },
                "host": {
                  "type": "string",
                  "description": "Hostname or IP address to connect to."
                },
                "port": {
                  "type": "integer",
                  "description": "Port to connect to."
                },
                "secure": {
                  "type": "boolean",
                  "default": false,
                  "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
                },
                "ignoreTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
                },
                "requireTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
                },
                "connectionTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 10000,
                  "description": "How many milliseconds to wait for the connection to establish."
                },
                "greetingTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds to wait for the greeting after connection is established."
                },
                "socketTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds of inactivity to allow."
                },
                "user": {
                  "type": "string",
                  "description": "User name."
                },
                "pass": {
                  "type": "string",
                  "description": "User password."
                },
                "logger": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
                },
                "debug": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
                }
              }
            }
          },
          "400": { "description": "- **7501** Email server settings not found\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the settings of email server",
            "name": "emailServer",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "If TRUE enable email server instead of default."
                },
                "host": {
                  "type": "string",
                  "description": "Hostname or IP address to connect to."
                },
                "port": {
                  "type": "integer",
                  "description": "Port to connect to."
                },
                "secure": {
                  "type": "boolean",
                  "default": false,
                  "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
                },
                "ignoreTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
                },
                "requireTLS": {
                  "type": "boolean",
                  "default": false,
                  "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
                },
                "connectionTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 10000,
                  "description": "How many milliseconds to wait for the connection to establish."
                },
                "greetingTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds to wait for the greeting after connection is established."
                },
                "socketTimeout": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 5000,
                  "description": "How many milliseconds of inactivity to allow."
                },
                "user": {
                  "type": "string",
                  "description": "User name."
                },
                "pass": {
                  "type": "string",
                  "description": "User password."
                },
                "logger": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
                },
                "debug": {
                  "type": "boolean",
                  "default": false,
                  "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
                }
              }
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteEmailServer",
        "summary": "Delete email server settings",
        "description": "The **email server settings** used for Email Server settings managing.\n",
        "tags": [ "settings" ],
        "responses": { "204": { "description": "Delete operation was successfull" } }
      }
    },
    "/settings/public_settings": {
      "x-swagger-router-controller": "settings.publicSettings.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-skip-auth": true,
        "operationId": "getPublicSettings",
        "summary": "Return public configuration settings",
        "description": "The **Public Configuration** used for getting public system settings.\n",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Public system configuration settings.",
            "schema": {
              "type": "object",
              "required": [ "firstday" ],
              "properties": {
                "firstday": {
                  "type": "string",
                  "description": "Name of the first day of week"
                },
                "language": {
                  "type": "string",
                  "description": "Language for localization"
                }
              }
            }
          }
        }
      }
    },
    "/settings/sso": {
      "x-swagger-router-controller": "settings.sso.controller.v1",
      "x-permission-type": "admins-only",
      "get": {
        "operationId": "getSsoSettings",
        "summary": "Returns sso settings.",
        "description": "The **sso settings** used for single sign on configuration.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "SSO configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "sso"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "If SSO is enabled."
                },
                "ssoType": {
                  "type": "string",
                  "description": "Type of SSO.",
                  "default": "jwt"
                },
                "loginUrl": {
                  "type": "string",
                  "description": "This is the URL that nonsense will invoke to attempt remote authentication."
                },
                "logoutUrl": {
                  "type": "string",
                  "description": "This is the URL that nonsense will return users to after they log out."
                },
                "sharedSecret": {
                  "type": "string",
                  "description": "Used in the token generation script."
                },
                "loginUrlSaml": {
                  "type": "string",
                  "description": "This is the URL that nonsense will invoke to attempt remote authentication via SAML."
                },
                "logoutUrlSaml": {
                  "type": "string",
                  "description": "This is the URL that nonsense will return users to after they log out via SAML."
                },
                "idPCert": {
                  "type": "string",
                  "description": "This is the certificate of identity provider."
                },
                "lowSecurityJwtSso": {
                  "type": "boolean",
                  "description": "Allow lower level security by disabling JTI enforcement.",
                  "default": false
                },
                "syncGroupsFromSamlToken": {
                  "type": "boolean",
                  "description": "Update the users' groups, based on the SAML attribute memberOf.",
                  "default": false
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Name not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "setSsoSettings",
        "summary": "Set sso settings.",
        "description": "The **sso settings** used for single sign on configuration.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "SSO configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "sso"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "If SSO is enabled."
                },
                "ssoType": {
                  "type": "string",
                  "description": "Type of SSO.",
                  "default": "jwt"
                },
                "loginUrl": {
                  "type": "string",
                  "description": "This is the URL that nonsense will invoke to attempt remote authentication."
                },
                "logoutUrl": {
                  "type": "string",
                  "description": "This is the URL that nonsense will return users to after they log out."
                },
                "sharedSecret": {
                  "type": "string",
                  "description": "Used in the token generation script."
                },
                "loginUrlSaml": {
                  "type": "string",
                  "description": "This is the URL that nonsense will invoke to attempt remote authentication via SAML."
                },
                "logoutUrlSaml": {
                  "type": "string",
                  "description": "This is the URL that nonsense will return users to after they log out via SAML."
                },
                "idPCert": {
                  "type": "string",
                  "description": "This is the certificate of identity provider."
                },
                "lowSecurityJwtSso": {
                  "type": "boolean",
                  "description": "Allow lower level security by disabling JTI enforcement.",
                  "default": false
                },
                "syncGroupsFromSamlToken": {
                  "type": "boolean",
                  "description": "Update the users' groups, based on the SAML attribute memberOf.",
                  "default": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the sso settings.",
            "name": "sso",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "sso"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "If SSO is enabled."
                },
                "ssoType": {
                  "type": "string",
                  "description": "Type of SSO.",
                  "default": "jwt"
                },
                "loginUrl": {
                  "type": "string",
                  "description": "This is the URL that nonsense will invoke to attempt remote authentication."
                },
                "logoutUrl": {
                  "type": "string",
                  "description": "This is the URL that nonsense will return users to after they log out."
                },
                "sharedSecret": {
                  "type": "string",
                  "description": "Used in the token generation script."
                },
                "loginUrlSaml": {
                  "type": "string",
                  "description": "This is the URL that nonsense will invoke to attempt remote authentication via SAML."
                },
                "logoutUrlSaml": {
                  "type": "string",
                  "description": "This is the URL that nonsense will return users to after they log out via SAML."
                },
                "idPCert": {
                  "type": "string",
                  "description": "This is the certificate of identity provider."
                },
                "lowSecurityJwtSso": {
                  "type": "boolean",
                  "description": "Allow lower level security by disabling JTI enforcement.",
                  "default": false
                },
                "syncGroupsFromSamlToken": {
                  "type": "boolean",
                  "description": "Update the users' groups, based on the SAML attribute memberOf.",
                  "default": false
                }
              }
            }
          }
        ]
      }
    },
    "/settings/system": {
      "x-swagger-router-controller": "settings.system.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "getSystemSettings",
        "summary": "Returns system configuration settings.",
        "description": "The **system settings** used for system settings configuration.\n",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "System configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "alias": {
                  "type": "string",
                  "description": "Web server public address."
                },
                "firstday": {
                  "type": "string",
                  "description": "First day of the week for date related ElastiCube queries."
                },
                "fiscal": {
                  "type": "object",
                  "description": "Fiscal Year.",
                  "properties": {
                    "month": {
                      "type": "string",
                      "enum": [ "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" ]
                    }
                  }
                },
                "isAdminAccessAllDashboards": {
                  "type": "boolean",
                  "description": "Allow admin access for all dashboards"
                },
                "email": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "If mails are enabled."
                    },
                    "senderEmail": {
                      "type": "string",
                      "description": "Email of sender."
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Name of sender."
                    }
                  }
                },
                "webServer": {
                  "type": "object",
                  "properties": {
                    "enableSSl": {
                      "type": "boolean",
                      "description": "If SSL is enabled."
                    },
                    "cors": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "If cors settings is enabled."
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "System settings are empty",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Name not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "setSystemSettings",
        "summary": "Adds or updates system settings.",
        "x-permission-type": "general",
        "x-permission-path": "manage/systemconfig",
        "description": "The **system settings** used for system settings configuration.\n",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "System configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "alias": {
                  "type": "string",
                  "description": "Web server public address."
                },
                "firstday": {
                  "type": "string",
                  "description": "First day of the week for date related ElastiCube queries."
                },
                "fiscal": {
                  "type": "object",
                  "description": "Fiscal Year.",
                  "properties": {
                    "month": {
                      "type": "string",
                      "enum": [ "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" ]
                    }
                  }
                },
                "isAdminAccessAllDashboards": {
                  "type": "boolean",
                  "description": "Allow admin access for all dashboards"
                },
                "email": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "If mails are enabled."
                    },
                    "senderEmail": {
                      "type": "string",
                      "description": "Email of sender."
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Name of sender."
                    }
                  }
                },
                "webServer": {
                  "type": "object",
                  "properties": {
                    "enableSSl": {
                      "type": "boolean",
                      "description": "If SSL is enabled."
                    },
                    "cors": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "If cors settings is enabled."
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the system settings.",
            "name": "emailServer",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "alias": {
                  "type": "string",
                  "description": "Web server public address."
                },
                "firstday": {
                  "type": "string",
                  "description": "First day of the week for date related ElastiCube queries."
                },
                "fiscal": {
                  "type": "object",
                  "description": "Fiscal Year.",
                  "properties": {
                    "month": {
                      "type": "string",
                      "enum": [ "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" ]
                    }
                  }
                },
                "isAdminAccessAllDashboards": {
                  "type": "boolean",
                  "description": "Allow admin access for all dashboards"
                },
                "email": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "If mails are enabled."
                    },
                    "senderEmail": {
                      "type": "string",
                      "description": "Email of sender."
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Name of sender."
                    }
                  }
                },
                "webServer": {
                  "type": "object",
                  "properties": {
                    "enableSSl": {
                      "type": "boolean",
                      "description": "If SSL is enabled."
                    },
                    "cors": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "If cors settings is enabled."
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/settings/globalization": {
      "x-swagger-router-controller": "settings.globalization.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "getGlobalization",
        "summary": "Returns globalization settings",
        "description": "Returns locale settings, including the set locale, and whether autodetect is enabled.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Globalization settings.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "globalization"
                },
                "language": {
                  "type": "string",
                  "description": "Default language for localization."
                },
                "localization": {
                  "type": "object",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default locale for localization."
                    },
                    "autoDetectEnabled": {
                      "type": "boolean",
                      "description": "If language autodetect is enabled."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not configured yet",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      },
      "post": {
        "operationId": "add",
        "summary": "Add globalization settings",
        "description": "You can change the locale or select whether the localization selection is automatically detected or not.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Globalization settings.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "globalization"
                },
                "language": {
                  "type": "string",
                  "description": "Default language for localization."
                },
                "localization": {
                  "type": "object",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default locale for localization."
                    },
                    "autoDetectEnabled": {
                      "type": "boolean",
                      "description": "If language autodetect is enabled."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the globalization settings.",
            "name": "globalization",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "globalization"
                },
                "language": {
                  "type": "string",
                  "description": "Default language for localization."
                },
                "localization": {
                  "type": "object",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default locale for localization."
                    },
                    "autoDetectEnabled": {
                      "type": "boolean",
                      "description": "If language autodetect is enabled."
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "put": {
        "operationId": "update",
        "summary": "Update globalization settings",
        "description": "You can update the locale or select whether the localization selection is automatically detected or not.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Globalization settings.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "globalization"
                },
                "language": {
                  "type": "string",
                  "description": "Default language for localization."
                },
                "localization": {
                  "type": "object",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default locale for localization."
                    },
                    "autoDetectEnabled": {
                      "type": "boolean",
                      "description": "If language autodetect is enabled."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the globalization settings.",
            "name": "globalization",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "globalization"
                },
                "language": {
                  "type": "string",
                  "description": "Default language for localization."
                },
                "localization": {
                  "type": "object",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default locale for localization."
                    },
                    "autoDetectEnabled": {
                      "type": "boolean",
                      "description": "If language autodetect is enabled."
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "delete": {
        "operationId": "removeGlobalization",
        "summary": "Delete globalization settings",
        "description": "Deletes globalization settings in your server.",
        "tags": [ "settings" ],
        "responses": {
          "204": { "description": "Delete operation was successfull" },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not configured yet",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/settings/pulse": {
      "x-swagger-router-controller": "settings.pulse.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "getPulseSettings",
        "summary": "Returns pulse settings.",
        "description": "The **pulse settings** used for store pulse page configuration.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Pulse configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "pulse"
                },
                "script": {
                  "type": "string",
                  "description": "Pulse page extension script.",
                  "default": ""
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Name not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "setPulseSettings",
        "summary": "Set pulse settings.",
        "description": "The **pulse settings** used for store pulse page configuration.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Pulse configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "pulse"
                },
                "script": {
                  "type": "string",
                  "description": "Pulse page extension script.",
                  "default": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid input.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the pulse settings.",
            "name": "pulse",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "pulse"
                },
                "script": {
                  "type": "string",
                  "description": "Pulse page extension script.",
                  "default": ""
                }
              }
            }
          }
        ]
      },
      "patch": {
        "operationId": "patch",
        "summary": "Patch pulse settings.",
        "description": "The **pulse settings** used for store pulse page configuration.",
        "tags": [ "settings" ],
        "responses": {
          "200": {
            "description": "Pulse configuration settings.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "pulse"
                },
                "script": {
                  "type": "string",
                  "description": "Pulse page extension script.",
                  "default": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid input.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Object with the pulse settings.",
            "name": "pulse",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of config."
                },
                "name": {
                  "type": "string",
                  "description": "Name of configuration.",
                  "default": "pulse"
                },
                "script": {
                  "type": "string",
                  "description": "Pulse page extension script.",
                  "default": ""
                }
              }
            }
          }
        ]
      },
      "delete": {
        "operationId": "removePulseSettings",
        "summary": "Delete pulse settings.",
        "description": "The **pulse settings** used for store pulse page configuration.",
        "tags": [ "settings" ],
        "responses": {
          "204": { "description": "Delete operation was successfull." },
          "400": {
            "description": "Invalid input.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/translations/{lang}": {
      "x-swagger-router-controller": "translation.controller.v1",
      "x-permission-type": "none",
      "get": {
        "x-skip-auth": true,
        "operationId": "getLang",
        "summary": "Return a language file",
        "description": "The **get translations/lang** endpoint returns a language file.",
        "tags": [ "translations" ],
        "produces": [ "application/json" ],
        "responses": {
          "200": {
            "description": "lang file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Language not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of the language to be returned.",
            "name": "lang",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/translations": {
      "x-swagger-router-controller": "translation.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "getAllLangs",
        "summary": "Return all supported languages",
        "description": "The **get translations** endpoint returns a list of all your supported languages in nonsense.",
        "tags": [ "translations" ],
        "responses": {
          "200": {
            "description": "all lang file",
            "schema": { "type": "string" }
          },
          "404": {
            "description": "Language not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/live_connectors/{provider}/list_table_schemas": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "listTableSchemas",
        "summary": "Returns a list of tables in a database",
        "description": "The **list table schemas** endpoint returns a list of available tables in a specified database. Table schemas do not include column details.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "List of table schemas",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "catalog": { "type": "string" },
                  "schemaName": { "type": "string" },
                  "tableName": { "type": "string" },
                  "tableType": { "type": "string" },
                  "columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "columnName": { "type": "string" },
                        "columnOrder": { "type": "number" },
                        "dbType": { "type": "number" },
                        "size": { "type": "number" },
                        "precision": { "type": "number" },
                        "scale": { "type": "number" }
                      }
                    }
                  },
                  "relations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fkName": { "type": "string" },
                        "parentSchema": { "type": "string" },
                        "parentTable": { "type": "string" },
                        "parentColumns": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "childSchema": { "type": "string" },
                        "childTable": { "type": "string" },
                        "childColumns": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of the live connector's provider",
            "name": "provider",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connection" ],
              "properties": {
                "connection": {
                  "type": "object",
                  "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                },
                "schema": {
                  "type": "string",
                  "description": "Database schema"
                },
                "table": {
                  "type": "string",
                  "description": "Table name"
                },
                "limit": { "type": "number" },
                "fetchRelations": {
                  "type": "boolean",
                  "description": "Used in schema details api. Tells api to return table relations next to columns"
                },
                "sql": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/live_connectors": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "listAvailableConnectors",
        "summary": "Returns the list of available live connector services",
        "description": "The **get live connectors** endpoint returns a list of connectors.\n",
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "An array of live connectors",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "name": { "type": "string" }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/live_connectors/{provider}": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getConnectorManifest",
        "summary": "Returns object that describes the connection manifest (parameters)",
        "description": "The **get live connector** endpoint returns connector manifest that describes the parameters.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "Connector manifest",
            "schema": {
              "type": "object",
              "properties": {
                "Name": { "type": "string" },
                "titleCustomization": {
                  "type": "object",
                  "properties": {
                    "database": {
                      "type": "object",
                      "properties": {
                        "title": { "type": "string" },
                        "translationKey": { "type": "string" }
                      }
                    },
                    "table": {
                      "type": "object",
                      "properties": {
                        "title": { "type": "string" },
                        "translationKey": { "type": "string" }
                      }
                    }
                  }
                },
                "connection": {
                  "type": "object",
                  "properties": {
                    "oauth2": {
                      "type": "object",
                      "properties": {
                        "baseUrl": { "type": "string" },
                        "authorizationEndpoint": { "type": "string" },
                        "accessTokenEndpoint": { "type": "string" },
                        "clientId": { "type": "string" },
                        "clientSecret": { "type": "string" },
                        "scope": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "base": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "title": { "type": "string" },
                          "titleTranslationKey": { "type": "string" },
                          "type": { "type": "string" },
                          "icon": { "type": "string" },
                          "required": { "type": "boolean" },
                          "send": { "type": "boolean" },
                          "default": { "type": "string" },
                          "description": { "type": "string" },
                          "descriptionTranslationKey": { "type": "string" },
                          "pattern": { "type": "string" },
                          "trim": { "type": "boolean" },
                          "min": { "type": "number" },
                          "max": { "type": "number" },
                          "multivalue": { "type": "boolean" },
                          "options": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string" },
                                "value": { "type": "string" }
                              }
                            }
                          },
                          "availableIf": {
                            "type": "object",
                            "properties": {
                              "parameter": { "type": "string" },
                              "hasValue": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of live connector provider.",
            "name": "provider",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/live_connectors/{provider}/test_connection": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "testConnection",
        "summary": "Returns an object with status = OK after a successful connection",
        "description": "Opens a connection through a specified connector to the datasource.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "Connection status",
            "schema": {
              "type": "object",
              "properties": { "status": { "type": "string" } }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of the live connector's provider",
            "name": "provider",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connection" ],
              "properties": {
                "connection": {
                  "type": "object",
                  "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                },
                "schema": {
                  "type": "string",
                  "description": "Database schema"
                },
                "table": {
                  "type": "string",
                  "description": "Table name"
                },
                "limit": { "type": "number" },
                "fetchRelations": {
                  "type": "boolean",
                  "description": "Used in schema details api. Tells api to return table relations next to columns"
                },
                "sql": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/live_connectors/{provider}/list_databases": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "listDatabases",
        "summary": "Returns list of databases",
        "description": "The **list databases** endpoint returns a list of available databases in the connected instance.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "List of databases",
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of the live connector's provider",
            "name": "provider",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connection" ],
              "properties": {
                "connection": {
                  "type": "object",
                  "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                },
                "schema": {
                  "type": "string",
                  "description": "Database schema"
                },
                "table": {
                  "type": "string",
                  "description": "Table name"
                },
                "limit": { "type": "number" },
                "fetchRelations": {
                  "type": "boolean",
                  "description": "Used in schema details api. Tells api to return table relations next to columns"
                },
                "sql": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/live_connectors/{provider}/table_schema_details": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "getTableSchemaDetails",
        "summary": "Returns a table's schema",
        "description": "The **get table schema details** endpoint returns a detailed schema of the table with columns.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "Table schema",
            "schema": {
              "type": "object",
              "properties": {
                "catalog": { "type": "string" },
                "schemaName": { "type": "string" },
                "tableName": { "type": "string" },
                "tableType": { "type": "string" },
                "columns": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "columnName": { "type": "string" },
                      "columnOrder": { "type": "number" },
                      "dbType": { "type": "number" },
                      "size": { "type": "number" },
                      "precision": { "type": "number" },
                      "scale": { "type": "number" }
                    }
                  }
                },
                "relations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fkName": { "type": "string" },
                      "parentSchema": { "type": "string" },
                      "parentTable": { "type": "string" },
                      "parentColumns": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "childSchema": { "type": "string" },
                      "childTable": { "type": "string" },
                      "childColumns": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of the live connector's provider",
            "name": "provider",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connection" ],
              "properties": {
                "connection": {
                  "type": "object",
                  "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                },
                "schema": {
                  "type": "string",
                  "description": "Database schema"
                },
                "table": {
                  "type": "string",
                  "description": "Table name"
                },
                "limit": { "type": "number" },
                "fetchRelations": {
                  "type": "boolean",
                  "description": "Used in schema details api. Tells api to return table relations next to columns"
                },
                "sql": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/live_connectors/{provider}/table_preview": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "getTablePreview",
        "summary": "Returns data preview",
        "description": "The **get table preview** endpoint returns a preview of the data in specified table.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "Data preview",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "values": {
                    "type": "array",
                    "items": { "type": "number" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of the live connector's provider",
            "name": "provider",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connection" ],
              "properties": {
                "connection": {
                  "type": "object",
                  "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                },
                "schema": {
                  "type": "string",
                  "description": "Database schema"
                },
                "table": {
                  "type": "string",
                  "description": "Table name"
                },
                "limit": { "type": "number" },
                "fetchRelations": {
                  "type": "boolean",
                  "description": "Used in schema details api. Tells api to return table relations next to columns"
                },
                "sql": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/live_connectors/{provider}/count": {
      "x-swagger-router-controller": "live-connectors.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "countTableEntries",
        "summary": "Returns count of entries in table",
        "description": "The **get table count** endpoint returns the number of entries in a specified table.\n",
        "produces": [ "application/json" ],
        "tags": [ "live-connectors" ],
        "responses": {
          "200": {
            "description": "Amount of entries in table",
            "schema": {
              "type": "object",
              "properties": { "count": { "type": "string" } }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of live connector provider.",
            "name": "provider",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connection" ],
              "properties": {
                "connection": {
                  "type": "object",
                  "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                },
                "schema": {
                  "type": "string",
                  "description": "Database schema"
                },
                "table": {
                  "type": "string",
                  "description": "Table name"
                },
                "limit": { "type": "number" },
                "fetchRelations": {
                  "type": "boolean",
                  "description": "Used in schema details api. Tells api to return table relations next to columns"
                },
                "sql": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/oauth/{service}/auth": {
      "x-swagger-router-controller": "oauth.controller.v1",
      "post": {
        "x-permission-type": "admins-only",
        "operationId": "authService",
        "summary": "Returns tokens needed for oauth",
        "description": "The **authorize** endpoint returns tokens for specific client code.\n",
        "produces": [ "application/json" ],
        "tags": [ "oauth" ],
        "responses": {
          "200": {
            "description": "Tokens",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of service",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "contains code and redirectUri parameters.",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "code": { "type": "string" },
                "redirectUri": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/oauth/{service}/login_uri": {
      "x-swagger-router-controller": "oauth.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "getLoginUri",
        "summary": "Returns basic redirect url for OAuth login endpoint",
        "description": "The **get login uri** endpoint returns uri for service login without redirect_uri param. It should be generated at client side.\n",
        "produces": [ "application/json" ],
        "tags": [ "oauth" ],
        "responses": {
          "200": {
            "description": "url",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of service",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/datasets/{id}": {
      "x-swagger-router-controller": "datasets.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getDataset",
        "summary": "Returns a dataset by ID",
        "description": "The **get dataset** endpoint returns a dataset object by ID.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "Dataset object",
            "schema": {
              "type": "object",
              "required": [ "_id", "shares", "owner", "name", "fullname", "type", "connection", "schema" ],
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "permission", "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "permission": {
                        "type": "string",
                        "enum": [ "r", "w" ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      }
                    }
                  }
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "elasticube": { "type": "string" },
                "name": { "type": "string" },
                "fullname": { "type": "string" },
                "type": {
                  "type": "string",
                  "enum": [ "live", "extract" ]
                },
                "connection": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "modeling-transformations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "join" ]
                      },
                      "arguments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "table": { "type": "string" },
                            "column": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" },
                          "columns": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "type": { "type": "number" },
                                "size": { "type": "number" },
                                "scale": { "type": "number" },
                                "precision": { "type": "number" }
                              }
                            }
                          },
                          "tuple-transformations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                },
                                "arguments": {
                                  "type": "object",
                                  "properties": { "column": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schedule": {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dataset.",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "data-admins-only",
        "operationId": "updateDataset",
        "summary": "Updates a specific dataset",
        "description": "The **update dataset** endpoint updates a dataset with new data.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": { "description": "Updated dataset" },
          "400": { "description": "Bad request error.\n- **23001** Permission error\n- **23003** Connection not found\n- **23004** Name duplication error\n" },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dataset.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The dataset object that defines a dataset",
            "name": "dataset",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "permission", "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "permission": {
                        "type": "string",
                        "enum": [ "r", "w" ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      }
                    }
                  }
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "elasticube": { "type": "string" },
                "name": { "type": "string" },
                "fullname": { "type": "string" },
                "type": {
                  "type": "string",
                  "enum": [ "live", "extract" ]
                },
                "connection": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "modeling-transformations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "join" ]
                      },
                      "arguments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "table": { "type": "string" },
                            "column": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" },
                          "columns": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "type": { "type": "number" },
                                "size": { "type": "number" },
                                "scale": { "type": "number" },
                                "precision": { "type": "number" }
                              }
                            }
                          },
                          "tuple-transformations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                },
                                "arguments": {
                                  "type": "object",
                                  "properties": { "column": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schedule": {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "data-admins-only",
        "operationId": "removeDataset",
        "summary": "Removes a dataset",
        "description": "The **remove dataset** endpoint removes a dataset by ID.\n",
        "tags": [ "datasets" ],
        "responses": {
          "204": { "description": "Dataset were removed succesfully" },
          "400": { "description": "Bad request error.\n- **23001** Permission error\n" },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dataset.",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/datasets/by_fullname/{fullname}": {
      "x-swagger-router-controller": "datasets.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getByFullName",
        "summary": "Returns a dataset by its fullname",
        "description": "The **get dataset by fullname** endpoint returns a dataset object by its fullname property.\n<br/><br/>The expandable field for the dataset object is `connection`. The expanded connection does not have parameters property.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "Dataset object",
            "schema": {
              "type": "object",
              "required": [ "_id", "shares", "owner", "name", "fullname", "type", "connection", "schema" ],
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "permission", "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "permission": {
                        "type": "string",
                        "enum": [ "r", "w" ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      }
                    }
                  }
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "elasticube": { "type": "string" },
                "name": { "type": "string" },
                "fullname": { "type": "string" },
                "type": {
                  "type": "string",
                  "enum": [ "live", "extract" ]
                },
                "connection": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "modeling-transformations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "join" ]
                      },
                      "arguments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "table": { "type": "string" },
                            "column": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" },
                          "columns": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "type": { "type": "number" },
                                "size": { "type": "number" },
                                "scale": { "type": "number" },
                                "precision": { "type": "number" }
                              }
                            }
                          },
                          "tuple-transformations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                },
                                "arguments": {
                                  "type": "object",
                                  "properties": { "column": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schedule": {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "description": "The dataset's fullname",
            "name": "fullname",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/datasets/{id}/transformed": {
      "x-swagger-router-controller": "datasets.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getWithAppliedTransformations",
        "summary": "Returns a modified dataset by ID",
        "description": "The **get dataset** endpoint returns a dataset object with an applied schema transformations by ID.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "Dataset object",
            "schema": {
              "type": "object",
              "required": [ "_id", "shares", "owner", "name", "fullname", "type", "connection", "schema" ],
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "permission", "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "permission": {
                        "type": "string",
                        "enum": [ "r", "w" ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      }
                    }
                  }
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "elasticube": { "type": "string" },
                "name": { "type": "string" },
                "fullname": { "type": "string" },
                "type": {
                  "type": "string",
                  "enum": [ "live", "extract" ]
                },
                "connection": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "modeling-transformations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "join" ]
                      },
                      "arguments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "table": { "type": "string" },
                            "column": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" },
                          "columns": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "type": { "type": "number" },
                                "size": { "type": "number" },
                                "scale": { "type": "number" },
                                "precision": { "type": "number" }
                              }
                            }
                          },
                          "tuple-transformations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                },
                                "arguments": {
                                  "type": "object",
                                  "properties": { "column": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schedule": {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dataset.",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/datasets": {
      "x-swagger-router-controller": "datasets.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getAllDatasets",
        "summary": "Returns a list of datasets",
        "description": "The **get datasets** endpoint provides access to datasets in their stored format as `JSON` objects.\n<br/><br/>The expandable field for the data object is `connection`.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "An array of datasets",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "_id", "shares", "owner", "name", "fullname", "type", "connection", "schema" ],
                "properties": {
                  "_id": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "shares": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [ "partyId", "permission", "type" ],
                      "properties": {
                        "partyId": {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$"
                        },
                        "permission": {
                          "type": "string",
                          "enum": [ "r", "w" ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [ "user", "group" ]
                        }
                      }
                    }
                  },
                  "owner": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "elasticube": { "type": "string" },
                  "name": { "type": "string" },
                  "fullname": { "type": "string" },
                  "type": {
                    "type": "string",
                    "enum": [ "live", "extract" ]
                  },
                  "connection": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "modeling-transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "join" ]
                        },
                        "arguments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "table": { "type": "string" },
                              "column": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  },
                  "schema": {
                    "type": "object",
                    "properties": {
                      "tables": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "columns": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "type": { "type": "number" },
                                  "size": { "type": "number" },
                                  "scale": { "type": "number" },
                                  "precision": { "type": "number" }
                                }
                              }
                            },
                            "tuple-transformations": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                  },
                                  "arguments": {
                                    "type": "object",
                                    "properties": { "column": { "type": "string" } }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "schedule": {
                    "type": "object",
                    "properties": { "type": { "type": "string" } }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters dataset by type",
            "required": false,
            "type": "string",
            "enum": [ "live", "extract", "custom" ]
          }
        ]
      },
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "createDataset",
        "summary": "Creates a new dataset",
        "description": "The **create dataset** endpoint creates a new dataset object.\n",
        "tags": [ "datasets" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "required": [ "_id", "shares", "owner", "name", "fullname", "type", "connection", "schema" ],
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "permission", "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "permission": {
                        "type": "string",
                        "enum": [ "r", "w" ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      }
                    }
                  }
                },
                "owner": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "elasticube": { "type": "string" },
                "name": { "type": "string" },
                "fullname": { "type": "string" },
                "type": {
                  "type": "string",
                  "enum": [ "live", "extract" ]
                },
                "connection": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "modeling-transformations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "join" ]
                      },
                      "arguments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "table": { "type": "string" },
                            "column": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" },
                          "columns": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "type": { "type": "number" },
                                "size": { "type": "number" },
                                "scale": { "type": "number" },
                                "precision": { "type": "number" }
                              }
                            }
                          },
                          "tuple-transformations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                },
                                "arguments": {
                                  "type": "object",
                                  "properties": { "column": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schedule": {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                }
              }
            }
          },
          "400": { "description": "Bad request error.\n- **23004** Name duplication error\n- **23003** Connection not found\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "The dataset object that defines a dataset",
            "name": "dataset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "name", "type", "schema", "connection" ],
              "properties": {
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "permission", "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "permission": {
                        "type": "string",
                        "enum": [ "r", "w" ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group" ]
                      }
                    }
                  }
                },
                "elasticube": { "type": "string" },
                "name": { "type": "string" },
                "type": {
                  "type": "string",
                  "enum": [ "live", "extract" ]
                },
                "connection": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "modeling-transformations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [ "join" ]
                      },
                      "arguments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "table": { "type": "string" },
                            "column": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" },
                          "columns": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" },
                                "type": { "type": "number" },
                                "size": { "type": "number" },
                                "scale": { "type": "number" },
                                "precision": { "type": "number" }
                              }
                            }
                          },
                          "tuple-transformations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                                },
                                "arguments": {
                                  "type": "object",
                                  "properties": { "column": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schedule": {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                }
              }
            }
          }
        ]
      }
    },
    "/datasets/{id}/permissions": {
      "x-swagger-router-controller": "datasets.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getPermissions",
        "summary": "Returns the dataset permissions by its ID",
        "description": "The **get dataset permissions** endpoint returns the permissions for a dataset.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "dataset permissions",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "partyId", "permission", "type" ],
                "properties": {
                  "partyId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "permission": {
                    "type": "string",
                    "enum": [ "r", "w" ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [ "user", "group" ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dataset.",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      },
      "patch": {
        "x-permission-type": "data-admins-only",
        "operationId": "setPermissions",
        "summary": "Updates a datasets's permissions",
        "description": "The **update dataset** endpoint updates the dataset with the fetched permissions.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "Updated permissions",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "partyId", "permission", "type" ],
                "properties": {
                  "partyId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "permission": {
                    "type": "string",
                    "enum": [ "r", "w" ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [ "user", "group" ]
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request error.\n- **23001** Permission error\n- **23005** User not found\n- **23006** Group not found\n" },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the dataset.",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "The dataset's permissions",
            "name": "permissions",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/permission" }
            }
          }
        ]
      }
    },
    "/datasets/addDatasetShares": {
      "x-swagger-router-controller": "datasets.controller.v1",
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "addDatasetShares",
        "summary": "Adding members to dataset shares array",
        "description": "The **adding members to Dataset Model** endpoint returns an object of Dataset Models.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": { "description": "- ElastiCube Model.\n" },
          "403": {
            "description": "- **403** Forbidden\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "- An object with dataset fullname, shares array info\n",
            "name": "server",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "dataset", "shares" ],
              "properties": {
                "dataset": { "type": "string" },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "partyId", "type" ],
                    "properties": {
                      "partyId": { "type": "string" },
                      "type": { "type": "string" },
                      "email": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/datasets/{fullname}/datasecurity": {
      "x-swagger-router-controller": "datacontext.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getDataContextForDataSet",
        "summary": "Returns the data security rules set up for a dataset",
        "description": "The **get data security** endpoint returns the data security rules set up for a dataset.\n",
        "tags": [ "datasets" ],
        "responses": {
          "200": {
            "description": "Data Security rules for dataset",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "_id", "dataSourceId", "allMembers", "members", "shares", "datatype", "table", "column", "live", "fullname" ],
                "properties": {
                  "_id": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "dataSourceId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "allMembers": { "type": "boolean" },
                  "members": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "shares": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [ "type" ],
                      "properties": {
                        "partyId": {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$"
                        },
                        "type": {
                          "type": "string",
                          "enum": [ "user", "group", "default" ]
                        }
                      }
                    }
                  },
                  "datatype": {
                    "type": "string",
                    "enum": [ "text", "numeric" ]
                  },
                  "table": { "type": "string" },
                  "column": { "type": "string" },
                  "live": { "type": "boolean" },
                  "fullname": { "type": "string" }
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The dataset's fullname",
            "name": "fullname",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "addDataContextForDataSet",
        "summary": "Defines data security rules for a dataset",
        "description": "The **create data context** endpoint creates new data context object\n",
        "tags": [ "datasets" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "required": [ "_id", "dataSourceId", "allMembers", "members", "shares", "datatype", "table", "column", "live", "fullname" ],
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "dataSourceId": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "allMembers": { "type": "boolean" },
                "members": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group", "default" ]
                      }
                    }
                  }
                },
                "datatype": {
                  "type": "string",
                  "enum": [ "text", "numeric" ]
                },
                "table": { "type": "string" },
                "column": { "type": "string" },
                "live": { "type": "boolean" },
                "fullname": { "type": "string" }
              }
            }
          },
          "400": { "description": "Bad request error.\n- **30001** Invalid default rule\n- **30003** Duplicate user or group\n- **30004** User or group not found\n" },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The dataset's fullname",
            "name": "fullname",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The data context object that defines a dataset's permissions",
            "name": "dataContext",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "allMembers", "members", "shares", "datatype", "table", "column", "live", "fullname" ],
              "properties": {
                "allMembers": { "type": "boolean" },
                "members": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "shares": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [ "type" ],
                    "properties": {
                      "partyId": {
                        "type": "string",
                        "pattern": "^[0-9a-fA-F]{24}$"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "user", "group", "default" ]
                      }
                    }
                  }
                },
                "datatype": {
                  "type": "string",
                  "enum": [ "text", "numeric" ]
                },
                "table": { "type": "string" },
                "column": { "type": "string" },
                "live": { "type": "boolean" },
                "fullname": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/datasets/{fullname}/datasecurity/{table}/{column}": {
      "x-swagger-router-controller": "datacontext.controller.v1",
      "delete": {
        "x-permission-type": "admins-only",
        "operationId": "removeDataContextColumn",
        "summary": "Removes the data context column of a dataset",
        "description": "The **remove data context** endpoint removes the specified data context column according to received parameters.\n",
        "tags": [ "datasets" ],
        "responses": {
          "204": { "description": "Data Context column was removed succesfully" },
          "404": {
            "description": "Dataset not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The dataset's fullname.",
            "name": "fullname",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The table name for the relevant data context object",
            "name": "table",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The column name for the relevant data context object",
            "name": "column",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/datasets/datasecurity/{dataSecurityId}": {
      "x-swagger-router-controller": "datacontext.controller.v1",
      "delete": {
        "x-permission-type": "admins-only",
        "operationId": "removeDataContextById",
        "summary": "Removes a data context by ID",
        "description": "The **remove data context** endpoint removes the specified data context by its ID.\n",
        "tags": [ "datasets" ],
        "responses": {
          "204": { "description": "Data Context was removed succesfully" },
          "400": { "description": "Bad request error.\n- **30006** Cannot delete default rule before other rules\n" },
          "404": {
            "description": "Data Context not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the data context object to be removed",
            "name": "dataSecurityId",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        ]
      }
    },
    "/connection/{id}": {
      "x-swagger-router-controller": "connections.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getConnection",
        "summary": "Returns a connection by its ID",
        "description": "The **get connection by ID** endpoint returns a connection object by ID.\n",
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "Connection object",
            "schema": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "owner": { "type": "string" },
                "provider": { "type": "string" },
                "timeout": { "type": "number" },
                "refreshRate": { "type": "number" },
                "timezone": { "type": "string" },
                "schema": { "type": "string" },
                "parameters": { "type": "object" }
              }
            }
          },
          "404": {
            "description": "Connection not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "data-admins-only",
        "operationId": "updateConnection",
        "summary": "Updates a connection",
        "description": "The **update connection** endpoint updates a connection with new data.\n",
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "Updated connection",
            "schema": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "owner": { "type": "string" },
                "provider": { "type": "string" },
                "timeout": { "type": "number" },
                "refreshRate": { "type": "number" },
                "timezone": { "type": "string" },
                "schema": { "type": "string" },
                "parameters": { "type": "object" }
              }
            }
          },
          "404": { "description": "Connection wasn't found" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Connection object",
            "name": "connection",
            "required": true,
            "schema": { "type": "object" }
          }
        ]
      },
      "delete": {
        "x-permission-type": "data-admins-only",
        "operationId": "removeConnection",
        "summary": "Removes a connection",
        "description": "The **delete connection** endpoint removes a connection by ID.\n",
        "tags": [ "connections" ],
        "responses": {
          "204": { "description": "Connection were removed succesfully" },
          "404": { "description": "Connection wasn't found" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/connection": {
      "x-swagger-router-controller": "connections.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "listConnections",
        "summary": "Returns a list of connections",
        "description": "The **get connection** endpoint returns a list of configured connections.\n",
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "List of connection objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "owner": { "type": "string" },
                  "provider": { "type": "string" },
                  "timeout": { "type": "number" },
                  "refreshRate": { "type": "number" },
                  "timezone": { "type": "string" },
                  "schema": { "type": "string" },
                  "parameters": { "type": "object" }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          }
        ]
      },
      "post": {
        "x-permission-type": "data-admins-only",
        "operationId": "createConnection",
        "summary": "creates a new connection",
        "description": "The **create connection** endpoint creates a new connection object.\n",
        "tags": [ "connections" ],
        "responses": {
          "201": {
            "description": "Created connection object",
            "schema": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "owner": { "type": "string" },
                "provider": { "type": "string" },
                "timeout": { "type": "number" },
                "refreshRate": { "type": "number" },
                "timezone": { "type": "string" },
                "schema": { "type": "string" },
                "parameters": { "type": "object" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "The new connection object.",
            "name": "connection",
            "required": true,
            "schema": { "type": "object" }
          }
        ]
      }
    },
    "/connection/recent": {
      "x-swagger-router-controller": "connections.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getRecentlyUsedConnections",
        "summary": "Returns recently used connection objects",
        "description": "The **list connections** endpoint returns list of recently used connections.\n",
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "List of connection objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "owner": { "type": "string" },
                  "provider": { "type": "string" },
                  "timeout": { "type": "number" },
                  "refreshRate": { "type": "number" },
                  "timezone": { "type": "string" },
                  "schema": { "type": "string" },
                  "parameters": { "type": "object" },
                  "duplicates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "_id": { "type": "string" },
                        "timeout": { "type": "number" },
                        "refreshRate": { "type": "number" },
                        "timezone": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "description": "Flag that tells if duplicates parameter should be returned in response",
            "name": "exposeDuplicates",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/connection/{id}/test_connection": {
      "x-swagger-router-controller": "connections.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "data-admins-only",
        "operationId": "testConnectionWithoutPassword",
        "summary": "Returns an object with status = OK after a successful connection",
        "description": "Opens a connection through a specified connector to the datasource.\n",
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "Connection status",
            "schema": {
              "type": "object",
              "properties": { "status": { "type": "string" } }
            }
          },
          "404": {
            "description": "Connection not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource with or without the password",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connectionData", "provider" ],
              "properties": {
                "connectionData": {
                  "type": "object",
                  "required": [ "connection" ],
                  "properties": {
                    "connection": {
                      "type": "object",
                      "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                    },
                    "schema": {
                      "type": "string",
                      "description": "Database schema"
                    },
                    "table": {
                      "type": "string",
                      "description": "Table name"
                    },
                    "limit": { "type": "number" },
                    "fetchRelations": {
                      "type": "boolean",
                      "description": "Used in schema details api. Tells api to return table relations next to columns"
                    },
                    "sql": { "type": "string" }
                  }
                },
                "provider": {
                  "type": "string",
                  "description": "new provider name"
                }
              }
            }
          }
        ]
      }
    },
    "/connection/{id}/list_databases": {
      "x-swagger-router-controller": "connections.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "data-admins-only",
        "operationId": "listDatabasesWithoutPassword",
        "summary": "Returns list of databases",
        "description": "The **list databases** endpoint returns a list of available databases in the connected instance.\n",
        "produces": [ "application/json" ],
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "List of databases",
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource with or without the password",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connectionData", "provider" ],
              "properties": {
                "connectionData": {
                  "type": "object",
                  "required": [ "connection" ],
                  "properties": {
                    "connection": {
                      "type": "object",
                      "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                    },
                    "schema": {
                      "type": "string",
                      "description": "Database schema"
                    },
                    "table": {
                      "type": "string",
                      "description": "Table name"
                    },
                    "limit": { "type": "number" },
                    "fetchRelations": {
                      "type": "boolean",
                      "description": "Used in schema details api. Tells api to return table relations next to columns"
                    },
                    "sql": { "type": "string" }
                  }
                },
                "provider": {
                  "type": "string",
                  "description": "new provider name"
                }
              }
            }
          }
        ]
      }
    },
    "/connection/{id}/list_table_schemas": {
      "x-swagger-router-controller": "connections.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "data-admins-only",
        "operationId": "listTableSchemasWithoutPassword",
        "summary": "Returns a list of tables in a database",
        "description": "The **list table schemas** endpoint returns a list of available tables in a specified database. Table schemas do not include column details.\n",
        "produces": [ "application/json" ],
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "List of table schemas",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "catalog": { "type": "string" },
                  "schemaName": { "type": "string" },
                  "tableName": { "type": "string" },
                  "tableType": { "type": "string" },
                  "columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "columnName": { "type": "string" },
                        "columnOrder": { "type": "number" },
                        "dbType": { "type": "number" },
                        "size": { "type": "number" },
                        "precision": { "type": "number" },
                        "scale": { "type": "number" }
                      }
                    }
                  },
                  "relations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fkName": { "type": "string" },
                        "parentSchema": { "type": "string" },
                        "parentTable": { "type": "string" },
                        "parentColumns": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "childSchema": { "type": "string" },
                        "childTable": { "type": "string" },
                        "childColumns": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource with or without the password",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connectionData", "provider" ],
              "properties": {
                "connectionData": {
                  "type": "object",
                  "required": [ "connection" ],
                  "properties": {
                    "connection": {
                      "type": "object",
                      "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                    },
                    "schema": {
                      "type": "string",
                      "description": "Database schema"
                    },
                    "table": {
                      "type": "string",
                      "description": "Table name"
                    },
                    "limit": { "type": "number" },
                    "fetchRelations": {
                      "type": "boolean",
                      "description": "Used in schema details api. Tells api to return table relations next to columns"
                    },
                    "sql": { "type": "string" }
                  }
                },
                "provider": {
                  "type": "string",
                  "description": "new provider name"
                }
              }
            }
          }
        ]
      }
    },
    "/connection/{id}/table_schema_details": {
      "x-swagger-router-controller": "connections.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "data-admins-only",
        "operationId": "getTableSchemaDetails",
        "summary": "Returns a list of tables in a database",
        "description": "The **get table schema details** endpoint returns a detailed schema of the table with columns.\n",
        "produces": [ "application/json" ],
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "Table schema",
            "schema": {
              "type": "object",
              "properties": {
                "catalog": { "type": "string" },
                "schemaName": { "type": "string" },
                "tableName": { "type": "string" },
                "tableType": { "type": "string" },
                "columns": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "columnName": { "type": "string" },
                      "columnOrder": { "type": "number" },
                      "dbType": { "type": "number" },
                      "size": { "type": "number" },
                      "precision": { "type": "number" },
                      "scale": { "type": "number" }
                    }
                  }
                },
                "relations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fkName": { "type": "string" },
                      "parentSchema": { "type": "string" },
                      "parentTable": { "type": "string" },
                      "parentColumns": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "childSchema": { "type": "string" },
                      "childTable": { "type": "string" },
                      "childColumns": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource with or without the password",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connectionData", "provider" ],
              "properties": {
                "connectionData": {
                  "type": "object",
                  "required": [ "connection" ],
                  "properties": {
                    "connection": {
                      "type": "object",
                      "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                    },
                    "schema": {
                      "type": "string",
                      "description": "Database schema"
                    },
                    "table": {
                      "type": "string",
                      "description": "Table name"
                    },
                    "limit": { "type": "number" },
                    "fetchRelations": {
                      "type": "boolean",
                      "description": "Used in schema details api. Tells api to return table relations next to columns"
                    },
                    "sql": { "type": "string" }
                  }
                },
                "provider": {
                  "type": "string",
                  "description": "new provider name"
                }
              }
            }
          }
        ]
      }
    },
    "/connection/{id}/table_preview": {
      "x-swagger-router-controller": "connections.controller.v1",
      "post": {
        "x-hide": true,
        "x-permission-type": "data-admins-only",
        "operationId": "getTablePreview",
        "summary": "Returns a list of tables in a database",
        "description": "The **get table preview** endpoint returns a preview of the data in specified table.\n",
        "produces": [ "application/json" ],
        "tags": [ "connections" ],
        "responses": {
          "200": {
            "description": "Data preview",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "values": {
                    "type": "array",
                    "items": { "type": "number" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Api not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the live connection. You can retrieve this ID through the get /connection endpoint.",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The connection parameters for a specific datasource with or without the password",
            "name": "connectionParameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "connectionData", "provider" ],
              "properties": {
                "connectionData": {
                  "type": "object",
                  "required": [ "connection" ],
                  "properties": {
                    "connection": {
                      "type": "object",
                      "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
                    },
                    "schema": {
                      "type": "string",
                      "description": "Database schema"
                    },
                    "table": {
                      "type": "string",
                      "description": "Table name"
                    },
                    "limit": { "type": "number" },
                    "fetchRelations": {
                      "type": "boolean",
                      "description": "Used in schema details api. Tells api to return table relations next to columns"
                    },
                    "sql": { "type": "string" }
                  }
                },
                "provider": {
                  "type": "string",
                  "description": "new provider name"
                }
              }
            }
          }
        ]
      }
    },
    "/ldap_domains": {
      "x-swagger-router-controller": "ldapDomains.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "getLdapDomains",
        "summary": "Get LDAP domains",
        "description": "The **get LDAP domains** endpoint returns a list of ldapDomains with their details.\n<br/>Results can be filtered by parameters such as name and enabled.\n<br/><br/>The expandable field for the LDAP domain object is `users`.\n",
        "tags": [ "ldap domains" ],
        "responses": {
          "200": {
            "description": "An array of LDAP domains",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "enabled": { "type": "boolean" },
                  "url": { "type": "string" },
                  "baseDN": { "type": "string" },
                  "username": { "type": "string" },
                  "name": { "type": "string" },
                  "syncUsn": { "type": "string" },
                  "syncActive": { "type": "boolean" },
                  "syncInterval": { "type": "integer" }
                }
              }
            }
          },
          "404": {
            "description": "Invalid expand parameter.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "name to filter the LDAP domains returned by",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Filter LDAP domains according to their status enabled or disabled",
            "name": "enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Array of LDAP domains IDs to get, separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "addLdapDomain",
        "summary": "Add a new LDAP Domain",
        "description": "The *add LDAP Domain* endpoint receives a new LDAP Domain object and creates that domain in nonsense, returning the created object.\n<br/>If a domain with the same name or baseDN exists, nonsense returns an error.\n",
        "tags": [ "ldap domains" ],
        "responses": {
          "201": {
            "description": "No response was specified",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "enabled": { "type": "boolean" },
                "url": { "type": "string" },
                "baseDN": { "type": "string" },
                "username": { "type": "string" },
                "name": { "type": "string" },
                "syncUsn": { "type": "string" },
                "syncActive": { "type": "boolean" },
                "syncInterval": { "type": "integer" }
              }
            }
          },
          "400": {
            "description": "- **2004** The user already exists.\n- **2006** Multiple super-users are not allowed.\n- **2007** Cannot add user because the license has been exceeded.\n- **2009** Mandatory fields cannot be empty.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "- **601** Invalid object ID.\n- **2003** Mandatory fields are missing.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic LDAP domain object (in `JSON` notation) to be added",
            "name": "ldapDomain",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": { "type": "boolean" },
                "url": {
                  "type": "string",
                  "pattern": "^ldap\\:\\/\\/.+"
                },
                "baseDN": { "type": "string" },
                "username": { "type": "string" },
                "password": { "type": "string" },
                "name": { "type": "string" },
                "syncActive": { "type": "boolean" },
                "syncInterval": { "type": "integer" }
              }
            }
          }
        ]
      }
    },
    "/ldap_domains/{id}": {
      "x-swagger-router-controller": "ldapDomains.controller.v1",
      "get": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "getLdapDomain",
        "summary": "Get a specific LDAP domain",
        "description": "The **get LDAP domain by ID** endpoint retrieves a specific LDAP domain object corresponding to the provided ID.<br/><br/>The expandable fields for the LDAP domain object is `users`.",
        "tags": [ "ldap domains" ],
        "responses": {
          "200": {
            "description": "LDAP domain",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "enabled": { "type": "boolean" },
                "url": { "type": "string" },
                "baseDN": { "type": "string" },
                "username": { "type": "string" },
                "name": { "type": "string" },
                "syncUsn": { "type": "string" },
                "syncActive": { "type": "boolean" },
                "syncInterval": { "type": "integer" }
              }
            }
          },
          "404": {
            "description": "- **202** Invalid expand parameter.\n- **22001** LDAP domain not found.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the LDAP domain to get",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "updateLdapDomain",
        "summary": "Update a LDAP Domain",
        "description": "The *update LDAP Domain* endpoint receives a domain id and what fields to update, returning the updated object.\n<br/>If a domain with the specified id is not exists, nonsense returns an error.\n",
        "tags": [ "ldap domains" ],
        "responses": {
          "200": {
            "description": "LDAP Domain",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "enabled": { "type": "boolean" },
                "url": { "type": "string" },
                "baseDN": { "type": "string" },
                "username": { "type": "string" },
                "name": { "type": "string" },
                "syncUsn": { "type": "string" },
                "syncActive": { "type": "boolean" },
                "syncInterval": { "type": "integer" }
              }
            }
          },
          "404": { "description": "- **2001** User not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the domain to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "body",
            "description": "Partial LDAP Domain object (in `JSON` notation) containing the fields to update",
            "name": "ldapDomain",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": { "type": "boolean" },
                "url": {
                  "type": "string",
                  "pattern": "^ldap\\:\\/\\/.+"
                },
                "baseDN": { "type": "string" },
                "username": { "type": "string" },
                "password": { "type": "string" },
                "name": { "type": "string" },
                "syncActive": { "type": "boolean" },
                "syncInterval": { "type": "integer" }
              }
            }
          }
        ]
      }
    },
    "/ldap_domains/bulk": {
      "x-swagger-router-controller": "ldapDomains.controller.v1",
      "delete": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "deleteLdapDomains",
        "summary": "Delete LDAP Domains",
        "description": "The *delete LDAP Domains* endpoint receives a list of domain IDs and deletes these domains in nonsense.\n<br/>If a domain with the specified id does not exists, nonsense returns an error.\n",
        "tags": [ "ldap domains" ],
        "responses": {
          "204": { "description": "No response was specified" },
          "404": { "description": "- **22001** One or more LDAP domains were not found.\n" }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Array of LDAP domain IDs to delete, separated by a comma (`,`) and without spaces",
            "name": "ids",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "items": { "type": "string" }
          }
        ]
      }
    },
    "/ldap_domains/test": {
      "x-swagger-router-controller": "ldapDomains.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "testLdapDomain",
        "summary": "Test LDAP domain",
        "description": "The *test LDAP Domain* endpoint receives an LDAP Domain object and tests it against the LDAP server.\n<br/>If the LDAP server is not responding / wrong cradentails were sent, nonsense will return an error.\n",
        "tags": [ "ldap domains" ],
        "responses": { "204": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Basic LDAP domain object (in `JSON` notation) to be tested",
            "name": "ldapDomain",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "url": {
                  "type": "string",
                  "pattern": "^ldap\\:\\/\\/.+"
                },
                "baseDN": { "type": "string" },
                "username": { "type": "string" },
                "password": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/ldap_domains/{id}/sync": {
      "x-swagger-router-controller": "ldapDomains.controller.v1",
      "post": {
        "x-permission-type": "general",
        "x-permission-path": "manage/activedirectory",
        "operationId": "syncLdapDomain",
        "summary": "Sync LDAP domain",
        "description": "The *sync LDAP Domain* endpoint receives an LDAP Domain ID and synchronize it against the LDAP server.\n<br/>If a the LDAP server is not responding, nonsense will return an error.\n",
        "tags": [ "ldap domains" ],
        "responses": { "204": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ID of the domain to update",
            "name": "id",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          {
            "in": "query",
            "description": "should wait",
            "name": "wait",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "description": "other parameters for the synchronization request",
            "name": "ldapDomainSync",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "force": {
                  "description": "indicates if to sync all the changes from the Active Directory server since it was created",
                  "type": "boolean",
                  "default": false
                },
                "gnames": {
                  "description": "groups to sync",
                  "type": "array",
                  "uniqueItems": true,
                  "default": [],
                  "items": { "type": "string" }
                },
                "unames": {
                  "description": "users to sync",
                  "type": "array",
                  "uniqueItems": true,
                  "default": [],
                  "items": { "type": "string" }
                }
              }
            }
          }
        ]
      }
    },
    "/analytics/token": {
      "x-swagger-router-controller": "analytics.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "getToken",
        "summary": "Get token for nonsense Analytics",
        "description": "Returns a token used to authenticate nonsense Analytics API calls.",
        "tags": [ "analytics" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ],
        "responses": {
          "200": {
            "description": "The token",
            "schema": {
              "type": "object",
              "required": [ "analytics_token" ],
              "properties": { "analytics_token": { "type": "string" } }
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/token/revoke": {
      "x-swagger-router-controller": "analytics.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "revokeToken",
        "summary": "Revoke token for nonsense Analytics",
        "description": "Revoke the token used to authenticate your nonsense Analytics API calls.",
        "tags": [ "analytics" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ],
        "responses": {
          "204": {
            "description": "No response was specified",
            "schema": { "type": "string" }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/collection/{collection}": {
      "x-swagger-router-controller": "analytics.controller.v1",
      "get": {
        "x-permission-type": "none",
        "operationId": "getCollection",
        "summary": "Get the entire collection based on the received parameter",
        "description": "Returns a collection of nonsense entities as defined in the collection parameter.  Entities include objects such as ElastiCubes, widgets,users, groups, or dashboards.",
        "tags": [ "analytics" ],
        "parameters": [
          {
            "in": "header",
            "description": "nonsense Analytics token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API)",
            "name": "authorization",
            "required": true,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "Collection name to be returned",
            "name": "collection",
            "required": true,
            "type": "string",
            "enum": [ "dashboards", "elasticubes", "groups", "roles", "trace", "users", "widgets" ]
          }
        ],
        "responses": {
          "200": {
            "description": "The collection in a format which fits the nonsense Analytics Connector",
            "schema": { "type": "string" }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid collection name",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasources/{datasource}/fields/search": {
      "x-swagger-router-controller": "datasources.controller.v1",
      "post": {
        "x-permission-type": "none",
        "operationId": "searchFields",
        "summary": "Search dimensions of datasource",
        "description": "The **search fields** endpoint returns list of dimensions that datasource contains. Currently only live datasources are supported\n",
        "tags": [ "datasources" ],
        "responses": {
          "200": {
            "description": "List of dimension objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "column": { "type": "string" },
                  "table": { "type": "string" },
                  "dimtype": { "type": "string" },
                  "indexed": { "type": "boolean" },
                  "merged": { "type": "boolean" },
                  "title": { "type": "string" },
                  "type": { "type": "string" }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.\n- **25001** Bad datasource parameter\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "datasource",
            "description": "full name of the datasource",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "term": { "type": "string" },
                "offset": {
                  "type": "integer",
                  "minimum": 0
                },
                "count": {
                  "type": "integer",
                  "minimum": 1
                },
                "ignoretypes": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/logs/timer": {
      "x-swagger-router-controller": "logs.renderDetails.controller.v1",
      "x-permission-type": "none",
      "post": {
        "operationId": "saveLogs",
        "summary": "Returns dashboard loading times",
        "description": "The **post timer** endpoint returns information regarding your dashboard’s loading times.",
        "tags": [ "logs" ],
        "responses": {
          "200": {
            "description": "save logs.",
            "schema": {
              "type": "object",
              "properties": {
                "dashboard": {
                  "type": "object",
                  "description": "Dashboard object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Dashboard title"
                    },
                    "oid": {
                      "type": "string",
                      "description": "Dashboard ID"
                    },
                    "logStartLoad": {
                      "type": "integer",
                      "description": "Time when dashboard started load (in milliseconds)"
                    },
                    "logEndLoad": {
                      "type": "integer",
                      "description": "Time when dashboard ended load (in milliseconds)"
                    },
                    "logStartRefresh": {
                      "type": "integer",
                      "description": "Time when dashboard started refresh (in milliseconds)"
                    },
                    "logEndRefresh": {
                      "type": "integer",
                      "description": "Time when dashboard ended refresh (in milliseconds)"
                    },
                    "widgets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "oid": {
                            "type": "string",
                            "description": "Widget ID"
                          },
                          "title": {
                            "type": "string",
                            "description": "Widget title"
                          },
                          "type": {
                            "type": "string",
                            "description": "Widget type"
                          },
                          "logStartLoad": {
                            "type": "integer",
                            "description": "Time when widget started load (in milliseconds)"
                          },
                          "logEndLoad": {
                            "type": "integer",
                            "description": "Time when widget ended load (in milliseconds)"
                          },
                          "logStartQuery": {
                            "type": "integer",
                            "description": "Time when widget started query(in milliseconds)"
                          },
                          "logEndQuery": {
                            "type": "integer",
                            "description": "Time when widget ended query (in milliseconds)"
                          },
                          "logStartRender": {
                            "type": "integer",
                            "description": "Time when widget started render(in milliseconds)"
                          },
                          "logEndRender": {
                            "type": "string",
                            "description": "Time when widget ended render (in milliseconds)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/custom_data": {
      "x-swagger-router-controller": "customData.controller.v1",
      "post": {
        "x-permission-type": "none",
        "x-hide": false,
        "operationId": "addDocument",
        "summary": "Add a new custom data",
        "description": "The post custom data endpoints creates and stores a custom data object in the nonsense MongoDB that you can leverage when developing nonsense plug-ins.",
        "tags": [ "custom data" ],
        "responses": {
          "201": {
            "description": "Inserted document",
            "schema": { "type": "object" }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Custom data object to be added.",
            "name": "customDataObject",
            "required": true,
            "schema": { "type": "object" }
          }
        ]
      },
      "get": {
        "x-permission-type": "none",
        "x-hide": false,
        "operationId": "getAllDocuments",
        "summary": "Get all custom data",
        "description": "The get custom data endpoint returns a list of arrays that contain the content of all your custom data added to the nonsense MongoDB.",
        "tags": [ "custom data" ],
        "responses": {
          "200": {
            "description": "Array of all documents",
            "schema": {
              "type": "array",
              "items": { "type": "object" }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/custom_data/query": {
      "x-swagger-router-controller": "customData.controller.v1",
      "get": {
        "x-permission-type": "none",
        "x-hide": false,
        "operationId": "getDocuments",
        "summary": "Get documents based on query",
        "description": "The **get documents** endpoint returns all document that match the query.",
        "tags": [ "custom data" ],
        "responses": {
          "200": {
            "description": "Documents",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "Documents not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "The query to the MongoDB Collection",
            "name": "query",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "x-permission-type": "none",
        "x-hide": false,
        "operationId": "updateDocuments",
        "summary": "Update documents base on a query",
        "description": "The **update documents** endpoint updates (not rewrites) all documents that match query.",
        "tags": [ "custom data" ],
        "responses": {
          "200": {
            "description": "Number of updated documents",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "Documents not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "queryForSearch is a query object to find records that need to be updated. objectForUpdate is the replacement object",
            "name": "queryAndData",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "queryForSearch", "objectForUpdate" ],
              "properties": {
                "queryForSearch": { "type": "object" },
                "objectForUpdate": { "type": "object" }
              }
            }
          }
        ]
      },
      "delete": {
        "x-permission-type": "none",
        "x-hide": false,
        "operationId": "deleteDocuments",
        "summary": "Delete all documents that match the query",
        "description": "The **delete document** endpoint deletes documents that match the query.",
        "tags": [ "custom data" ],
        "responses": {
          "200": {
            "description": "Delete operation was successfull",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "Documents not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "Query to find and delete documents",
            "name": "query",
            "required": true,
            "schema": { "type": "object" }
          }
        ]
      }
    },
    "/narration/token": {
      "x-swagger-router-controller": "narration.controller.v1",
      "x-permission-type": "admins-only",
      "get": {
        "operationId": "getTokenNarration",
        "summary": "Return token from provider",
        "description": "The **token** API used for getting a new token from narration provider.\nUsing this token, you can access to narration provider server.\n",
        "tags": [ "narration" ],
        "responses": {
          "200": {
            "description": "new token",
            "schema": {
              "type": "object",
              "properties": {
                "narrationToken": {
                  "description": "narration provider token.",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No permission error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/narration/widget": {
      "x-swagger-router-controller": "narration.controller.v1",
      "x-permission-type": "none",
      "post": {
        "operationId": "generateWidgetNarration",
        "summary": "Define narrated text from provider",
        "description": "The **narration** used for describe chart in natural language from narration provider.\n",
        "tags": [ "narration" ],
        "responses": {
          "200": {
            "description": "narration text",
            "schema": {
              "type": "object",
              "properties": {
                "narration": {
                  "description": "narration text",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No permission error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "- **57007** Chart type not supported.\n- **57008** Data not supported for narration.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "- **300** Invalid request data.\n- **57003** Invalid JAQL request.\n- **57004** Can not handle JAQL response.\n- **57006** Narration error request.\n",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "subErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "error": {
                                "type": "object",
                                "properties": {
                                  "code": { "type": "integer" },
                                  "message": { "type": "string" },
                                  "status": { "type": "integer" },
                                  "httpMessage": { "type": "string" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "subErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "error": {
                                "type": "object",
                                "properties": {
                                  "code": { "type": "integer" },
                                  "message": { "type": "string" },
                                  "status": { "type": "integer" },
                                  "httpMessage": { "type": "string" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "name": "narration Parameters",
            "description": "The narration object that defines how a widget is narrated",
            "required": true,
            "schema": {
              "type": "object",
              "required": [ "jaqlRequest", "narration", "chartType" ],
              "properties": {
                "chartType": {
                  "description": "сhart type like \"chart/pie\" and etc.",
                  "type": "string"
                },
                "narration": {
                  "description": "narration configuration",
                  "type": "object",
                  "properties": {
                    "format": {
                      "description": "narration text format",
                      "type": "string",
                      "enum": [ "bullets", "paragraph" ]
                    },
                    "verbosity": {
                      "description": "narration text verbosity",
                      "type": "string",
                      "enum": [ "medium", "high", "low" ]
                    },
                    "up_sentiment": {
                      "description": "narration text sentiment",
                      "type": "string",
                      "enum": [ "good", "bad" ]
                    },
                    "aggregation": {
                      "description": "narration text aggregation",
                      "type": "string",
                      "enum": [ "sum", "average" ]
                    }
                  }
                },
                "jaqlRequest": {
                  "description": "JAQL query object",
                  "type": "object",
                  "required": [ "datasource", "metadata" ],
                  "properties": {
                    "datasource": { "type": "string" },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "jaql": {
                            "type": "object",
                            "properties": {
                              "dim": { "type": "string" },
                              "datatype": { "type": "string" },
                              "title": { "type": "string" }
                            }
                          },
                          "field": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "index": { "type": "integer" }
                            }
                          },
                          "format": { "type": "object" }
                        }
                      }
                    },
                    "format": {
                      "description": "data format",
                      "type": "string"
                    },
                    "isMaskedResult": {
                      "description": "masked result check",
                      "type": "boolean"
                    },
                    "count": {
                      "description": "narration text",
                      "type": "number"
                    },
                    "offset": {
                      "description": "offset",
                      "type": "number"
                    }
                  }
                },
                "widgetId": {
                  "description": "widget id",
                  "type": "string"
                },
                "dashboardId": {
                  "description": "dashboard id",
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/narration/analytics": {
      "x-swagger-router-controller": "narration.analytics.controller.v1",
      "get": {
        "x-hide": true,
        "operationId": "getConfig",
        "summary": "Return current analytics configuration",
        "description": "The **analytics** used for getting a configuration for narration analytics.\nThe story generation API supports declaring preferences around which additional analytics are performed and they rank in importance.\nWithout including any analytics configurations, we write a story with default analytics.\nCertain analytics that are performed by default may not be interesting or useful to certain users.\nThis feature allows users to choose which analytics are performed and the order the results will appear in the narrative.\n",
        "tags": [ "narration" ],
        "responses": {
          "200": {
            "description": "analytics configuration",
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "disable/enable analytics for narration",
                  "type": "boolean"
                },
                "clustering": {
                  "description": "attempts to find clusters of closely-related data points",
                  "type": "object"
                },
                "distribution": {
                  "description": "determines if the data collection follows a normal distribution",
                  "type": "object"
                },
                "correlation": {
                  "description": "performs regressions of the measure values across the discrete dimension and comments on the analysis",
                  "type": "object"
                },
                "trendline": {
                  "description": "trendlines consist of fitting the data for each measure to a line and determining whether or not that model fits the data",
                  "type": "object"
                },
                "segments": {
                  "description": "segments are noteworthy/interesting portions of a series with movements of a certain percent of change",
                  "type": "object"
                },
                "volatility": {
                  "description": "volatility is a measure of how erratic a series is, used to rank series to find the most or least volatile",
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "No permission error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "x-hide": true,
        "operationId": "postConfig",
        "summary": "set/modify custom narration analytics configuration",
        "description": "The **analytics** used for setting a configuration for narration analytics.\n",
        "tags": [ "narration" ],
        "responses": {
          "200": {
            "description": "current narration analytics configuration",
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "disable/enable analytics for narration",
                  "type": "boolean"
                },
                "clustering": {
                  "description": "attempts to find clusters of closely-related data points",
                  "type": "object"
                },
                "distribution": {
                  "description": "determines if the data collection follows a normal distribution",
                  "type": "object"
                },
                "correlation": {
                  "description": "performs regressions of the measure values across the discrete dimension and comments on the analysis",
                  "type": "object"
                },
                "trendline": {
                  "description": "trendlines consist of fitting the data for each measure to a line and determining whether or not that model fits the data",
                  "type": "object"
                },
                "segments": {
                  "description": "segments are noteworthy/interesting portions of a series with movements of a certain percent of change",
                  "type": "object"
                },
                "volatility": {
                  "description": "volatility is a measure of how erratic a series is, used to rank series to find the most or least volatile",
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "No permission error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "name": "narrationAnalyticsConfiguration",
            "description": "The object that define narration analytics configuration",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "disable/enable analytics for narration",
                  "type": "boolean"
                },
                "clustering": {
                  "description": "attempts to find clusters of closely-related data points",
                  "type": "object"
                },
                "distribution": {
                  "description": "determines if the data collection follows a normal distribution",
                  "type": "object"
                },
                "correlation": {
                  "description": "performs regressions of the measure values across the discrete dimension and comments on the analysis",
                  "type": "object"
                },
                "trendline": {
                  "description": "trendlines consist of fitting the data for each measure to a line and determining whether or not that model fits the data",
                  "type": "object"
                },
                "segments": {
                  "description": "segments are noteworthy/interesting portions of a series with movements of a certain percent of change",
                  "type": "object"
                },
                "volatility": {
                  "description": "volatility is a measure of how erratic a series is, used to rank series to find the most or least volatile",
                  "type": "object"
                }
              }
            }
          }
        ]
      }
    },
    "/geo/geojson/{type}": {
      "x-swagger-router-controller": "geo.controller.v1",
      "x-permission-type": "none",
      "get": {
        "operationId": "geoJson",
        "summary": "Get geoJson by type.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Type of geo json (ie: world, usa)\n",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [ "geo" ],
        "responses": {
          "200": {
            "description": "geo json",
            "schema": {
              "type": "object",
              "properties": {
                "type": { "type": "string" },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "default": "string"
                      },
                      "id": {
                        "type": "string",
                        "default": "string"
                      },
                      "properties": { "type": "object" },
                      "geometry": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "string"
                          },
                          "coordinates": {
                            "type": "array",
                            "items": { "type": "array" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/geo/locations": {
      "x-swagger-router-controller": "geo.controller.v1",
      "x-permission-type": "none",
      "post": {
        "operationId": "locations",
        "summary": "Returns geographical coordinates for the given locations",
        "parameters": [
          {
            "in": "body",
            "name": "locations",
            "description": "Geo request parameters object, containing an array of locations and geoLevel:\n{\"locations\": [{ \"name\": \"Cupertino\", \"country\": \"United States\", \"state\": \"California\" }],\n\"geoLevel\": \"city\"} or {\"locations\": [{ \"name\": \"United States, CA, Cupertino\" }], \"geoLevel\": \"city\"}\n",
            "schema": {
              "type": "object",
              "properties": {
                "locations": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/location" }
                },
                "geoLevel": {
                  "type": "string",
                  "default": "string"
                }
              }
            }
          }
        ],
        "description": "Performs geo-coding of the given locations and returns their geographical coordinates.\n",
        "tags": [ "geo" ],
        "responses": {
          "200": {
            "description": "Performs geo-coding of the given locations and returns their geographical coordinates",
            "schema": {
              "type": "array",
              "items": {
                "required": [ "name", "latLng", "placetype" ],
                "properties": {
                  "name": { "type": "string" },
                  "asciiname": { "type": "string" },
                  "latLng": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "format": "float"
                      },
                      "lng": {
                        "type": "number",
                        "format": "float"
                      }
                    }
                  },
                  "placetype": { "type": "string" },
                  "country": { "type": "string" },
                  "countryCode": { "type": "string" },
                  "fqn": { "type": "string" },
                  "lookupKey": { "type": "string" },
                  "text": { "type": "string" },
                  "place_name": { "type": "string" },
                  "context": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "short_code": { "type": "string" },
                        "text": { "type": "string" },
                        "wikidata": { "type": "string" }
                      }
                    }
                  },
                  "version": { "type": "string" },
                  "_id": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "/plugins": {
      "x-swagger-router-controller": "plugins.api.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "getPlugins",
        "summary": "Return a list of your plug-ins",
        "description": "The **get plugins** endpoint returns a list of plugins with their details\nand provided filtration and ordering.\n<br/>Results can be filtered and ordered by the following parameters.\n",
        "tags": [ "plugins" ],
        "responses": {
          "200": {
            "description": "get plugins success response",
            "schema": {
              "type": "object",
              "description": "Plugin response model",
              "properties": {
                "plugins": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Plugin object",
                    "properties": {
                      "name": {
                        "description": "plugin name",
                        "type": "string"
                      },
                      "version": {
                        "description": "version of plugin",
                        "type": "number"
                      },
                      "lastUpdate": {
                        "description": "last time plugin updated",
                        "type": "string"
                      },
                      "isEnabled": {
                        "description": "enabled/disabled plugin status",
                        "type": "boolean"
                      },
                      "folderName": {
                        "description": "plugin folder name",
                        "type": "string"
                      }
                    }
                  }
                },
                "count": {
                  "description": "amount of plugins",
                  "type": "number"
                },
                "queryMetadata": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "description": "limit of items to return",
                      "type": "number"
                    },
                    "skip": {
                      "description": "number of items to skip",
                      "type": "number"
                    },
                    "search": {
                      "description": "filter by provided string",
                      "type": "string"
                    },
                    "orderby": {
                      "description": "order by specific field",
                      "type": "string"
                    },
                    "desc": {
                      "description": "sort by descending or ascending",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid  parameter.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "Filter by provided field",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "desc",
            "description": "Order by descending/ascending",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "search",
            "description": "Filter according to provided string",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 0
          },
          {
            "in": "query",
            "name": "limit",
            "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
            "required": false,
            "type": "integer",
            "minimum": 1
          }
        ]
      },
      "patch": {
        "x-permission-type": "admins-only",
        "operationId": "updatePlugins",
        "summary": "Update your plug-in’s metadata",
        "description": "The **patch plugins** endpoint updates the metadata of a plug-in and returns a list of modified plug-ins.\n Metadata for a plug-in includes its filename, directory location, and version details.\n",
        "tags": [ "plugins" ],
        "responses": {
          "200": {
            "description": "all plugins succesfully updated.",
            "schema": {
              "description": "Plugin updated response model",
              "type": "array",
              "items": {
                "type": "object",
                "description": "Plugin object",
                "properties": {
                  "name": {
                    "description": "plugin name",
                    "type": "string"
                  },
                  "version": {
                    "description": "version of plugin",
                    "type": "number"
                  },
                  "lastUpdate": {
                    "description": "last time plugin updated",
                    "type": "string"
                  },
                  "isEnabled": {
                    "description": "enabled/disabled plugin status",
                    "type": "boolean"
                  },
                  "folderName": {
                    "description": "plugin folder name",
                    "type": "string"
                  }
                }
              }
            }
          },
          "202": {
            "description": "some plugins succesfully updated.",
            "schema": {
              "description": "Plugin updated response model",
              "type": "array",
              "items": {
                "type": "object",
                "description": "Plugin object",
                "properties": {
                  "name": {
                    "description": "plugin name",
                    "type": "string"
                  },
                  "version": {
                    "description": "version of plugin",
                    "type": "number"
                  },
                  "lastUpdate": {
                    "description": "last time plugin updated",
                    "type": "string"
                  },
                  "isEnabled": {
                    "description": "enabled/disabled plugin status",
                    "type": "boolean"
                  },
                  "folderName": {
                    "description": "plugin folder name",
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No plugins updated.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "description": "plugins array to be updated.",
            "name": "plugins",
            "required": true,
            "schema": {
              "description": "Plugin updated response model",
              "type": "array",
              "items": {
                "type": "object",
                "description": "Plugin object",
                "properties": {
                  "name": {
                    "description": "plugin name",
                    "type": "string"
                  },
                  "version": {
                    "description": "version of plugin",
                    "type": "number"
                  },
                  "lastUpdate": {
                    "description": "last time plugin updated",
                    "type": "string"
                  },
                  "isEnabled": {
                    "description": "enabled/disabled plugin status",
                    "type": "boolean"
                  },
                  "folderName": {
                    "description": "plugin folder name",
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/plugins/get_info": {
      "x-swagger-router-controller": "plugins.api.controller.v1",
      "get": {
        "x-permission-type": "none",
        "x-hide": false,
        "operationId": "getPluginsBuildInfo",
        "summary": "Return the plug-in’s build information",
        "description": "The **get_info** endpoint returns the build information including the JavaScript file name and last build error.",
        "tags": [ "plugins" ],
        "responses": { "200": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "description": "Returns response in JavaScript format or not.",
            "name": "returnFile",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/plugins/get_start": {
      "x-swagger-router-controller": "plugins.api.controller.v1",
      "get": {
        "x-permission-type": "none",
        "x-hide": true,
        "operationId": "getPluginsRebuildStart",
        "summary": "Get plugins rebuild start trigger",
        "description": "Resolve request after plugins rebuild start, otherwise waiting for it.",
        "tags": [ "plugins" ],
        "responses": { "200": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/plugins/get_end": {
      "x-swagger-router-controller": "plugins.api.controller.v1",
      "get": {
        "x-permission-type": "none",
        "x-hide": true,
        "operationId": "getPluginsRebuildEnd",
        "summary": "Get plugins rebuild end trigger",
        "description": "Resolve request after plugins rebuild end, otherwise waiting for it.",
        "tags": [ "plugins" ],
        "responses": { "200": { "description": "No response was specified" } },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          }
        ]
      }
    },
    "/elasticubes/server/{server}/permissions": {
      "x-swagger-router-controller": "servers.controller.v1",
      "put": {
        "x-permission-type": "none",
        "operationId": "updateDefaultPermission",
        "summary": "updates Elasricube Server default permission",
        "description": "The **update ElastiCube server default permission ** endpoint returns a list of ElastiCube server permissions.\n",
        "tags": [ "elasticubes" ],
        "responses": {
          "200": {
            "description": "An Array of server permissions",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "party": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "type": { "type": "string" },
                  "permission": { "type": "string" }
                }
              }
            }
          },
          "404": {
            "description": "Server Not Found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The ElastiCube server",
            "name": "server",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "permissions array.",
            "name": "permissions",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/serverPermissions" }
            }
          }
        ]
      }
    },
    "/connectors/{provider}/ui_config": {
      "x-swagger-router-controller": "connectors.controller.v1",
      "get": {
        "x-permission-type": "data-admins-only",
        "operationId": "getConnectorUIManifest",
        "summary": "Returns object that describes the UI connection manifest",
        "description": "The **get connector ui manifest** endpoint returns connector ui manifest that describes ui render options for controls.\n",
        "produces": [ "application/json" ],
        "tags": [ "connectors" ],
        "responses": {
          "200": {
            "description": "Connector ui manifest",
            "schema": { "type": "object" }
          },
          "404": {
            "description": "UI Manifest not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "path",
            "description": "The name of connector provider.",
            "name": "provider",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/suggestions": {
      "x-swagger-router-controller": "suggestions.controller.v1",
      "post": {
        "operationId": "getSuggestions",
        "summary": "Return suggestions for an entity",
        "description": "Return **suggestions** for a data source or field.\n",
        "tags": [ "suggestion" ],
        "responses": {
          "200": {
            "description": "List of recommended items",
            "schema": {
              "description": "Array of candidates to suggest",
              "type": "object",
              "properties": {
                "queryMetadata": {
                  "description": "query metadata",
                  "type": "object",
                  "properties": {
                    "target": {
                      "description": "which items to look for suggestions",
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "popular": {
                      "description": "include popular fields or not",
                      "type": "boolean"
                    },
                    "total": {
                      "description": "total items which match query metadata",
                      "type": "number"
                    },
                    "skip": {
                      "description": "number of skiped items",
                      "type": "number"
                    },
                    "count": {
                      "description": "number of returned items",
                      "type": "number"
                    }
                  }
                },
                "suggestions": {
                  "type": "array",
                  "description": "fields to suggest",
                  "items": {
                    "type": "object",
                    "properties": {
                      "table": { "type": "string" },
                      "column": { "type": "string" },
                      "datatype": { "type": "string" },
                      "title": { "type": "string" },
                      "rank": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access allowed",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "name": "Suggestions Parameters",
            "description": "The properties that define which object to return suggestions for. You can return suggestions for a data source or for a specific field within a data source.",
            "required": true,
            "schema": {
              "description": "Properties to get suggestion items",
              "type": "object",
              "required": [ "type", "datasource", "fields" ],
              "properties": {
                "datasource": {
                  "description": "datasource name",
                  "type": "object"
                },
                "type": {
                  "description": "define suggestion type [widgets]",
                  "type": "string"
                },
                "count": {
                  "description": "how many items to return. By default 20",
                  "type": "number"
                },
                "fields": {
                  "description": "which items to look for suggestions",
                  "type": "array",
                  "items": { "type": "object" }
                },
                "skip": {
                  "description": "number of items to skip. By default 0",
                  "type": "number"
                },
                "popular": {
                  "description": "include popular fields or not. By default true",
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "/suggestions/status": {
      "x-swagger-router-controller": "suggestions.controller.v1",
      "x-permission-type": "admins-only",
      "get": {
        "operationId": "getStatus",
        "summary": "Return status of suggestions",
        "description": "The **suggestions status** used get actual status of suggestions\n",
        "tags": [ "suggestion" ],
        "responses": {
          "200": {
            "description": "Suggestions status",
            "schema": {
              "description": "Status of suggestions",
              "type": "object",
              "properties": {
                "lastExecution": {
                  "description": "Time when was last suggestions refresh.",
                  "type": "string"
                },
                "jobStatus": {
                  "description": "Define job status.",
                  "type": "string"
                },
                "jobFrequent": {
                  "description": "Job schedule in cron format.",
                  "type": "string"
                },
                "executionStatus": {
                  "description": "Executions status of suggestions processes.",
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Suggestion does not set",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/suggestions/refresh": {
      "x-swagger-router-controller": "suggestions.controller.v1",
      "x-permission-type": "admins-only",
      "post": {
        "operationId": "refreshSuggestions",
        "summary": "Refresh suggestions data and ranking",
        "description": "Refresh **suggestions** with actual data and ranking.\n",
        "tags": [ "suggestion" ],
        "responses": {
          "200": {
            "description": "Refresh suggestions status",
            "schema": {
              "description": "Status of suggestions",
              "type": "object",
              "properties": {
                "message": {
                  "description": "Information message.",
                  "type": "string"
                },
                "suggestionCode": {
                  "description": "Suggestions code.",
                  "type": "number"
                }
              }
            }
          },
          "401": {
            "description": "No access allowed",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "name": "refreshProperties",
            "description": "The properties that define which part of suggestions refresh.",
            "required": false,
            "schema": {
              "description": "Properties to refresh suggestions",
              "type": "object",
              "properties": {
                "data": {
                  "description": "refresh suggestions data or not. By default false.",
                  "type": "boolean"
                },
                "ranking": {
                  "description": "refresh suggestions ranking or not. By default false.",
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "/suggestions/refresh/datasource": {
      "x-swagger-router-controller": "suggestions.controller.v1",
      "x-permission-type": "admins-only",
      "post": {
        "operationId": "refreshSuggestionsByDatasource",
        "summary": "Refresh suggestions data and ranking by Datasource",
        "description": "Refresh **suggestions** with actual data and ranking.\n",
        "tags": [ "suggestion" ],
        "responses": {
          "200": { "description": "Refresh suggestions status" },
          "401": {
            "description": "No access allowed",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer" },
                    "message": { "type": "string" },
                    "status": { "type": "integer" },
                    "httpMessage": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": { "type": "integer" },
                        "message": { "type": "string" },
                        "status": { "type": "integer" },
                        "httpMessage": { "type": "string" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "resourceType": { "type": "string" },
                        "resourceName": { "type": "string" }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "body",
            "name": "datasource",
            "description": "The properties that define which part of suggestions refresh.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "address": { "type": "string" }
              }
            }
          }
        ]
      }
    },
    "/encryption/encrypt": {
      "x-swagger-router-controller": "encryption.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "encrypt",
        "summary": "Encrypt string with AES key",
        "description": "The **encrypt** endpoint returns the encrypted with AES key value from the request.\n",
        "tags": [ "encryption" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "name": "value",
            "description": "The value which should be encrypted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Encrypted value.",
            "schema": { "type": "string" }
          }
        }
      }
    },
    "/encryption/decrypt": {
      "x-swagger-router-controller": "encryption.controller.v1",
      "get": {
        "x-permission-type": "admins-only",
        "operationId": "decrypt",
        "summary": "Decrypt encrypted with AES key string",
        "description": "The **decrypt** endpoint returns the decrypted with AES key value from the request.\n",
        "tags": [ "encryption" ],
        "parameters": [
          {
            "in": "header",
            "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
            "name": "authorization",
            "required": false,
            "type": "string",
            "pattern": "^Bearer .*"
          },
          {
            "in": "query",
            "name": "value",
            "description": "The value which should be decrypted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Decrypted value.",
            "schema": { "type": "string" }
          }
        }
      }
    }
  },
  "definitions": {
    "set": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "pattern": "^[^#]*$"
        },
        "routingMode": { "type": "string" },
        "fullNames": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-zA-Z-.+_]+/[0-9a-zA-Z-. +_!@$&^%()]+$"
          }
        }
      }
    },
    "sqlTypesEnum": {
      "type": "string",
      "default": "BigInt",
      "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
    },
    "sqlQuery": {
      "type": "object",
      "properties": { "queryString": { "type": "string" } }
    },
    "sqlQueryWithType": {
      "type": "object",
      "properties": {
        "queryString": { "type": "string" },
        "fieldType": {
          "type": "string",
          "default": "BigInt",
          "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
        }
      }
    },
    "fieldSqlQuery": {
      "type": "object",
      "properties": {
        "queryString": { "type": "string" },
        "fieldName": { "type": "string" },
        "fieldType": {
          "type": "string",
          "default": "BigInt",
          "enum": [ "BigInt", "Binary", "Bit", "Char", "DateTime", "Decimal", "Float", "Image", "Int", "Money", "NChar", "NText", "NVarChar", "Real", "UniqueIdentifier", "SmallDateTime", "SmallInt", "SmallMoney", "Text", "Timestamp", "TinyInt", "VarBinary", "VarChar", "Variant", "Xml", "Udt", "Structured", "Date", "Time", "DateTime2", "DateTimeOffset" ]
        }
      }
    },
    "tableSqlQuery": {
      "type": "object",
      "properties": {
        "queryString": { "type": "string" },
        "tableName": { "type": "string" }
      }
    },
    "manualTableSqlQuery": {
      "type": "object",
      "properties": {
        "queryString": { "type": "string" },
        "tableName": { "type": "string" },
        "connectionString": { "type": "string" },
        "providerName": {
          "type": "string",
          "enum": [ "sql", "MySql" ]
        },
        "schemaName": { "type": "string" },
        "originalTableName": { "type": "string" }
      }
    },
    "fieldRelation": {
      "type": "object",
      "properties": {
        "sourceField": { "type": "string" },
        "targetTable": { "type": "string" },
        "targetField": { "type": "string" }
      }
    },
    "fieldUpdateRelation": {
      "type": "object",
      "properties": {
        "sourceField": { "type": "string" },
        "targetTable": { "type": "string" },
        "targetField": { "type": "string" },
        "newTargetTable": { "type": "string" },
        "newTargetField": { "type": "string" }
      }
    },
    "serverSettings": {
      "type": "object",
      "properties": {
        "DefaultDataDirectory": { "type": "string" },
        "ElasticubeMemoryAllocation": { "type": "integer" },
        "DataImportChunkSize": { "type": "integer" },
        "SimultaneousQueryExecutions": { "type": "integer" },
        "QueryTimeout": { "type": "integer" },
        "RecycleQueries": {
          "type": "boolean",
          "default": true
        },
        "RserverEnabled": {
          "type": "boolean",
          "default": false
        },
        "Rserver": { "type": "string" }
      }
    },
    "cubes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "elasticube": { "type": "string" },
          "server": { "type": "string" }
        }
      }
    },
    "permissionsCube": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [ "users", "groups" ],
        "properties": {
          "dataset": { "type": "string" },
          "server": { "type": "string" },
          "elasticube": { "type": "string" },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "email": { "type": "string" }
              }
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "permissionsCubeResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "dataset": { "type": "string" },
          "server": { "type": "string" },
          "elasticube": { "type": "string" },
          "allMembersAllowed": { "type": "boolean" },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "accessAllowed": { "type": "boolean" },
                "email": { "type": "string" }
              }
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "accessAllowed": { "type": "boolean" },
                "name": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "cubeShares": {
      "type": "object",
      "required": [ "server", "elasticube", "shares" ],
      "properties": {
        "server": { "type": "string" },
        "elasticube": { "type": "string" },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "type" ],
            "properties": {
              "partyId": { "type": "string" },
              "type": { "type": "string" },
              "email": { "type": "string" }
            }
          }
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": { "type": "integer" },
        "message": { "type": "string" },
        "status": { "type": "integer" },
        "httpMessage": { "type": "string" }
      }
    },
    "baseApiError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "notFoundApiError": {
      "type": "object",
      "properties": {
        "error": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "code": { "type": "integer" },
                "message": { "type": "string" },
                "status": { "type": "integer" },
                "httpMessage": { "type": "string" }
              }
            },
            {
              "type": "object",
              "properties": {
                "resourceType": { "type": "string" },
                "resourceName": { "type": "string" }
              }
            }
          ]
        }
      }
    },
    "unauthorizedApiError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "badRequestApiError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "forbiddenApiError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "unprocessableEntityApiError": {
      "type": "object",
      "properties": {
        "error": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "code": { "type": "integer" },
                "message": { "type": "string" },
                "status": { "type": "integer" },
                "httpMessage": { "type": "string" }
              }
            },
            {
              "type": "object",
              "properties": {
                "subErrors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "object",
                        "properties": {
                          "code": { "type": "integer" },
                          "message": { "type": "string" },
                          "status": { "type": "integer" },
                          "httpMessage": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      }
    },
    "tooManyRequestsApiError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "internalServerApiError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "gatewayTimeouError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": { "type": "integer" },
            "message": { "type": "string" },
            "status": { "type": "integer" },
            "httpMessage": { "type": "string" }
          }
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "email": {
          "type": "string",
          "pattern": ""
        },
        "userName": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "roleId": { "type": "string" },
        "active": { "type": "boolean" },
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        },
        "adgroups": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
          }
        },
        "activeDirectory": { "type": "boolean" },
        "principalName": { "type": "string" },
        "objectSid": { "type": "string" },
        "uSNChanged": { "type": "string" },
        "dn": { "type": "string" },
        "preferences": {
          "type": "object",
          "properties": {
            "localeId": { "type": "string" },
            "language": { "type": "string" }
          }
        },
        "uiSettings": { "type": "object" },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "lastLogin": { "type": "string" },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "pendingExpiration": {
          "type": "string",
          "format": "date-time"
        },
        "createdSso": { "type": "string" }
      }
    },
    "nonsenseUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "pattern": ""
        },
        "userName": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "roleId": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        },
        "preferences": {
          "type": "object",
          "properties": { "localeId": { "type": "string" } }
        },
        "uiSettings": { "type": "object" }
      }
    },
    "adUser": {
      "type": "object",
      "properties": {
        "userName": { "type": "string" },
        "roleId": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        },
        "objectSid": {
          "type": "string",
          "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
        },
        "preferences": {
          "type": "object",
          "properties": { "localeId": { "type": "string" } }
        },
        "uiSettings": { "type": "object" }
      }
    },
    "device": {
      "type": "object",
      "properties": {
        "deviceId": { "type": "string" },
        "token": { "type": "string" }
      }
    },
    "userPreferences": {
      "type": "object",
      "properties": {
        "localeId": { "type": "string" },
        "language": { "type": "string" }
      }
    },
    "userUiSettings": { "type": "object" },
    "group": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "name": { "type": "string" },
        "language": { "type": "string" },
        "mail": { "type": "string" },
        "ad": { "type": "boolean" },
        "roleId": {
          "type": "string",
          "pattern": "(^[0-9a-fA-F]{24}$|^[Nn][Uu][Ll]{2}$)"
        },
        "defaultRole": { "type": "string" },
        "objectSid": {
          "type": "string",
          "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
        },
        "dn": { "type": "string" },
        "uSNChanged": { "type": "string" },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "nonsenseGroup": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "adGroup": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "cn": { "type": "string" },
        "roleId": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "objectSid": {
          "type": "string",
          "pattern": "^\\[\\d{1,3}(?:,\\d{1,3}){27}\\]$"
        },
        "dn": { "type": "string" }
      }
    },
    "dashboard": {
      "type": "object",
      "properties": {
        "title": { "type": "string" },
        "desc": { "type": "string" },
        "oid": { "type": "string" },
        "source": { "type": "string" },
        "parentFolder": { "type": "string" },
        "type": { "type": "string" },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "shareId", "type" ],
            "properties": {
              "shareId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group" ]
              },
              "rule": {
                "type": "string",
                "enum": [ "view", "edit" ]
              },
              "subscribe": { "type": "boolean" }
            }
          }
        },
        "style": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "palette": {
              "type": "object",
              "properties": {
                "colors": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "name": { "type": "string" },
                "isSystem": { "type": "boolean" }
              }
            }
          }
        },
        "owner": { "type": "string" },
        "userId": { "type": "string" },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "datasource": {
          "type": "object",
          "required": [ "title" ],
          "properties": {
            "title": { "type": "string" },
            "id": { "type": "string" },
            "address": { "type": "string" },
            "database": { "type": "string" },
            "fullname": { "type": "string" }
          }
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "jaql": {
                "type": "object",
                "properties": {
                  "dim": { "type": "string" },
                  "datatype": { "type": "string" },
                  "title": { "type": "string" }
                }
              }
            }
          }
        },
        "instanceType": { "type": "string" },
        "layout": {
          "type": "object",
          "properties": {
            "type": { "type": "string" },
            "columns": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "width": { "type": "number" },
                  "cells": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "subcells": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "elements": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "widgetId": { "type": "string" },
                                    "minHeight": { "type": "number" },
                                    "maxHeight": { "type": "number" },
                                    "minWidth": { "type": "number" },
                                    "maxWidth": { "type": "number" },
                                    "height": { "type": "number" },
                                    "defaultWidth": { "type": "number" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "previewLayout": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": { "type": "string" },
              "format": { "type": "string" },
              "orientation": { "type": "string" },
              "layout": { "type": "string" },
              "headerSize": { "type": "string" },
              "title": { "type": "boolean" },
              "elasticubeBuilt": { "type": "boolean" },
              "elasticubeName": { "type": "boolean" },
              "filters": { "type": "boolean" },
              "logo": { "type": "boolean" },
              "pageNumbers": { "type": "boolean" },
              "pages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "defaultFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "jaql": {
                "type": "object",
                "properties": {
                  "dim": { "type": "string" },
                  "datatype": { "type": "string" },
                  "title": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "baseDashboard": {
      "type": "object",
      "required": [ "title", "datasource" ],
      "properties": {
        "title": { "type": "string" },
        "desc": { "type": "string" },
        "parentFolder": { "type": "string" },
        "datasource": {
          "type": "object",
          "required": [ "title" ],
          "properties": {
            "title": { "type": "string" },
            "id": { "type": "string" },
            "address": { "type": "string" },
            "database": { "type": "string" },
            "fullname": { "type": "string" }
          }
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "jaql": {
                "type": "object",
                "properties": {
                  "dim": { "type": "string" },
                  "datatype": { "type": "string" },
                  "title": { "type": "string" }
                }
              }
            }
          }
        },
        "layout": {
          "type": "object",
          "properties": {
            "type": { "type": "string" },
            "columns": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "width": { "type": "number" },
                  "cells": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "subcells": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "elements": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "widgetId": { "type": "string" },
                                    "minHeight": { "type": "number" },
                                    "maxHeight": { "type": "number" },
                                    "minWidth": { "type": "number" },
                                    "maxWidth": { "type": "number" },
                                    "height": { "type": "number" },
                                    "defaultWidth": { "type": "number" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "previewLayout": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": { "type": "string" },
              "format": { "type": "string" },
              "orientation": { "type": "string" },
              "layout": { "type": "string" },
              "headerSize": { "type": "string" },
              "title": { "type": "boolean" },
              "elasticubeBuilt": { "type": "boolean" },
              "elasticubeName": { "type": "boolean" },
              "filters": { "type": "boolean" },
              "logo": { "type": "boolean" },
              "pageNumbers": { "type": "boolean" },
              "pages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "width": { "type": "number" },
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "subcells": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "elements": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "widgetId": { "type": "string" },
                                            "minHeight": { "type": "number" },
                                            "maxHeight": { "type": "number" },
                                            "minWidth": { "type": "number" },
                                            "maxWidth": { "type": "number" },
                                            "height": { "type": "number" },
                                            "defaultWidth": { "type": "number" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "defaultFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "jaql": {
                "type": "object",
                "properties": {
                  "dim": { "type": "string" },
                  "datatype": { "type": "string" },
                  "title": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "dashboardExists": {
      "type": "object",
      "properties": { "exists": { "type": "boolean" } }
    },
    "widget": {
      "type": "object",
      "properties": {
        "title": { "type": "string" },
        "oid": { "type": "string" },
        "desc": { "type": "string" },
        "datasource": {
          "type": "object",
          "required": [ "title" ],
          "properties": {
            "title": { "type": "string" },
            "id": { "type": "string" },
            "address": { "type": "string" },
            "database": { "type": "string" },
            "fullname": { "type": "string" }
          }
        },
        "type": { "type": "string" },
        "subtype": { "type": "string" },
        "dashboardid": { "type": "string" },
        "owner": { "type": "string" },
        "userId": { "type": "string" },
        "instanceType": { "type": "string" },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "panels": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        },
                        "field": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "index": { "type": "integer" }
                          }
                        },
                        "format": { "type": "object" }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "shareId", "type" ],
            "properties": {
              "shareId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group" ]
              },
              "rule": {
                "type": "string",
                "enum": [ "view", "edit" ]
              },
              "subscribe": { "type": "boolean" }
            }
          }
        }
      }
    },
    "baseWidget": {
      "type": "object",
      "required": [ "datasource", "type", "metadata" ],
      "properties": {
        "title": { "type": "string" },
        "desc": { "type": "string" },
        "datasource": {
          "type": "object",
          "required": [ "title" ],
          "properties": {
            "title": { "type": "string" },
            "id": { "type": "string" },
            "address": { "type": "string" },
            "database": { "type": "string" },
            "fullname": { "type": "string" }
          }
        },
        "type": { "type": "string" },
        "subtype": { "type": "string" },
        "metadata": {
          "type": "object",
          "properties": {
            "panels": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jaql": {
                          "type": "object",
                          "properties": {
                            "dim": { "type": "string" },
                            "datatype": { "type": "string" },
                            "title": { "type": "string" }
                          }
                        },
                        "field": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "index": { "type": "integer" }
                          }
                        },
                        "format": { "type": "object" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "datasource": {
      "type": "object",
      "required": [ "title" ],
      "properties": {
        "title": { "type": "string" },
        "id": { "type": "string" },
        "address": { "type": "string" },
        "database": { "type": "string" },
        "fullname": { "type": "string" }
      }
    },
    "style": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "palette": {
          "type": "object",
          "properties": {
            "colors": {
              "type": "array",
              "items": { "type": "string" }
            },
            "name": { "type": "string" },
            "isSystem": { "type": "boolean" }
          }
        }
      }
    },
    "jaql": {
      "type": "object",
      "properties": {
        "dim": { "type": "string" },
        "datatype": { "type": "string" },
        "title": { "type": "string" }
      }
    },
    "copyRequest": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "pattern": "^https?\\:\\/\\/.+"
        },
        "authorization": {
          "type": "object",
          "properties": {
            "token": { "type": "string" },
            "deviceId": { "type": "string" },
            "cookieType": { "type": "string" },
            "userName": { "type": "string" },
            "expiration": { "type": "string" },
            "issueDate": { "type": "string" }
          }
        },
        "dashboards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "action": {
                "type": "string",
                "enum": [ "duplicate", "overwrite", "skip" ]
              }
            }
          }
        }
      }
    },
    "layout": {
      "type": "object",
      "properties": {
        "type": { "type": "string" },
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "width": { "type": "number" },
              "cells": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "subcells": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "elements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "widgetId": { "type": "string" },
                                "minHeight": { "type": "number" },
                                "maxHeight": { "type": "number" },
                                "minWidth": { "type": "number" },
                                "maxWidth": { "type": "number" },
                                "height": { "type": "number" },
                                "defaultWidth": { "type": "number" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "filters": {
      "type": "array",
      "items": {
        "properties": {
          "jaql": {
            "type": "object",
            "properties": {
              "dim": { "type": "string" },
              "datatype": { "type": "string" },
              "title": { "type": "string" }
            }
          }
        }
      }
    },
    "share": {
      "type": "object",
      "required": [ "shareId", "type" ],
      "properties": {
        "shareId": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "type": {
          "type": "string",
          "enum": [ "user", "group" ]
        },
        "rule": {
          "type": "string",
          "enum": [ "view", "edit" ]
        },
        "subscribe": { "type": "boolean" }
      }
    },
    "beginResetPassword": {
      "type": "object",
      "required": [ "email" ],
      "properties": { "email": { "type": "string" } }
    },
    "resetPasswordpass": {
      "type": "object",
      "required": [ "password" ],
      "properties": { "password": { "type": "string" } }
    },
    "tokenedUserResponse": {
      "type": "object",
      "required": [ "userName" ],
      "properties": { "userName": { "type": "string" } }
    },
    "beginActivate": {
      "type": "object",
      "required": [ "email" ],
      "properties": {
        "email": {
          "type": "string",
          "pattern": ""
        }
      }
    },
    "beginActivateBulk": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": ""
      }
    },
    "licenseInformation": {
      "type": "object",
      "properties": {
        "bigData": { "type": "boolean" },
        "expirationDate": { "type": "string" },
        "highAvailability": { "type": "boolean" },
        "inUseAdmins": { "type": "integer" },
        "inUseDesigners": { "type": "integer" },
        "inUseViewers": { "type": "integer" },
        "maxAdmins": { "type": "integer" },
        "maxDesigners": { "type": "integer" },
        "maxViewers": { "type": "integer" },
        "trial": { "type": "boolean" }
      }
    },
    "applicationStatus": {
      "type": "object",
      "required": [ "version", "license" ],
      "properties": {
        "version": {
          "type": "object",
          "properties": {
            "isBigData": { "type": "boolean" },
            "version": { "type": "string" }
          }
        },
        "license": {
          "type": "object",
          "properties": {
            "isMobileEnabled": { "type": "boolean" },
            "isExpired": { "type": "boolean" }
          }
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "required": [ "success", "message", "access_token", "profile" ],
      "properties": {
        "success": { "type": "boolean" },
        "message": { "type": "string" },
        "access_token": { "type": "string" },
        "profile": { "type": "object" }
      }
    },
    "server": {
      "type": "object",
      "required": [ "server" ],
      "properties": { "server": { "type": "string" } }
    },
    "saveServer": {
      "type": "object",
      "required": [ "token", "cookieType", "server", "userName" ],
      "properties": {
        "token": { "type": "string" },
        "cookieType": { "type": "string" },
        "server": { "type": "string" },
        "userName": { "type": "string" },
        "deviceId": { "type": "string" },
        "expiration": { "type": "string" },
        "issueDate": { "type": "string" }
      }
    },
    "serverAccess": {
      "type": "object",
      "required": [ "serverName" ],
      "properties": {
        "serverName": { "type": "string" },
        "name": { "type": "string" }
      }
    },
    "mongoUserObject": {
      "type": "object",
      "required": [ "userName" ],
      "properties": {
        "userName": { "type": "string" },
        "password": { "type": "string" }
      }
    },
    "folder": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "oid": { "type": "string" },
        "owner": { "type": "string" },
        "type": { "type": "string" },
        "userId": { "type": "string" },
        "instanceType": { "type": "string" },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "parentId": { "type": "string" }
      }
    },
    "baseFolder": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "parentId": { "type": "string" }
      }
    },
    "reportObject": {
      "type": "object",
      "required": [ "assetId", "assetType", "recipients", "preferences" ],
      "properties": {
        "assetId": { "type": "string" },
        "assetType": {
          "type": "string",
          "enum": [ "dashboard" ]
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "user", "group" ]
              },
              "recipient": { "type": "string" }
            }
          }
        },
        "preferences": {
          "type": "object",
          "properties": {
            "inline": { "type": "boolean" },
            "pdf": {
              "type": "object",
              "properties": {
                "includeTitle": {
                  "type": "boolean",
                  "default": true
                },
                "includeFilters": {
                  "type": "boolean",
                  "default": true
                },
                "includeDS": {
                  "type": "boolean",
                  "default": true
                },
                "renderingInfo": {
                  "type": "object",
                  "properties": {
                    "paperFormat": {
                      "type": "string",
                      "default": "A4",
                      "enum": [ "A3", "A4", "A5", "legal", "letter", "tabloid", "LEGAL", "LETTER", "TABLOID" ]
                    },
                    "paperOrientation": {
                      "type": "string",
                      "default": "portrait",
                      "enum": [ "portrait", "landscape" ]
                    },
                    "layout": {
                      "type": "string",
                      "default": "asis",
                      "enum": [ "asis", "feed" ]
                    },
                    "showNarration": {
                      "type": "boolean",
                      "default": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "event": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "url": { "type": "string" },
        "context": {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "items": { "type": "integer" }
            }
          }
        },
        "by": {
          "type": "object",
          "required": [ "type" ],
          "properties": {
            "name": { "type": "string" },
            "oid": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": {
              "type": "string",
              "enum": [ "dashboard", "cube", "server" ]
            }
          }
        },
        "seen": { "type": "boolean" },
        "hide": { "type": "boolean" },
        "alert": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        }
      }
    },
    "updateEvent": {
      "type": "object",
      "properties": {
        "seen": { "type": "boolean" },
        "hide": { "type": "boolean" }
      }
    },
    "eventCount": { "type": "integer" },
    "eventQuery": {
      "type": "object",
      "properties": {
        "dateFrom": {
          "type": "string",
          "format": "date-time"
        },
        "dateTo": {
          "type": "string",
          "format": "date-time"
        },
        "seen": { "type": "boolean" },
        "hide": { "type": "boolean" }
      }
    },
    "updateBulkEvent": {
      "type": "object",
      "properties": {
        "query": {
          "type": "object",
          "properties": {
            "dateFrom": {
              "type": "string",
              "format": "date-time"
            },
            "dateTo": {
              "type": "string",
              "format": "date-time"
            },
            "seen": { "type": "boolean" },
            "hide": { "type": "boolean" }
          }
        },
        "update": {
          "type": "object",
          "properties": {
            "seen": { "type": "boolean" },
            "hide": { "type": "boolean" }
          }
        }
      }
    },
    "alertParties": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "required": [ "type" ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [ "group", "user", "adgroup" ]
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        }
      }
    },
    "alertSources": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "required": [ "type" ],
        "properties": {
          "name": { "type": "string" },
          "oid": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "server": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [ "cube", "server" ]
          }
        }
      }
    },
    "addAlertAction": {
      "type": "object",
      "properties": {
        "email": {
          "type": "boolean",
          "default": true
        },
        "mobile": {
          "type": "boolean",
          "default": true
        },
        "feed": {
          "type": "boolean",
          "default": true
        },
        "slack": {
          "type": "object",
          "x-default": true,
          "properties": {
            "active": {
              "type": "boolean",
              "default": false
            },
            "url": {
              "type": "string",
              "default": ""
            },
            "channels": {
              "type": "string",
              "default": ""
            }
          }
        },
        "zapier": {
          "type": "object",
          "x-default": true,
          "properties": {
            "active": {
              "type": "boolean",
              "default": false
            },
            "url": {
              "type": "string",
              "default": ""
            }
          }
        },
        "webhooks": {
          "type": "array",
          "default": [],
          "items": {
            "type": "object",
            "required": [ "active", "url", "name" ],
            "properties": {
              "name": { "type": "string" },
              "url": { "type": "string" },
              "active": { "type": "boolean" }
            }
          }
        }
      }
    },
    "updateAlertAction": {
      "type": "object",
      "properties": {
        "email": { "type": "boolean" },
        "mobile": { "type": "boolean" },
        "feed": { "type": "boolean" },
        "slack": {
          "type": "object",
          "required": [ "active", "url", "channels" ],
          "properties": {
            "active": { "type": "boolean" },
            "url": { "type": "string" },
            "channels": { "type": "string" }
          }
        },
        "zapier": {
          "type": "object",
          "required": [ "active", "url" ],
          "properties": {
            "active": { "type": "boolean" },
            "url": { "type": "string" }
          }
        },
        "webhooks": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "active", "url", "name" ],
            "properties": {
              "name": { "type": "string" },
              "url": { "type": "string" },
              "active": { "type": "boolean" }
            }
          }
        }
      }
    },
    "alertCondition": {
      "type": "object",
      "required": [ "type" ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [ "fixed", "smart" ]
        },
        "leftOperand": { "type": "number" },
        "operator": { "type": "string" },
        "rightOperand": { "type": "number" }
      }
    },
    "addAlert": {
      "type": "object",
      "required": [ "parties", "category", "type", "enabled", "name", "action" ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "message": { "type": "string" },
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "script": {
          "type": "string",
          "default": ""
        },
        "parties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object",
            "required": [ "type" ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "group", "user", "adgroup" ]
              },
              "id": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              }
            }
          }
        },
        "disabledUsers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          }
        },
        "category": {
          "type": "string",
          "enum": [ "system", "kpi", "dashboard" ]
        },
        "type": {
          "type": "string",
          "enum": [ "build", "kpi" ]
        },
        "owner": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "context": {
          "type": "object",
          "properties": {
            "backToNormal": { "type": "boolean" },
            "buildSuccessAfterFailed": { "type": "boolean" },
            "buildSuccess": { "type": "boolean" },
            "buildFailed": { "type": "boolean" },
            "kpi": {
              "type": "object",
              "required": [ "datasource", "metadata" ],
              "properties": {
                "datasource": { "type": "object" },
                "metadata": {
                  "type": "object",
                  "required": [ "measures" ],
                  "properties": {
                    "measures": {
                      "type": "array",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "jaql" ],
                        "properties": {
                          "jaql": { "type": "object" },
                          "format": { "type": "object" }
                        }
                      }
                    },
                    "filters": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "required": [ "jaql" ],
                        "properties": {
                          "jaql": { "type": "object" },
                          "panel": {
                            "type": "string",
                            "default": "scope",
                            "enum": [ "scope" ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "dashboard": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "notifyOnceMet": { "type": "boolean" },
            "notifyNotMet": { "type": "boolean" },
            "condition": {
              "type": "object",
              "required": [ "type" ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [ "fixed", "smart" ]
                },
                "leftOperand": { "type": "number" },
                "operator": { "type": "string" },
                "rightOperand": { "type": "number" }
              }
            },
            "locale": { "type": "string" },
            "sources": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [ "type" ],
                "properties": {
                  "name": { "type": "string" },
                  "oid": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "server": { "type": "string" },
                  "type": {
                    "type": "string",
                    "enum": [ "cube", "server" ]
                  }
                }
              }
            }
          }
        },
        "action": {
          "type": "object",
          "properties": {
            "email": {
              "type": "boolean",
              "default": true
            },
            "mobile": {
              "type": "boolean",
              "default": true
            },
            "feed": {
              "type": "boolean",
              "default": true
            },
            "slack": {
              "type": "object",
              "x-default": true,
              "properties": {
                "active": {
                  "type": "boolean",
                  "default": false
                },
                "url": {
                  "type": "string",
                  "default": ""
                },
                "channels": {
                  "type": "string",
                  "default": ""
                }
              }
            },
            "zapier": {
              "type": "object",
              "x-default": true,
              "properties": {
                "active": {
                  "type": "boolean",
                  "default": false
                },
                "url": {
                  "type": "string",
                  "default": ""
                }
              }
            },
            "webhooks": {
              "type": "array",
              "default": [],
              "items": {
                "type": "object",
                "required": [ "active", "url", "name" ],
                "properties": {
                  "name": { "type": "string" },
                  "url": { "type": "string" },
                  "active": { "type": "boolean" }
                }
              }
            }
          }
        }
      }
    },
    "alertCount": {
      "type": "object",
      "required": [ "count" ],
      "properties": { "count": { "type": "number" } }
    },
    "setReceiveNotification": {
      "type": "object",
      "required": [ "receiveNotification" ],
      "properties": { "receiveNotification": { "type": "boolean" } }
    },
    "updateAlert": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "message": { "type": "string" },
        "enabled": { "type": "boolean" },
        "script": { "type": "string" },
        "parties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object",
            "required": [ "type" ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "group", "user", "adgroup" ]
              },
              "id": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              }
            }
          }
        },
        "context": {
          "type": "object",
          "properties": {
            "backToNormal": { "type": "boolean" },
            "buildSuccessAfterFailed": { "type": "boolean" },
            "buildSuccess": { "type": "boolean" },
            "buildFailed": { "type": "boolean" },
            "notifyOnceMet": { "type": "boolean" },
            "notifyNotMet": { "type": "boolean" },
            "condition": {
              "type": "object",
              "required": [ "type" ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [ "fixed", "smart" ]
                },
                "leftOperand": { "type": "number" },
                "operator": { "type": "string" },
                "rightOperand": { "type": "number" }
              }
            },
            "sources": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [ "type" ],
                "properties": {
                  "name": { "type": "string" },
                  "oid": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$"
                  },
                  "server": { "type": "string" },
                  "type": {
                    "type": "string",
                    "enum": [ "cube", "server" ]
                  }
                }
              }
            }
          }
        },
        "action": {
          "type": "object",
          "properties": {
            "email": { "type": "boolean" },
            "mobile": { "type": "boolean" },
            "feed": { "type": "boolean" },
            "slack": {
              "type": "object",
              "required": [ "active", "url", "channels" ],
              "properties": {
                "active": { "type": "boolean" },
                "url": { "type": "string" },
                "channels": { "type": "string" }
              }
            },
            "zapier": {
              "type": "object",
              "required": [ "active", "url" ],
              "properties": {
                "active": { "type": "boolean" },
                "url": { "type": "string" }
              }
            },
            "webhooks": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [ "active", "url", "name" ],
                "properties": {
                  "name": { "type": "string" },
                  "url": { "type": "string" },
                  "active": { "type": "boolean" }
                }
              }
            }
          }
        }
      }
    },
    "kpi": {
      "type": "object",
      "required": [ "datasource", "metadata" ],
      "properties": {
        "datasource": { "type": "object" },
        "metadata": {
          "type": "object",
          "required": [ "measures" ],
          "properties": {
            "measures": {
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [ "jaql" ],
                "properties": {
                  "jaql": { "type": "object" },
                  "format": { "type": "object" }
                }
              }
            },
            "filters": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [ "jaql" ],
                "properties": {
                  "jaql": { "type": "object" },
                  "panel": {
                    "type": "string",
                    "default": "scope",
                    "enum": [ "scope" ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "feature": { "type": "object" },
    "toggleFeature": {
      "type": "object",
      "required": [ "active" ],
      "properties": { "active": { "type": "boolean" } }
    },
    "baseEmailServer": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "description": "If TRUE enable email server instead of default."
        },
        "host": {
          "type": "string",
          "description": "Hostname or IP address to connect to."
        },
        "port": {
          "type": "integer",
          "description": "Port to connect to."
        },
        "secure": {
          "type": "boolean",
          "default": false,
          "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
        },
        "ignoreTLS": {
          "type": "boolean",
          "default": false,
          "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
        },
        "requireTLS": {
          "type": "boolean",
          "default": false,
          "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
        },
        "connectionTimeout": {
          "type": "integer",
          "minimum": 0,
          "default": 10000,
          "description": "How many milliseconds to wait for the connection to establish."
        },
        "greetingTimeout": {
          "type": "integer",
          "minimum": 0,
          "default": 5000,
          "description": "How many milliseconds to wait for the greeting after connection is established."
        },
        "socketTimeout": {
          "type": "integer",
          "minimum": 0,
          "default": 5000,
          "description": "How many milliseconds of inactivity to allow."
        },
        "user": {
          "type": "string",
          "description": "User name."
        },
        "pass": {
          "type": "string",
          "description": "User password."
        },
        "logger": {
          "type": "boolean",
          "default": false,
          "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
        },
        "debug": {
          "type": "boolean",
          "default": false,
          "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
        }
      }
    },
    "emailServer": {
      "type": "object",
      "required": [ "enable", "host", "port" ],
      "properties": {
        "enable": {
          "type": "boolean",
          "description": "If TRUE enable email server instead of default."
        },
        "host": {
          "type": "string",
          "description": "Hostname or IP address to connect to."
        },
        "port": {
          "type": "integer",
          "description": "Port to connect to."
        },
        "secure": {
          "type": "boolean",
          "default": false,
          "description": "If TRUE the connection will only use TLS. If false (the default), TLS may still be upgraded to if available via the STARTTLS command."
        },
        "ignoreTLS": {
          "type": "boolean",
          "default": false,
          "description": "If this is TRUE and secure is FALSE, TLS will not be used (either to connect, or as a STARTTLS connection upgrade command)."
        },
        "requireTLS": {
          "type": "boolean",
          "default": false,
          "description": "If this is TRUE and secure is FALSE, it forces application to use STARTTLS even if the server does not advertise support for it."
        },
        "connectionTimeout": {
          "type": "integer",
          "minimum": 0,
          "default": 10000,
          "description": "How many milliseconds to wait for the connection to establish."
        },
        "greetingTimeout": {
          "type": "integer",
          "minimum": 0,
          "default": 5000,
          "description": "How many milliseconds to wait for the greeting after connection is established."
        },
        "socketTimeout": {
          "type": "integer",
          "minimum": 0,
          "default": 5000,
          "description": "How many milliseconds of inactivity to allow."
        },
        "user": {
          "type": "string",
          "description": "User name."
        },
        "pass": {
          "type": "string",
          "description": "User password."
        },
        "logger": {
          "type": "boolean",
          "default": false,
          "description": "If set to true then logs to console. If value is not set or is false then nothing is logged."
        },
        "debug": {
          "type": "boolean",
          "default": false,
          "description": "If set to true, then logs SMTP traffic, otherwise logs only transaction events."
        }
      }
    },
    "publicSettings": {
      "type": "object",
      "required": [ "firstday" ],
      "properties": {
        "firstday": {
          "type": "string",
          "description": "Name of the first day of week"
        },
        "language": {
          "type": "string",
          "description": "Language for localization"
        }
      }
    },
    "globalizationSettings": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of configuration.",
          "default": "globalization"
        },
        "language": {
          "type": "string",
          "description": "Default language for localization."
        },
        "localization": {
          "type": "object",
          "properties": {
            "default": {
              "type": "string",
              "description": "Default locale for localization."
            },
            "autoDetectEnabled": {
              "type": "boolean",
              "description": "If language autodetect is enabled."
            }
          }
        }
      }
    },
    "ssoSettings": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "ID of config."
        },
        "name": {
          "type": "string",
          "description": "Name of configuration.",
          "default": "sso"
        },
        "enabled": {
          "type": "boolean",
          "description": "If SSO is enabled."
        },
        "ssoType": {
          "type": "string",
          "description": "Type of SSO.",
          "default": "jwt"
        },
        "loginUrl": {
          "type": "string",
          "description": "This is the URL that nonsense will invoke to attempt remote authentication."
        },
        "logoutUrl": {
          "type": "string",
          "description": "This is the URL that nonsense will return users to after they log out."
        },
        "sharedSecret": {
          "type": "string",
          "description": "Used in the token generation script."
        },
        "loginUrlSaml": {
          "type": "string",
          "description": "This is the URL that nonsense will invoke to attempt remote authentication via SAML."
        },
        "logoutUrlSaml": {
          "type": "string",
          "description": "This is the URL that nonsense will return users to after they log out via SAML."
        },
        "idPCert": {
          "type": "string",
          "description": "This is the certificate of identity provider."
        },
        "lowSecurityJwtSso": {
          "type": "boolean",
          "description": "Allow lower level security by disabling JTI enforcement.",
          "default": false
        },
        "syncGroupsFromSamlToken": {
          "type": "boolean",
          "description": "Update the users' groups, based on the SAML attribute memberOf.",
          "default": false
        }
      }
    },
    "systemSettings": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "ID of config."
        },
        "alias": {
          "type": "string",
          "description": "Web server public address."
        },
        "firstday": {
          "type": "string",
          "description": "First day of the week for date related ElastiCube queries."
        },
        "fiscal": {
          "type": "object",
          "description": "Fiscal Year.",
          "properties": {
            "month": {
              "type": "string",
              "enum": [ "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" ]
            }
          }
        },
        "isAdminAccessAllDashboards": {
          "type": "boolean",
          "description": "Allow admin access for all dashboards"
        },
        "email": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "If mails are enabled."
            },
            "senderEmail": {
              "type": "string",
              "description": "Email of sender."
            },
            "senderName": {
              "type": "string",
              "description": "Name of sender."
            }
          }
        },
        "webServer": {
          "type": "object",
          "properties": {
            "enableSSl": {
              "type": "boolean",
              "description": "If SSL is enabled."
            },
            "cors": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "If cors settings is enabled."
                },
                "allowedOrigins": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "pulseSettings": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "ID of config."
        },
        "name": {
          "type": "string",
          "description": "Name of configuration.",
          "default": "pulse"
        },
        "script": {
          "type": "string",
          "description": "Pulse page extension script.",
          "default": ""
        }
      }
    },
    "lightConnector": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "name": { "type": "string" }
      }
    },
    "liveConnectorConnectionStatus": {
      "type": "object",
      "properties": { "status": { "type": "string" } }
    },
    "liveConnectorConnectionBody": {
      "type": "object",
      "required": [ "connection" ],
      "properties": {
        "connection": {
          "type": "object",
          "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
        },
        "schema": {
          "type": "string",
          "description": "Database schema"
        },
        "table": {
          "type": "string",
          "description": "Table name"
        },
        "limit": { "type": "number" },
        "fetchRelations": {
          "type": "boolean",
          "description": "Used in schema details api. Tells api to return table relations next to columns"
        },
        "sql": { "type": "string" }
      }
    },
    "liveConnectionTableColumn": {
      "type": "object",
      "properties": {
        "columnName": { "type": "string" },
        "columnOrder": { "type": "number" },
        "dbType": { "type": "number" },
        "size": { "type": "number" },
        "precision": { "type": "number" },
        "scale": { "type": "number" }
      }
    },
    "liveConnectionTable": {
      "type": "object",
      "properties": {
        "catalog": { "type": "string" },
        "schemaName": { "type": "string" },
        "tableName": { "type": "string" },
        "tableType": { "type": "string" },
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "columnName": { "type": "string" },
              "columnOrder": { "type": "number" },
              "dbType": { "type": "number" },
              "size": { "type": "number" },
              "precision": { "type": "number" },
              "scale": { "type": "number" }
            }
          }
        },
        "relations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fkName": { "type": "string" },
              "parentSchema": { "type": "string" },
              "parentTable": { "type": "string" },
              "parentColumns": {
                "type": "array",
                "items": { "type": "string" }
              },
              "childSchema": { "type": "string" },
              "childTable": { "type": "string" },
              "childColumns": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "connectorManifest": {
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "titleCustomization": {
          "type": "object",
          "properties": {
            "database": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "translationKey": { "type": "string" }
              }
            },
            "table": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "translationKey": { "type": "string" }
              }
            }
          }
        },
        "connection": {
          "type": "object",
          "properties": {
            "oauth2": {
              "type": "object",
              "properties": {
                "baseUrl": { "type": "string" },
                "authorizationEndpoint": { "type": "string" },
                "accessTokenEndpoint": { "type": "string" },
                "clientId": { "type": "string" },
                "clientSecret": { "type": "string" },
                "scope": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            },
            "base": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "title": { "type": "string" },
                  "titleTranslationKey": { "type": "string" },
                  "type": { "type": "string" },
                  "icon": { "type": "string" },
                  "required": { "type": "boolean" },
                  "send": { "type": "boolean" },
                  "default": { "type": "string" },
                  "description": { "type": "string" },
                  "descriptionTranslationKey": { "type": "string" },
                  "pattern": { "type": "string" },
                  "trim": { "type": "boolean" },
                  "min": { "type": "number" },
                  "max": { "type": "number" },
                  "multivalue": { "type": "boolean" },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": { "type": "string" },
                        "value": { "type": "string" }
                      }
                    }
                  },
                  "availableIf": {
                    "type": "object",
                    "properties": {
                      "parameter": { "type": "string" },
                      "hasValue": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "datasetUpdatedProperties": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "partyId", "permission", "type" ],
            "properties": {
              "partyId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "permission": {
                "type": "string",
                "enum": [ "r", "w" ]
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group" ]
              }
            }
          }
        },
        "owner": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "elasticube": { "type": "string" },
        "name": { "type": "string" },
        "fullname": { "type": "string" },
        "type": {
          "type": "string",
          "enum": [ "live", "extract" ]
        },
        "connection": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "modeling-transformations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "join" ]
              },
              "arguments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "table": { "type": "string" },
                    "column": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "schema": {
          "type": "object",
          "properties": {
            "tables": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "name": { "type": "string" },
                  "columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "type": { "type": "number" },
                        "size": { "type": "number" },
                        "scale": { "type": "number" },
                        "precision": { "type": "number" }
                      }
                    }
                  },
                  "tuple-transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                        },
                        "arguments": {
                          "type": "object",
                          "properties": { "column": { "type": "string" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "schedule": {
          "type": "object",
          "properties": { "type": { "type": "string" } }
        }
      }
    },
    "datasetToAdd": {
      "type": "object",
      "required": [ "name", "type", "schema", "connection" ],
      "properties": {
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "partyId", "permission", "type" ],
            "properties": {
              "partyId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "permission": {
                "type": "string",
                "enum": [ "r", "w" ]
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group" ]
              }
            }
          }
        },
        "elasticube": { "type": "string" },
        "name": { "type": "string" },
        "type": {
          "type": "string",
          "enum": [ "live", "extract" ]
        },
        "connection": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "modeling-transformations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "join" ]
              },
              "arguments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "table": { "type": "string" },
                    "column": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "schema": {
          "type": "object",
          "properties": {
            "tables": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "name": { "type": "string" },
                  "columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "type": { "type": "number" },
                        "size": { "type": "number" },
                        "scale": { "type": "number" },
                        "precision": { "type": "number" }
                      }
                    }
                  },
                  "tuple-transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                        },
                        "arguments": {
                          "type": "object",
                          "properties": { "column": { "type": "string" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "schedule": {
          "type": "object",
          "properties": { "type": { "type": "string" } }
        }
      }
    },
    "dataset": {
      "type": "object",
      "required": [ "_id", "shares", "owner", "name", "fullname", "type", "connection", "schema" ],
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "partyId", "permission", "type" ],
            "properties": {
              "partyId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "permission": {
                "type": "string",
                "enum": [ "r", "w" ]
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group" ]
              }
            }
          }
        },
        "owner": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "elasticube": { "type": "string" },
        "name": { "type": "string" },
        "fullname": { "type": "string" },
        "type": {
          "type": "string",
          "enum": [ "live", "extract" ]
        },
        "connection": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "modeling-transformations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "join" ]
              },
              "arguments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "table": { "type": "string" },
                    "column": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "schema": {
          "type": "object",
          "properties": {
            "tables": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "name": { "type": "string" },
                  "columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "type": { "type": "number" },
                        "size": { "type": "number" },
                        "scale": { "type": "number" },
                        "precision": { "type": "number" }
                      }
                    }
                  },
                  "tuple-transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                        },
                        "arguments": {
                          "type": "object",
                          "properties": { "column": { "type": "string" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "schedule": {
          "type": "object",
          "properties": { "type": { "type": "string" } }
        }
      }
    },
    "datasetModelingTransformations": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [ "join" ]
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "table": { "type": "string" },
                "column": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "datasetSchema": {
      "type": "object",
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "name": { "type": "string" },
              "columns": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "name": { "type": "string" },
                    "type": { "type": "number" },
                    "size": { "type": "number" },
                    "scale": { "type": "number" },
                    "precision": { "type": "number" }
                  }
                }
              },
              "tuple-transformations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [ "change-data-type", "replace-nulls", "split-column", "hide-column", "rename-column" ]
                    },
                    "arguments": {
                      "type": "object",
                      "properties": { "column": { "type": "string" } }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "permission": {
      "type": "object",
      "required": [ "partyId", "permission", "type" ],
      "properties": {
        "partyId": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "permission": {
          "type": "string",
          "enum": [ "r", "w" ]
        },
        "type": {
          "type": "string",
          "enum": [ "user", "group" ]
        }
      }
    },
    "permissions": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [ "partyId", "permission", "type" ],
        "properties": {
          "partyId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "permission": {
            "type": "string",
            "enum": [ "r", "w" ]
          },
          "type": {
            "type": "string",
            "enum": [ "user", "group" ]
          }
        }
      }
    },
    "datasetShares": {
      "type": "object",
      "required": [ "dataset", "shares" ],
      "properties": {
        "dataset": { "type": "string" },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "partyId", "type" ],
            "properties": {
              "partyId": { "type": "string" },
              "type": { "type": "string" },
              "email": { "type": "string" }
            }
          }
        }
      }
    },
    "permissionRole": {
      "type": "string",
      "enum": [ "r", "w" ]
    },
    "permissionType": {
      "type": "string",
      "enum": [ "user", "group" ]
    },
    "mongoObjectId": {
      "type": "string",
      "pattern": "^[0-9a-fA-F]{24}$"
    },
    "dataContextOfDataSet": {
      "type": "object",
      "required": [ "_id", "dataSourceId", "allMembers", "members", "shares", "datatype", "table", "column", "live", "fullname" ],
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "dataSourceId": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "allMembers": { "type": "boolean" },
        "members": {
          "type": "array",
          "items": { "type": "string" }
        },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "type" ],
            "properties": {
              "partyId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group", "default" ]
              }
            }
          }
        },
        "datatype": {
          "type": "string",
          "enum": [ "text", "numeric" ]
        },
        "table": { "type": "string" },
        "column": { "type": "string" },
        "live": { "type": "boolean" },
        "fullname": { "type": "string" }
      }
    },
    "newDataContextOfDataSet": {
      "type": "object",
      "required": [ "allMembers", "members", "shares", "datatype", "table", "column", "live", "fullname" ],
      "properties": {
        "allMembers": { "type": "boolean" },
        "members": {
          "type": "array",
          "items": { "type": "string" }
        },
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "type" ],
            "properties": {
              "partyId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": {
                "type": "string",
                "enum": [ "user", "group", "default" ]
              }
            }
          }
        },
        "datatype": {
          "type": "string",
          "enum": [ "text", "numeric" ]
        },
        "table": { "type": "string" },
        "column": { "type": "string" },
        "live": { "type": "boolean" },
        "fullname": { "type": "string" }
      }
    },
    "partyDataContext": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [ "type" ],
        "properties": {
          "partyId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "type": {
            "type": "string",
            "enum": [ "user", "group", "default" ]
          }
        }
      }
    },
    "connection": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "owner": { "type": "string" },
        "provider": { "type": "string" },
        "timeout": { "type": "number" },
        "refreshRate": { "type": "number" },
        "timezone": { "type": "string" },
        "schema": { "type": "string" },
        "parameters": { "type": "object" }
      }
    },
    "connectionWithDuplicates": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "owner": { "type": "string" },
        "provider": { "type": "string" },
        "timeout": { "type": "number" },
        "refreshRate": { "type": "number" },
        "timezone": { "type": "string" },
        "schema": { "type": "string" },
        "parameters": { "type": "object" },
        "duplicates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "timeout": { "type": "number" },
              "refreshRate": { "type": "number" },
              "timezone": { "type": "string" }
            }
          }
        }
      }
    },
    "connectionWithProviderBody": {
      "type": "object",
      "required": [ "connectionData", "provider" ],
      "properties": {
        "connectionData": {
          "type": "object",
          "required": [ "connection" ],
          "properties": {
            "connection": {
              "type": "object",
              "description": "Key value pairs of connection properties for specific connector. Values **must** be strings or array of strings."
            },
            "schema": {
              "type": "string",
              "description": "Database schema"
            },
            "table": {
              "type": "string",
              "description": "Table name"
            },
            "limit": { "type": "number" },
            "fetchRelations": {
              "type": "boolean",
              "description": "Used in schema details api. Tells api to return table relations next to columns"
            },
            "sql": { "type": "string" }
          }
        },
        "provider": {
          "type": "string",
          "description": "new provider name"
        }
      }
    },
    "ldapDomainRequest": {
      "type": "object",
      "properties": {
        "enabled": { "type": "boolean" },
        "url": {
          "type": "string",
          "pattern": "^ldap\\:\\/\\/.+"
        },
        "baseDN": { "type": "string" },
        "username": { "type": "string" },
        "password": { "type": "string" },
        "name": { "type": "string" },
        "syncActive": { "type": "boolean" },
        "syncInterval": { "type": "integer" }
      }
    },
    "ldapDomainSyncRequest": {
      "type": "object",
      "properties": {
        "force": {
          "description": "indicates if to sync all the changes from the Active Directory server since it was created",
          "type": "boolean",
          "default": false
        },
        "gnames": {
          "description": "groups to sync",
          "type": "array",
          "uniqueItems": true,
          "default": [],
          "items": { "type": "string" }
        },
        "unames": {
          "description": "users to sync",
          "type": "array",
          "uniqueItems": true,
          "default": [],
          "items": { "type": "string" }
        }
      }
    },
    "ldapDomainResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "enabled": { "type": "boolean" },
        "url": { "type": "string" },
        "baseDN": { "type": "string" },
        "username": { "type": "string" },
        "name": { "type": "string" },
        "syncUsn": { "type": "string" },
        "syncActive": { "type": "boolean" },
        "syncInterval": { "type": "integer" }
      }
    },
    "ldapDomainTestRequest": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "url": {
          "type": "string",
          "pattern": "^ldap\\:\\/\\/.+"
        },
        "baseDN": { "type": "string" },
        "username": { "type": "string" },
        "password": { "type": "string" }
      }
    },
    "analyticsTokenResponse": {
      "type": "object",
      "required": [ "analytics_token" ],
      "properties": { "analytics_token": { "type": "string" } }
    },
    "datasourceDimension": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "column": { "type": "string" },
        "table": { "type": "string" },
        "dimtype": { "type": "string" },
        "indexed": { "type": "boolean" },
        "merged": { "type": "boolean" },
        "title": { "type": "string" },
        "type": { "type": "string" }
      }
    },
    "timer": {
      "type": "object",
      "properties": {
        "dashboard": {
          "type": "object",
          "description": "Dashboard object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Dashboard title"
            },
            "oid": {
              "type": "string",
              "description": "Dashboard ID"
            },
            "logStartLoad": {
              "type": "integer",
              "description": "Time when dashboard started load (in milliseconds)"
            },
            "logEndLoad": {
              "type": "integer",
              "description": "Time when dashboard ended load (in milliseconds)"
            },
            "logStartRefresh": {
              "type": "integer",
              "description": "Time when dashboard started refresh (in milliseconds)"
            },
            "logEndRefresh": {
              "type": "integer",
              "description": "Time when dashboard ended refresh (in milliseconds)"
            },
            "widgets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "oid": {
                    "type": "string",
                    "description": "Widget ID"
                  },
                  "title": {
                    "type": "string",
                    "description": "Widget title"
                  },
                  "type": {
                    "type": "string",
                    "description": "Widget type"
                  },
                  "logStartLoad": {
                    "type": "integer",
                    "description": "Time when widget started load (in milliseconds)"
                  },
                  "logEndLoad": {
                    "type": "integer",
                    "description": "Time when widget ended load (in milliseconds)"
                  },
                  "logStartQuery": {
                    "type": "integer",
                    "description": "Time when widget started query(in milliseconds)"
                  },
                  "logEndQuery": {
                    "type": "integer",
                    "description": "Time when widget ended query (in milliseconds)"
                  },
                  "logStartRender": {
                    "type": "integer",
                    "description": "Time when widget started render(in milliseconds)"
                  },
                  "logEndRender": {
                    "type": "string",
                    "description": "Time when widget ended render (in milliseconds)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "addDocument": { "type": "object" },
    "getAllDocuments": {
      "type": "array",
      "items": { "type": "object" }
    },
    "updateDocument": {
      "type": "object",
      "required": [ "queryForSearch", "objectForUpdate" ],
      "properties": {
        "queryForSearch": { "type": "object" },
        "objectForUpdate": { "type": "object" }
      }
    },
    "narrationToken": {
      "type": "object",
      "properties": {
        "narrationToken": {
          "description": "narration provider token.",
          "type": "string"
        }
      }
    },
    "narrationWidgetResponse": {
      "type": "object",
      "properties": {
        "narration": {
          "description": "narration text",
          "type": "string"
        }
      }
    },
    "jaqlRequest": {
      "description": "JAQL query object",
      "type": "object",
      "required": [ "datasource", "metadata" ],
      "properties": {
        "datasource": { "type": "string" },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "jaql": {
                "type": "object",
                "properties": {
                  "dim": { "type": "string" },
                  "datatype": { "type": "string" },
                  "title": { "type": "string" }
                }
              },
              "field": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" },
                  "index": { "type": "integer" }
                }
              },
              "format": { "type": "object" }
            }
          }
        },
        "format": {
          "description": "data format",
          "type": "string"
        },
        "isMaskedResult": {
          "description": "masked result check",
          "type": "boolean"
        },
        "count": {
          "description": "narration text",
          "type": "number"
        },
        "offset": {
          "description": "offset",
          "type": "number"
        }
      }
    },
    "narrationConfiguration": {
      "description": "narration configuration",
      "type": "object",
      "properties": {
        "format": {
          "description": "narration text format",
          "type": "string",
          "enum": [ "bullets", "paragraph" ]
        },
        "verbosity": {
          "description": "narration text verbosity",
          "type": "string",
          "enum": [ "medium", "high", "low" ]
        },
        "up_sentiment": {
          "description": "narration text sentiment",
          "type": "string",
          "enum": [ "good", "bad" ]
        },
        "aggregation": {
          "description": "narration text aggregation",
          "type": "string",
          "enum": [ "sum", "average" ]
        }
      }
    },
    "narrationWidgetRequest": {
      "type": "object",
      "required": [ "jaqlRequest", "narration", "chartType" ],
      "properties": {
        "chartType": {
          "description": "сhart type like \"chart/pie\" and etc.",
          "type": "string"
        },
        "narration": {
          "description": "narration configuration",
          "type": "object",
          "properties": {
            "format": {
              "description": "narration text format",
              "type": "string",
              "enum": [ "bullets", "paragraph" ]
            },
            "verbosity": {
              "description": "narration text verbosity",
              "type": "string",
              "enum": [ "medium", "high", "low" ]
            },
            "up_sentiment": {
              "description": "narration text sentiment",
              "type": "string",
              "enum": [ "good", "bad" ]
            },
            "aggregation": {
              "description": "narration text aggregation",
              "type": "string",
              "enum": [ "sum", "average" ]
            }
          }
        },
        "jaqlRequest": {
          "description": "JAQL query object",
          "type": "object",
          "required": [ "datasource", "metadata" ],
          "properties": {
            "datasource": { "type": "string" },
            "metadata": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "jaql": {
                    "type": "object",
                    "properties": {
                      "dim": { "type": "string" },
                      "datatype": { "type": "string" },
                      "title": { "type": "string" }
                    }
                  },
                  "field": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "index": { "type": "integer" }
                    }
                  },
                  "format": { "type": "object" }
                }
              }
            },
            "format": {
              "description": "data format",
              "type": "string"
            },
            "isMaskedResult": {
              "description": "masked result check",
              "type": "boolean"
            },
            "count": {
              "description": "narration text",
              "type": "number"
            },
            "offset": {
              "description": "offset",
              "type": "number"
            }
          }
        },
        "widgetId": {
          "description": "widget id",
          "type": "string"
        },
        "dashboardId": {
          "description": "dashboard id",
          "type": "string"
        }
      }
    },
    "narrationAnalytics": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "disable/enable analytics for narration",
          "type": "boolean"
        },
        "clustering": {
          "description": "attempts to find clusters of closely-related data points",
          "type": "object"
        },
        "distribution": {
          "description": "determines if the data collection follows a normal distribution",
          "type": "object"
        },
        "correlation": {
          "description": "performs regressions of the measure values across the discrete dimension and comments on the analysis",
          "type": "object"
        },
        "trendline": {
          "description": "trendlines consist of fitting the data for each measure to a line and determining whether or not that model fits the data",
          "type": "object"
        },
        "segments": {
          "description": "segments are noteworthy/interesting portions of a series with movements of a certain percent of change",
          "type": "object"
        },
        "volatility": {
          "description": "volatility is a measure of how erratic a series is, used to rank series to find the most or least volatile",
          "type": "object"
        }
      }
    },
    "geoJsonResponse": {
      "type": "object",
      "properties": {
        "type": { "type": "string" },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "string"
              },
              "id": {
                "type": "string",
                "default": "string"
              },
              "properties": { "type": "object" },
              "geometry": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "string"
                  },
                  "coordinates": {
                    "type": "array",
                    "items": { "type": "array" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "locationsResponse": {
      "required": [ "name", "latLng", "placetype" ],
      "properties": {
        "name": { "type": "string" },
        "asciiname": { "type": "string" },
        "latLng": {
          "type": "object",
          "properties": {
            "lat": {
              "type": "number",
              "format": "float"
            },
            "lng": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "placetype": { "type": "string" },
        "country": { "type": "string" },
        "countryCode": { "type": "string" },
        "fqn": { "type": "string" },
        "lookupKey": { "type": "string" },
        "text": { "type": "string" },
        "place_name": { "type": "string" },
        "context": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "short_code": { "type": "string" },
              "text": { "type": "string" },
              "wikidata": { "type": "string" }
            }
          }
        },
        "version": { "type": "string" },
        "_id": { "type": "string" }
      }
    },
    "location": {
      "required": [ "name" ],
      "properties": {
        "name": { "type": "string" },
        "country": {
          "type": "string",
          "default": "string"
        },
        "state": {
          "type": "string",
          "default": "string"
        },
        "city": {
          "type": "string",
          "default": "string"
        }
      }
    },
    "plugins": {
      "type": "object",
      "description": "Plugin object",
      "properties": {
        "name": {
          "description": "plugin name",
          "type": "string"
        },
        "version": {
          "description": "version of plugin",
          "type": "number"
        },
        "lastUpdate": {
          "description": "last time plugin updated",
          "type": "string"
        },
        "isEnabled": {
          "description": "enabled/disabled plugin status",
          "type": "boolean"
        },
        "folderName": {
          "description": "plugin folder name",
          "type": "string"
        }
      }
    },
    "getPlugins": {
      "type": "object",
      "description": "Plugin response model",
      "properties": {
        "plugins": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Plugin object",
            "properties": {
              "name": {
                "description": "plugin name",
                "type": "string"
              },
              "version": {
                "description": "version of plugin",
                "type": "number"
              },
              "lastUpdate": {
                "description": "last time plugin updated",
                "type": "string"
              },
              "isEnabled": {
                "description": "enabled/disabled plugin status",
                "type": "boolean"
              },
              "folderName": {
                "description": "plugin folder name",
                "type": "string"
              }
            }
          }
        },
        "count": {
          "description": "amount of plugins",
          "type": "number"
        },
        "queryMetadata": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "limit of items to return",
              "type": "number"
            },
            "skip": {
              "description": "number of items to skip",
              "type": "number"
            },
            "search": {
              "description": "filter by provided string",
              "type": "string"
            },
            "orderby": {
              "description": "order by specific field",
              "type": "string"
            },
            "desc": {
              "description": "sort by descending or ascending",
              "type": "boolean"
            }
          }
        }
      }
    },
    "newPlugins": {
      "description": "Plugin updated response model",
      "type": "array",
      "items": {
        "type": "object",
        "description": "Plugin object",
        "properties": {
          "name": {
            "description": "plugin name",
            "type": "string"
          },
          "version": {
            "description": "version of plugin",
            "type": "number"
          },
          "lastUpdate": {
            "description": "last time plugin updated",
            "type": "string"
          },
          "isEnabled": {
            "description": "enabled/disabled plugin status",
            "type": "boolean"
          },
          "folderName": {
            "description": "plugin folder name",
            "type": "string"
          }
        }
      }
    },
    "elasticubeServer": {
      "type": "object",
      "properties": {
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "address": { "type": "string" },
        "defaultCubePermissions": {
          "type": "array",
          "items": { "type": "object" }
        },
        "identity": { "type": "string" }
      }
    },
    "serverPermissions": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "type": { "type": "string" },
        "permission": { "type": "string" }
      }
    },
    "candidates": {
      "description": "Array of candidates to suggest",
      "type": "object",
      "properties": {
        "queryMetadata": {
          "description": "query metadata",
          "type": "object",
          "properties": {
            "target": {
              "description": "which items to look for suggestions",
              "type": "array",
              "items": { "type": "string" }
            },
            "popular": {
              "description": "include popular fields or not",
              "type": "boolean"
            },
            "total": {
              "description": "total items which match query metadata",
              "type": "number"
            },
            "skip": {
              "description": "number of skiped items",
              "type": "number"
            },
            "count": {
              "description": "number of returned items",
              "type": "number"
            }
          }
        },
        "suggestions": {
          "type": "array",
          "description": "fields to suggest",
          "items": {
            "type": "object",
            "properties": {
              "table": { "type": "string" },
              "column": { "type": "string" },
              "datatype": { "type": "string" },
              "title": { "type": "string" },
              "rank": { "type": "string" }
            }
          }
        }
      }
    },
    "suggestionProperties": {
      "description": "Properties to get suggestion items",
      "type": "object",
      "required": [ "type", "datasource", "fields" ],
      "properties": {
        "datasource": {
          "description": "datasource name",
          "type": "object"
        },
        "type": {
          "description": "define suggestion type [widgets]",
          "type": "string"
        },
        "count": {
          "description": "how many items to return. By default 20",
          "type": "number"
        },
        "fields": {
          "description": "which items to look for suggestions",
          "type": "array",
          "items": { "type": "object" }
        },
        "skip": {
          "description": "number of items to skip. By default 0",
          "type": "number"
        },
        "popular": {
          "description": "include popular fields or not. By default true",
          "type": "boolean"
        }
      }
    },
    "statusProps": {
      "description": "Properties to refresh suggestions",
      "type": "object",
      "properties": {
        "data": {
          "description": "refresh suggestions data or not. By default false.",
          "type": "boolean"
        },
        "ranking": {
          "description": "refresh suggestions ranking or not. By default false.",
          "type": "boolean"
        }
      }
    },
    "status": {
      "description": "Status of suggestions",
      "type": "object",
      "properties": {
        "lastExecution": {
          "description": "Time when was last suggestions refresh.",
          "type": "string"
        },
        "jobStatus": {
          "description": "Define job status.",
          "type": "string"
        },
        "jobFrequent": {
          "description": "Job schedule in cron format.",
          "type": "string"
        },
        "executionStatus": {
          "description": "Executions status of suggestions processes.",
          "type": "boolean"
        }
      }
    },
    "suggestionsStatus": {
      "description": "Status of suggestions",
      "type": "object",
      "properties": {
        "message": {
          "description": "Information message.",
          "type": "string"
        },
        "suggestionCode": {
          "description": "Suggestions code.",
          "type": "number"
        }
      }
    },
    "encryptedValue": { "type": "string" },
    "decryptedValue": { "type": "string" }
  },
  "parameters": {
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "Whitelist of fields to return for each document. fields Can also define which fields to exclude by prefixing field names with `-`",
      "required": false,
      "type": "string"
    },
    "sort": {
      "name": "sort",
      "in": "query",
      "description": "Field by which the results should be sorted. Ascending by default, descending if prefixed by `-`",
      "required": false,
      "type": "string"
    },
    "skip": {
      "name": "skip",
      "in": "query",
      "description": "Number of results to skip from the start of the data set. skip is to be used with the `limit` parameter for paging",
      "required": false,
      "type": "integer",
      "minimum": 0
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "How many results should be returned. limit is to be used with the `skip` parameter for paging",
      "required": false,
      "type": "integer",
      "minimum": 1
    },
    "expand": {
      "name": "expand",
      "in": "query",
      "description": "List of fields that should be expanded (substitures their IDs with actual objects). May be nested using the `resource.subResource` format",
      "required": false,
      "type": "string"
    },
    "x-device-id": {
      "in": "header",
      "description": "The device id.",
      "name": "x-device-id",
      "required": false,
      "type": "string"
    },
    "authorization": {
      "in": "header",
      "description": "The user's API token preceded by the keyword `Bearer ` (with space between it and the token). For more information, see [API tutorial](http://developer.nonsense.com/display/API2/Using+the+REST+API).",
      "name": "authorization",
      "required": false,
      "type": "string",
      "pattern": "^Bearer .*"
    }
  }
}