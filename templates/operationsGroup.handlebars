import * as superAgentRequest from "superagent";
import { Stream, PassThrough } from "stream";
{{#if imports.types}}
import { {{#joinList imports.types}}{{this}}{{/joinList}} } from "{{imports.path}}";
{{/if}}

{{#if info}}
/*
    {{info.title}} {{info.version}}
    {{wrap '    '  info.description}}
    {{#if info.terms}}

    Terms:
    {{wrap '    ' info.terms}}
    {{/if}}
    {{#if info.contact}}
    
    Contact:
    {{info.contact.name}}
    {{info.contact.email}}
    {{info.contact.url}}
    {{/if}}
    {{#if info.license}}

    License:
    {{info.license.name}}
    {{info.license.url}}
    {{/if}}

    {{#if info.termsOfService}}
    Terms of Service:
    {{info.termsOfService}}
    {{/if}}

    
*/
{{/if}}

{{#if tag}}
    {{#each tag}}
    {{this}}
    {{/each}}
{{/if}}

export class {{operationGroup.operationsGroupName}} {
    constructor(private baseUrl:string {{#if basePath}} = "{{basePath}}"{{/if}}){

    }

    {{#each operationGroup.operations}}
    {{#if (or swOpr.summary swOpr.description)}}
    /**
    {{#if swOpr.summary}}
     * {{wrap '     * ' swOpr.summary}}
    {{/if}}
    {{#if swOpr.description}}
     * {{wrap '     * ' swOpr.description}}
    {{/if}}
    {{#each operationParams}}
     * @param { {{paramType}} } {{this.schema.name}} {{wrap '     *        '  this.schema.description}}
    {{/each}}
     */
    {{/if}}
    public {{operationName}}(
        {{#joinList operationParams ",\n        "}} {{paramDisplayName}}:{{paramType}} {{/joinList}}):Promise<{{responsesType}}>{
        {{#if operationParams}}
            {{#some operationParams "op=>(!op.inBody && !op.inPath && !op.inHeader)"}}
        const params = {
            {{#joinList this ",\n" "op=>(!op.inBody && !op.inPath && !op.inHeader)"}}
            "{{paramName}}":{{paramDisplayName}}{{/joinList}}
        };
            {{/some}}
        {{/if}}
        return new Promise<{{responsesType}}>((resolve, reject) => {
            {{#if (eq responsesType "Stream")}}
            let returnStream = new PassThrough();
            {{/if}}
            superAgentRequest
            .{{httpVerb}}(this.baseUrl + `{{operationUrl}}`)
            {{#some operationParams "op=>(!op.inBody && !op.inPath && !op.inHeader)"}}
            .query(params)
            {{/some}}
            {{#some operationParams "op=>(op.inHeader)"}}
            {{#joinList this "\n" "op=>(op.inHeader)"}}
            .set("{{paramName}}",{{paramDisplayName}}){{/joinList}}
            {{/some}}
            {{#filterList operationParams "op=>op.inBody" "1"}}
            .send({{paramDisplayName}})
            {{/filterList}}
            {{#if (eq responsesType "Stream")}}
            .pipe(returnStream);
            resolve(returnStream);
            {{else}}
            .end(function(error, res){
                if(error){
                    reject(error);
                }else{
                   resolve(res.body as {{responsesType}});
                }
            });
            {{/if}}
        });
    }
    {{/each}}
}



